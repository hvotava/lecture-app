import os
from fastapi import FastAPI, Request, WebSocket, WebSocketDisconnect, Response
from fastapi.responses import PlainTextResponse, HTMLResponse, RedirectResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
import logging
from twilio.twiml.voice_response import VoiceResponse, Connect, Stream
from app.models import Attempt, Lesson, User, Answer, Base, TestSession
from sqlalchemy.orm import mapped_column
from fastapi import Query
from fastapi.templating import Jinja2Templates
from fastapi import APIRouter, Form, status, Depends
from starlette.requests import Request
from typing import Optional
from fastapi import Path
import socket
import requests
from sqlalchemy import text
from datetime import datetime
from app.database import SessionLocal
import base64
import json
import io
import openai
# Audio zpracov√°n√≠
import audioop
import wave
import asyncio
import time
import tempfile
from sqlalchemy import Column, Integer, String, DateTime, Text, JSON, Boolean, Float, ForeignKey, text
from sqlalchemy.orm import relationship
from sqlalchemy.orm.attributes import flag_modified
from fastapi.staticfiles import StaticFiles
from admin_dashboard import DashboardStats

load_dotenv()

# Z√°kladn√≠ konfigurace check - neblokuje startup
try:
    print("=== CONFIGURATION CHECK ===")
    missing_vars = []
    required_vars = ['DATABASE_URL', 'OPENAI_API_KEY']
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
            print(f"‚ö†Ô∏è  Missing: {var}")
        else:
            print(f"‚úÖ Found: {var}")
    
    if missing_vars:
        print(f"‚ö†Ô∏è  WARNING: {len(missing_vars)} environment variables missing")
    else:
        print("‚úÖ All critical env vars present")
    print("=== CONFIG CHECK COMPLETE ===")
except Exception as e:
    print(f"‚ùå Config check failed: {e}")

app = FastAPI(title="Lecture App", version="1.0.0")

# Mount static files
app.mount("/static", StaticFiles(directory="app/static"), name="static")

# Startup event handler pro diagnostiku - mus√≠ b√Ωt rychl√Ω pro health check
@app.on_event("startup")
async def startup_event():
    import sys
    print("=== LECTURE APP STARTUP ===")
    print(f"Python version: {sys.version}")
    print(f"PORT env var: {os.getenv('PORT', 'NOT SET')}")
    print(f"DATABASE_URL: {'SET' if os.getenv('DATABASE_URL') else 'NOT SET'}")
    print(f"OPENAI_API_KEY: {'SET' if os.getenv('OPENAI_API_KEY') else 'NOT SET'}")
    print(f"TWILIO_ACCOUNT_SID: {'SET' if os.getenv('TWILIO_ACCOUNT_SID') else 'NOT SET'}")
    
    # Otestuj z√°kladn√≠ importy asynchronnƒõ (neblokuj startup)
    try:
        import asyncio
        asyncio.create_task(test_connections_async())
    except Exception as e:
        print(f"‚ö†Ô∏è  Async connection test failed: {e}")
    
    print("=== STARTUP COMPLETE ===")

async def test_connections_async():
    """Asynchronn√≠ test p≈ôipojen√≠ - nesm√≠ blokovat startup"""
    await asyncio.sleep(1)  # Dej ƒças na startup
    try:
        print("üîç Testing DB connection...")
        from app.database import SessionLocal
        session = SessionLocal()
        session.close()
        print("‚úÖ DB connection OK")
    except Exception as e:
        print(f"‚ùå DB connection failed: {e}")
    
    try:
        print("üîç Testing OpenAI...")
        import openai
        print("‚úÖ OpenAI import OK")
    except Exception as e:
        print(f"‚ùå OpenAI import failed: {e}")

# CORS (pro p≈ô√≠padn√© admin rozhran√≠)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# DEBUG middleware pro WebSocket
@app.middleware("http")
async def debug_middleware(request: Request, call_next):
    print(f"üîç MIDDLEWARE: {request.method} {request.url}")
    if request.url.path == "/audio":
        print("üéØ MIDDLEWARE: Detekov√°n /audio request!")
    response = await call_next(request)
    return response

# Nastaven√≠ ≈°ablon
TEMPLATES_DIR = os.path.join(os.path.dirname(__file__), 'app', 'templates')
templates = Jinja2Templates(directory=TEMPLATES_DIR)

# Admin router
admin_router = APIRouter(prefix="/admin", tags=["admin"])
system_router = APIRouter(prefix="/admin/system", tags=["system"]) # Nov√Ω router

@admin_router.get("/", response_class=HTMLResponse)
def admin_root(request: Request):
    # P≈ôesmƒõrov√°n√≠ na dashboard
    return RedirectResponse(url="/admin/dashboard", status_code=status.HTTP_302_FOUND)

@admin_router.get("/dashboard", response_class=HTMLResponse, name="admin_dashboard")
def admin_dashboard(request: Request):
    stats_generator = DashboardStats()
    overview_stats = stats_generator.get_overview_stats()
    return templates.TemplateResponse("admin/dashboard.html", {
        "request": request,
        "stats": overview_stats
    })

@admin_router.get("/users", response_class=HTMLResponse, name="admin_list_users")
def admin_list_users(request: Request):
    session = SessionLocal()
    try:
        users = session.query(User).all()
        
        # Zajisti, ≈æe v≈°ichni u≈æivatel√© maj√≠ current_lesson_level
        for user in users:
            if not hasattr(user, 'current_lesson_level') or user.current_lesson_level is None:
                user.current_lesson_level = 0
        
        return templates.TemplateResponse("admin/users_list.html", {"request": request, "users": users})
    except Exception as e:
        logger.error(f"‚ùå Kritick√° chyba v admin_list_users: {e}")
        session.rollback() # D≈Øle≈æit√Ω rollback
        
        # Fallback - pr√°zdn√Ω seznam
        return templates.TemplateResponse("admin/users_list.html", {"request": request, "users": [], "error": str(e)})
    finally:
        session.close()

@admin_router.get("/users/new", response_class=HTMLResponse, name="admin_new_user_get")
def admin_new_user_get(request: Request):
    # Pr√°zdn√Ω formul√°≈ô pro nov√©ho u≈æivatele
    return templates.TemplateResponse("admin/user_form.html", {"request": request, "user": None, "form": {"name": "", "phone": "", "language": "cs", "detail": "", "name.errors": [], "phone.errors": [], "language.errors": [], "detail.errors": []}})

@admin_router.post("/users/new", response_class=HTMLResponse)
def admin_new_user_post(request: Request, name: str = Form(...), phone: str = Form(...), language: str = Form(...), detail: str = Form("")):
    errors = {"name": [], "phone": [], "language": [], "detail": []}
    if not name:
        errors["name"].append("Jm√©no je povinn√©.")
    if not phone or not (phone.startswith("+420") or phone.startswith("0")) or len(phone.replace(" ", "")) < 9:
        errors["phone"].append("Telefon mus√≠ b√Ωt ve form√°tu +420XXXXXXXXX nebo 0XXXXXXXXX")
    if language not in ["cs", "en"]:
        errors["language"].append("Neplatn√Ω jazyk.")
    if any(errors.values()):
        return templates.TemplateResponse("admin/user_form.html", {"request": request, "user": None, "form": {"name": name, "phone": phone, "language": language, "detail": detail, "name.errors": errors["name"], "phone.errors": errors["phone"], "language.errors": errors["language"], "detail.errors": errors["detail"]}})
    user = User(name=name, phone=phone, language=language, detail=detail)
    # Doƒçasnƒõ bez current_lesson_level
    session = SessionLocal()
    session.add(user)
    try:
        session.commit()
    except Exception as e:
        session.rollback()
        form = {"name": name, "phone": phone, "language": language, "detail": detail, "name.errors": [str(e)], "phone.errors": [], "language.errors": [], "detail.errors": []}
        session.close()
        return templates.TemplateResponse("admin/user_form.html", {"request": request, "user": None, "form": form})
    session.close()
    return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)

@admin_router.get("/users/{id}/edit", response_class=HTMLResponse, name="admin_edit_user_get")
def admin_edit_user_get(request: Request, id: int = Path(...)):
    session = SessionLocal()
    user = session.query(User).get(id)
    if not user:
        session.close()
        return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)
    form = {"name": user.name, "phone": user.phone, "language": user.language, "detail": user.detail, "name.errors": [], "phone.errors": [], "language.errors": [], "detail.errors": []}
    session.close()
    return templates.TemplateResponse("admin/user_form.html", {"request": request, "user": user, "form": form})

@admin_router.post("/users/{id}/edit", response_class=HTMLResponse)
def admin_edit_user_post(request: Request, id: int = Path(...), name: str = Form(...), phone: str = Form(...), language: str = Form(...), detail: str = Form("")):
    session = SessionLocal()
    user = session.query(User).get(id)
    if not user:
        session.close()
        return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)
    errors = {"name": [], "phone": [], "language": [], "detail": []}
    if not name:
        errors["name"].append("Jm√©no je povinn√©.")
    if not phone or not (phone.startswith("+420") or phone.startswith("0")) or len(phone.replace(" ", "")) < 9:
        errors["phone"].append("Telefon mus√≠ b√Ωt ve form√°tu +420XXXXXXXXX nebo 0XXXXXXXXX")
    if language not in ["cs", "en"]:
        errors["language"].append("Neplatn√Ω jazyk.")
    if any(errors.values()):
        form = {"name": name, "phone": phone, "language": language, "detail": detail, "name.errors": errors["name"], "phone.errors": errors["phone"], "language.errors": errors["language"], "detail.errors": errors["detail"]}
        session.close()
        return templates.TemplateResponse("admin/user_form.html", {"request": request, "user": user, "form": form})
    user.name = name
    user.phone = phone
    user.language = language
    user.detail = detail
    try:
        session.commit()
    except Exception as e:
        session.rollback()
        form = {"name": name, "phone": phone, "language": language, "detail": detail, "name.errors": [str(e)], "phone.errors": [], "language.errors": [], "detail.errors": []}
        session.close()
        return templates.TemplateResponse("admin/user_form.html", {"request": request, "user": user, "form": form})
    session.close()
    return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)

@admin_router.post("/users/{user_id}/delete", name="admin_delete_user")
def admin_delete_user(request: Request, user_id: int = Path(...), force: bool = Query(False)):
    session = SessionLocal()
    try:
        user = session.query(User).get(user_id)
        if not user:
            logger.warning(f"‚ùå Pokus o smaz√°n√≠ neexistuj√≠c√≠ho u≈æivatele ID: {user_id}")
            return templates.TemplateResponse("message.html", {
                "request": request,
                "message": f"‚ùå U≈æivatel s ID {user_id} nebyl nalezen.",
                "back_url": "/admin/users",
                "back_text": "Zpƒõt na u≈æivatele"
            })
        
        # Zkontroluj z√°visl√© z√°znamy
        test_sessions_count = session.query(TestSession).filter(TestSession.user_id == user_id).count()
        attempts_count = session.query(Attempt).filter(Attempt.user_id == user_id).count()
        
        if (test_sessions_count > 0 or attempts_count > 0) and not force:
            logger.warning(f"‚ùå Nelze smazat u≈æivatele {user.name} (ID: {user_id}) - m√° {test_sessions_count} test sessions a {attempts_count} pokus≈Ø")
            
            # Nab√≠dni mo≈ænost vynutit smaz√°n√≠
            force_delete_url = f"/admin/users/{user_id}/delete?force=true"
            return templates.TemplateResponse("message.html", {
                "request": request,
                "message": f"‚ùå U≈æivatel '{user.name}' m√° souvisej√≠c√≠ z√°znamy:\n\n‚Ä¢ {test_sessions_count} aktivn√≠ch test≈Ø\n‚Ä¢ {attempts_count} pokus≈Ø\n\nChcete pokraƒçovat a smazat u≈æivatele i se v≈°emi souvisej√≠c√≠mi z√°znamy?",
                "back_url": "/admin/users",
                "back_text": "Zru≈°it",
                "action_url": force_delete_url,
                "action_text": "Vynutit smaz√°n√≠",
                "action_class": "btn-danger"
            })
        
        # Pokud force=true, sma≈æ v≈°echny souvisej√≠c√≠ z√°znamy
        if force and (test_sessions_count > 0 or attempts_count > 0):
            logger.info(f"üî• VYNUTIT SMAZ√ÅN√ç: Maz√°n√≠ {test_sessions_count} test sessions a {attempts_count} pokus≈Ø pro u≈æivatele {user.name}")
            
            # Sma≈æ v≈°echny test sessions
            session.query(TestSession).filter(TestSession.user_id == user_id).delete()
            
            # Sma≈æ v≈°echny attempts (a jejich answers se sma≈æou automaticky d√≠ky cascade)
            session.query(Attempt).filter(Attempt.user_id == user_id).delete()
            
            logger.info(f"‚úÖ V≈°echny souvisej√≠c√≠ z√°znamy pro u≈æivatele {user.name} byly smaz√°ny")
        
        # Smaz√°n√≠ u≈æivatele
        user_name = user.name
        session.delete(user)
        session.commit()
        
        logger.info(f"‚úÖ U≈æivatel '{user_name}' (ID: {user_id}) byl √∫spƒõ≈°nƒõ smaz√°n")
        return templates.TemplateResponse("message.html", {
            "request": request,
            "message": f"‚úÖ U≈æivatel '{user_name}' byl √∫spƒõ≈°nƒõ smaz√°n.",
            "back_url": "/admin/users",
            "back_text": "Zpƒõt na u≈æivatele"
        })
        
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå Chyba p≈ôi maz√°n√≠ u≈æivatele ID {user_id}: {str(e)}")
        return templates.TemplateResponse("message.html", {
            "request": request,
            "message": f"‚ùå Chyba p≈ôi maz√°n√≠ u≈æivatele: {str(e)}",
            "back_url": "/admin/users",
            "back_text": "Zpƒõt na u≈æivatele"
        })
    finally:
        session.close()

@admin_router.post("/users/{user_id}/call", name="admin_call_user")
def admin_call_user(user_id: int = Path(...)):
    session = SessionLocal()
    user = session.query(User).get(user_id)
    if not user:
        session.close()
        return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)
    lesson = session.query(Lesson).filter_by(language=user.language).order_by(Lesson.id.desc()).first()
    if not lesson:
        session.close()
        return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)
    
    # Vytvo≈ôen√≠ nov√©ho pokusu
    attempt = Attempt(
        user_id=user.id,
        lesson_id=lesson.id,
        next_due=datetime.now()
    )
    session.add(attempt)
    session.commit()
    
    try:
        from app.services.twilio_service import TwilioService
        twilio = TwilioService()
        base_url = os.getenv("WEBHOOK_BASE_URL", "https://lecture-app-production.up.railway.app")
        webhook_url = f"{base_url.rstrip('/')}/voice/?attempt_id={attempt.id}"  # ‚úÖ Pou≈æ√≠v√°m attempt.id
        logger.info(f"Vol√°m u≈æivatele {user.phone} s webhook URL: {webhook_url}")
        twilio.call(user.phone, webhook_url)
    except Exception as e:
        logger.error(f"Chyba p≈ôi vol√°n√≠ Twilio: {e}")
    finally:
        session.close()
    
    return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)

@admin_router.post("/users/{user_id}/call/lesson/{lesson_number}", name="admin_call_user_lesson")
def admin_call_user_lesson(user_id: int = Path(...), lesson_number: int = Path(...)):
    """Zavol√° u≈æivateli s konkr√©tn√≠ lekc√≠ podle ƒç√≠sla lekce"""
    session = SessionLocal()
    try:
        user = session.query(User).get(user_id)
        if not user:
            return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)
        
        # Najdi lekci podle ƒç√≠sla - FALLBACK na jakoukoliv lekci
        lesson = session.query(Lesson).filter_by(
            lesson_number=lesson_number,
            language=user.language
        ).first()
        
        # Fallback - pokud nen√≠ lekce s ƒç√≠slem, vezmi prvn√≠ dostupnou
        if not lesson:
            logger.warning(f"Lekce {lesson_number} nenalezena, pou≈æ√≠v√°m fallback")
            lesson = session.query(Lesson).filter_by(language=user.language).first()
        
        # Fallback - pokud nen√≠ ≈æ√°dn√° lekce v jazyce, vezmi prvn√≠ lekci
        if not lesson:
            logger.warning(f"≈Ω√°dn√° lekce v jazyce {user.language}, pou≈æ√≠v√°m prvn√≠ dostupnou")
            lesson = session.query(Lesson).first()
        
        if not lesson:
            logger.error("≈Ω√°dn√° lekce v datab√°zi!")
            return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)
        
        # Vytvo≈ôen√≠ nov√©ho pokusu
        attempt = Attempt(
            user_id=user.id,
            lesson_id=lesson.id,
            next_due=datetime.now()
        )
        session.add(attempt)
        session.commit()
        
        # Vol√°n√≠ p≈ôes Twilio
        from app.services.twilio_service import TwilioService
        twilio = TwilioService()
        base_url = os.getenv("WEBHOOK_BASE_URL", "https://lecture-app-production.up.railway.app")
        webhook_url = f"{base_url.rstrip('/')}/voice/?attempt_id={attempt.id}"
        
        logger.info(f"Vol√°m u≈æivatele {user.phone} s lekc√≠ {lesson.id} (ƒç√≠slo {lesson_number}): {webhook_url}")
        twilio.call(user.phone, webhook_url)
        
    except Exception as e:
        logger.error(f"‚ùå KRITICK√Å CHYBA p≈ôi vol√°n√≠ s lekc√≠: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        # Fallback na p≈Øvodn√≠ funkci
        return admin_call_user(user_id)
    finally:
        session.close()
    
    return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)

@admin_router.post("/users/{user_id}/advance", name="admin_advance_user")
def admin_advance_user(user_id: int = Path(...)):
    """Manu√°lnƒõ posune u≈æivatele do dal≈°√≠ lekce"""
    session = SessionLocal()
    try:
        user = session.query(User).get(user_id)
        if not user:
            return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)
        
        # Bezpeƒçn√° kontrola current_lesson_level
        if not hasattr(user, 'current_lesson_level') or user.current_lesson_level is None:
            user.current_lesson_level = 0
        
        if user.current_lesson_level < 10:
            user.current_lesson_level += 1
            
            # Bezpeƒçn√© vytvo≈ôen√≠ progress z√°znamu
            try:
                from app.models import UserProgress
                progress = UserProgress(
                    user_id=user.id,
                    lesson_number=user.current_lesson_level - 1,  # P≈ôedchoz√≠ lekce je dokonƒçena
                    is_completed=True,
                    best_score=95.0,  # Manu√°ln√≠ postup = vysok√© sk√≥re
                    attempts_count=1,
                    first_completed_at=datetime.now()
                )
                session.add(progress)
            except Exception as progress_error:
                logger.warning(f"Chyba p≈ôi vytv√°≈ôen√≠ progress z√°znamu: {progress_error}")
                # Pokraƒçuj bez progress z√°znamu
            
            session.commit()
            logger.info(f"U≈æivatel {user.name} manu√°lnƒõ posunut na lekci {user.current_lesson_level}")
        
    except Exception as e:
        logger.error(f"‚ùå Chyba p≈ôi posunu u≈æivatele: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        session.rollback()
    finally:
        session.close()
    
    return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)

@admin_router.post("/users/{user_id}/reset-test", name="admin_reset_test")
def admin_reset_test(user_id: int = Path(...)):
    """Resetuje test session pro u≈æivatele"""
    session = SessionLocal()
    try:
        # Oznaƒç v≈°echny aktivn√≠ test sessions jako dokonƒçen√©
        active_sessions = session.query(TestSession).filter(
            TestSession.user_id == user_id,
            TestSession.is_completed == False
        ).all()
        
        for test_session in active_sessions:
            test_session.is_completed = True
            test_session.completed_at = datetime.utcnow()
        
        session.commit()
        logger.info(f"üîÑ Admin resetoval test sessions pro u≈æivatele {user_id}")
        return RedirectResponse(url="/admin/users", status_code=302)
    finally:
        session.close()

@admin_router.get("/create-lesson-0", name="admin_create_lesson_0")
def admin_create_lesson_0(request: Request):
    """Endpoint pro vytvo≈ôen√≠ Lekce 0 s 30 z√°kladn√≠mi ot√°zkami"""
    try:
        logger.info("üöÄ Vytv√°≈ôen√≠ Lekce 0...")
        
        # 30 z√°kladn√≠ch ot√°zek z obr√°bƒõc√≠ch kapalin a servisu
        questions = [
            {
                "number": 1,
                "question": "K ƒçemu slou≈æ√≠ obr√°bƒõc√≠ kapaliny p≈ôi obr√°bƒõn√≠ kov≈Ø?",
                "correct_answer": "K chlazen√≠, maz√°n√≠ a odvodu t≈ô√≠sek",
                "keywords": ["chlazen√≠", "maz√°n√≠", "t≈ô√≠sky", "odvod"],
                "enabled": True
            },
            {
                "number": 2,
                "question": "Jak√© jsou hlavn√≠ typy obr√°bƒõc√≠ch kapalin?",
                "correct_answer": "Vodn√≠ roztoky, oleje a emulze",
                "keywords": ["vodn√≠", "oleje", "emulze", "typy"],
                "enabled": True
            },
            {
                "number": 3,
                "question": "Proƒç je d≈Øle≈æit√© pravidelnƒõ kontrolovat koncentraci emulze?",
                "correct_answer": "Pro zaji≈°tƒõn√≠ spr√°vn√© funkce a p≈ôedch√°zen√≠ bakteri√°ln√≠mu r≈Østu",
                "keywords": ["koncentrace", "funkce", "bakterie", "kontrola"],
                "enabled": True
            },
            {
                "number": 4,
                "question": "Jak se mƒõ≈ô√≠ koncentrac√≠ obr√°bƒõc√≠ emulze?",
                "correct_answer": "Refraktometrem nebo titrac√≠",
                "keywords": ["refraktometr", "titrace"],
                "enabled": True
            },
            {
                "number": 5,
                "question": "Jak√° je optim√°ln√≠ koncentrace pro vƒõt≈°inu obr√°bƒõc√≠ch emulz√≠?",
                "correct_answer": "3-8 procent",
                "keywords": ["3", "8", "procent", "koncentrace"],
                "enabled": True
            },
            {
                "number": 6,
                "question": "Co zp≈Øsobuje pƒõnƒõn√≠ obr√°bƒõc√≠ch kapalin?",
                "correct_answer": "Vysok√° rychlost obƒõhu, kontaminace nebo ≈°patn√° koncentrace",
                "keywords": ["pƒõnƒõn√≠", "rychlost", "kontaminace", "koncentrace"],
                "enabled": True
            },
            {
                "number": 7,
                "question": "Jak ƒçasto se m√° mƒõnit obr√°bƒõc√≠ kapalina?",
                "correct_answer": "Podle stavu kapaliny, obvykle ka≈æd√© 2-6 mƒõs√≠c≈Ø",
                "keywords": ["mƒõnit", "stav", "mƒõs√≠c", "pravidelnƒõ"],
                "enabled": True
            },
            {
                "number": 8,
                "question": "Jak√© jsou p≈ô√≠znaky zka≈æen√© obr√°bƒõc√≠ kapaliny?",
                "correct_answer": "Z√°pach, zmƒõna barvy, pƒõnƒõn√≠ nebo r≈Øst bakteri√≠",
                "keywords": ["z√°pach", "barva", "pƒõnƒõn√≠", "bakterie"],
                "enabled": True
            },
            {
                "number": 9,
                "question": "Co je to pH obr√°bƒõc√≠ kapaliny a jak√° m√° b√Ωt hodnota?",
                "correct_answer": "M√≠ra kyselosti, optim√°lnƒõ 8,5-9,5",
                "keywords": ["pH", "kyselost", "8,5", "9,5"],
                "enabled": True
            },
            {
                "number": 10,
                "question": "Proƒç je d≈Øle≈æit√© udr≈æovat spr√°vn√© pH?",
                "correct_answer": "Zabra≈àuje korozi a r≈Østu bakteri√≠",
                "keywords": ["koroze", "bakterie", "ochrana"],
                "enabled": True
            },
            {
                "number": 11,
                "question": "Jak se p≈ôipravuje emulze z koncentr√°tu?",
                "correct_answer": "Koncentr√°t se p≈ôid√°v√° do vody, nikdy naopak",
                "keywords": ["koncentr√°t", "voda", "p≈ô√≠prava", "po≈ôad√≠"],
                "enabled": True
            },
            {
                "number": 12,
                "question": "Jak√° je funkce biocid≈Ø v obr√°bƒõc√≠ch kapalin√°ch?",
                "correct_answer": "Zab√≠jej√≠ bakterie a houby",
                "keywords": ["biocidy", "bakterie", "houby", "dezinfekce"],
                "enabled": True
            },
            {
                "number": 13,
                "question": "Co zp≈Øsobuje korozi na obr√°bƒõc√≠ch stroj√≠ch?",
                "correct_answer": "N√≠zk√© pH, kontaminace nebo star√° kapalina",
                "keywords": ["koroze", "pH", "kontaminace", "star√°"],
                "enabled": True
            },
            {
                "number": 14,
                "question": "Jak se testuje kvalita obr√°bƒõc√≠ kapaliny?",
                "correct_answer": "Mƒõ≈ôen√≠ pH, koncentrace, ƒçistoty a mikrobiologie",
                "keywords": ["pH", "koncentrace", "ƒçistota", "mikrobiologie"],
                "enabled": True
            },
            {
                "number": 15,
                "question": "Jak√© jsou bezpeƒçnostn√≠ opat≈ôen√≠ p≈ôi pr√°ci s obr√°bƒõc√≠mi kapalinami?",
                "correct_answer": "Ochrann√© rukavice, br√Ωle a vƒõtr√°n√≠",
                "keywords": ["rukavice", "br√Ωle", "vƒõtr√°n√≠", "ochrana"],
                "enabled": True
            },
            {
                "number": 16,
                "question": "Co je filtrace obr√°bƒõc√≠ch kapalin?",
                "correct_answer": "Odstranƒõn√≠ neƒçistot a ƒç√°stic z kapaliny",
                "keywords": ["filtrace", "neƒçistoty", "ƒç√°stice", "ƒçi≈°tƒõn√≠"],
                "enabled": True
            },
            {
                "number": 17,
                "question": "Proƒç se obr√°bƒõc√≠ kapaliny recykluj√≠?",
                "correct_answer": "Kv≈Øli √∫spo≈ôe n√°klad≈Ø a ochranƒõ ≈æivotn√≠ho prost≈ôed√≠",
                "keywords": ["recyklace", "√∫spora", "prost≈ôed√≠", "n√°klady"],
                "enabled": True
            },
            {
                "number": 18,
                "question": "Jak√° je role aditiv v obr√°bƒõc√≠ch kapalin√°ch?",
                "correct_answer": "Zlep≈°uj√≠ vlastnosti jako maz√°n√≠, ochranu p≈ôed koroz√≠",
                "keywords": ["aditiva", "maz√°n√≠", "koroze", "vlastnosti"],
                "enabled": True
            },
            {
                "number": 19,
                "question": "Co je to EP p≈ô√≠sada?",
                "correct_answer": "Extreme Pressure - p≈ô√≠sada pro vysok√© tlaky",
                "keywords": ["EP", "extreme", "pressure", "tlak"],
                "enabled": True
            },
            {
                "number": 20,
                "question": "Jak se likviduj√≠ pou≈æit√© obr√°bƒõc√≠ kapaliny?",
                "correct_answer": "Jako nebezpeƒçn√Ω odpad ve specializovan√Ωch firm√°ch",
                "keywords": ["likvidace", "nebezpeƒçn√Ω", "odpad", "specializovan√©"],
                "enabled": True
            },
            {
                "number": 21,
                "question": "Co zp≈Øsobuje bakteri√°ln√≠ r≈Øst v obr√°bƒõc√≠ch kapalin√°ch?",
                "correct_answer": "Vysok√° teplota, n√≠zk√© pH nebo kontaminace",
                "keywords": ["bakterie", "teplota", "pH", "kontaminace"],
                "enabled": True
            },
            {
                "number": 22,
                "question": "Jak√© jsou v√Ωhody syntetick√Ωch obr√°bƒõc√≠ch kapalin?",
                "correct_answer": "Del≈°√≠ ≈æivotnost, lep≈°√≠ ƒçistota a stabilita",
                "keywords": ["syntetick√©", "≈æivotnost", "ƒçistota", "stabilita"],
                "enabled": True
            },
            {
                "number": 23,
                "question": "Co je to mazac√≠ film?",
                "correct_answer": "Tenk√° vrstva kapaliny mezi n√°strojem a obrobkem",
                "keywords": ["mazac√≠", "film", "vrstva", "n√°stroj"],
                "enabled": True
            },
            {
                "number": 24,
                "question": "Proƒç je d≈Øle≈æit√© chlazen√≠ p≈ôi obr√°bƒõn√≠?",
                "correct_answer": "Zabra≈àuje p≈ôeh≈ô√°t√≠ n√°stroje a obrobku",
                "keywords": ["chlazen√≠", "p≈ôeh≈ô√°t√≠", "n√°stroj", "obrobek"],
                "enabled": True
            },
            {
                "number": 25,
                "question": "Co je to tramp oil?",
                "correct_answer": "Ciz√≠ olej kontaminuj√≠c√≠ obr√°bƒõc√≠ kapalinu",
                "keywords": ["tramp", "oil", "ciz√≠", "kontaminace"],
                "enabled": True
            },
            {
                "number": 26,
                "question": "Jak se odstra≈àuje tramp oil?",
                "correct_answer": "Skimmerem nebo separ√°torem oleje",
                "keywords": ["skimmer", "separ√°tor", "odstranƒõn√≠"],
                "enabled": True
            },
            {
                "number": 27,
                "question": "Jak√° je optim√°ln√≠ teplota obr√°bƒõc√≠ch kapalin?",
                "correct_answer": "20-35 stup≈à≈Ø Celsia",
                "keywords": ["teplota", "20", "35", "Celsius"],
                "enabled": True
            },
            {
                "number": 28,
                "question": "Co je to centr√°ln√≠ syst√©m obr√°bƒõc√≠ch kapalin?",
                "correct_answer": "Syst√©m z√°sobuj√≠c√≠ v√≠ce stroj≈Ø z jednoho zdroje",
                "keywords": ["centr√°ln√≠", "syst√©m", "v√≠ce", "stroj≈Ø"],
                "enabled": True
            },
            {
                "number": 29,
                "question": "Proƒç se kontroluje tvrdost vody pro p≈ô√≠pravu emulz√≠?",
                "correct_answer": "Tvrd√° voda m≈Ø≈æe zp≈Øsobit nestabilitu emulze",
                "keywords": ["tvrdost", "voda", "nestabilita", "emulze"],
                "enabled": True
            },
            {
                "number": 30,
                "question": "Co jsou to MWF (Metalworking Fluids)?",
                "correct_answer": "Obecn√Ω n√°zev pro v≈°echny obr√°bƒõc√≠ kapaliny",
                "keywords": ["MWF", "metalworking", "fluids", "obecn√Ω"],
                "enabled": True
            }
        ]
        
        session = SessionLocal()
        
        # Zkontroluj, jestli u≈æ Lekce 0 neexistuje
        existing_lesson = session.query(Lesson).filter(Lesson.title.contains("Lekce 0")).first()
        if existing_lesson:
            session.close()
            return templates.TemplateResponse("message.html", {
                "request": request,
                "message": f"‚úÖ Lekce 0 ji≈æ existuje! (ID: {existing_lesson.id})",
                "back_url": "/admin/lessons",
                "back_text": "Zpƒõt na lekce"
            })
        
        # Vytvo≈ô novou lekci
        lesson = Lesson(
            title="Lekce 0: Vstupn√≠ test - Obr√°bƒõc√≠ kapaliny a servis",
            description="Z√°kladn√≠ test znalost√≠ z oboru obr√°bƒõc√≠ch kapalin a jejich servisu. Nutn√© dos√°hnout 90% √∫spƒõ≈°nosti pro postup do Lekce 1.",
            language="cs",
            script="",  # Pr√°zdn√Ω script pro vstupn√≠ test
            questions=questions,
            level="entry_test"
        )
        
        session.add(lesson)
        session.commit()
        
        lesson_id = lesson.id
        session.close()
        
        logger.info(f"‚úÖ Lekce 0 vytvo≈ôena s ID: {lesson_id}")
        
        return templates.TemplateResponse("message.html", {
            "request": request,
            "message": f"üéâ Lekce 0 √∫spƒõ≈°nƒõ vytvo≈ôena!\n\nüìù ID: {lesson_id}\nüìö 30 ot√°zek z obr√°bƒõc√≠ch kapalin\nüéØ √örove≈à: Vstupn√≠ test",
            "back_url": "/admin/lessons",
            "back_text": "Zobrazit v≈°echny lekce"
        })
        
    except Exception as e:
        logger.error(f"‚ùå Chyba p≈ôi vytv√°≈ôen√≠ Lekce 0: {e}")
        return templates.TemplateResponse("message.html", {
            "request": request,
            "message": f"‚ùå Chyba p≈ôi vytv√°≈ôen√≠ Lekce 0: {str(e)}",
            "back_url": "/admin/lessons",
            "back_text": "Zpƒõt na lekce"
        })

@admin_router.get("/lessons", response_class=HTMLResponse, name="admin_list_lessons")
def admin_list_lessons(request: Request):
    session = SessionLocal()
    try:
        lessons = session.query(Lesson).order_by(Lesson.id.desc()).all()
        
        # O≈°et≈ôen√≠ chybƒõj√≠c√≠ch sloupc≈Ø pro ka≈ædou lekci v Pythonu, pokud by chybƒõly
        for lesson in lessons:
            if not hasattr(lesson, 'lesson_number'):
                lesson.lesson_number = 0
            if not hasattr(lesson, 'lesson_type'):
                lesson.lesson_type = 'standard'
            if not hasattr(lesson, 'required_score'):
                lesson.required_score = 90.0
            if not hasattr(lesson, 'description'):
                lesson.description = ''
                
        logger.info(f"‚úÖ Naƒçteno {len(lessons)} lekc√≠.")
        
        return templates.TemplateResponse("admin/lessons_list.html", {"request": request, "lessons": lessons})
        
    except Exception as e:
        logger.error(f"‚ùå KRITICK√Å CHYBA p≈ôi naƒç√≠t√°n√≠ lekc√≠: {e}")
        session.rollback()  # D≈Øle≈æit√Ω rollback pro vyƒçi≈°tƒõn√≠ session
        
        return templates.TemplateResponse("message.html", {
            "request": request,
            "message": f"‚ùå Datab√°zov√° chyba p≈ôi naƒç√≠t√°n√≠ lekc√≠.\n\nChyba: {str(e)}\n\nZkuste obnovit str√°nku za chv√≠li.",
            "back_url": "/admin/dashboard",
            "back_text": "Zpƒõt na dashboard"
        })
    finally:
        session.close()

@admin_router.get("/lessons/new", response_class=HTMLResponse, name="admin_new_lesson_get")
def admin_new_lesson_get(request: Request):
    form = {
        "title": "", "language": "cs", "script": "", "questions": "",
        "description": "", "lesson_number": "0", "lesson_type": "standard", "required_score": "90.0",
        "title.errors": [], "language.errors": [], "script.errors": [], "questions.errors": [],
        "description.errors": [], "lesson_number.errors": [], "lesson_type.errors": [], "required_score.errors": []
    }
    return templates.TemplateResponse("admin/lesson_form.html", {"request": request, "lesson": None, "form": form})

@admin_router.post("/lessons/new", response_class=HTMLResponse)
async def admin_new_lesson_post(request: Request):
    try:
        form_data = await request.form()
        
        title = form_data.get("title", "")
        language = form_data.get("language", "cs")
        script = form_data.get("script", "")
        questions = form_data.get("questions", "")
        description = form_data.get("description", "")
        lesson_number = form_data.get("lesson_number", "0")
        lesson_type = form_data.get("lesson_type", "standard")
        required_score = form_data.get("required_score", "90.0")
        
        errors = {"title": [], "language": [], "script": [], "questions": [], "lesson_number": [], "lesson_type": [], "required_score": [], "description": []}
        
        # Validace
        if not title:
            errors["title"].append("N√°zev je povinn√Ω.")
        if language not in ["cs", "en"]:
            errors["language"].append("Neplatn√Ω jazyk.")
        if not script:
            errors["script"].append("Skript je povinn√Ω.")
        
        # Validace lesson_number
        try:
            lesson_number_int = int(lesson_number)
            if lesson_number_int < 0 or lesson_number_int > 100:
                errors["lesson_number"].append("ƒå√≠slo lekce mus√≠ b√Ωt mezi 0-100.")
        except ValueError:
            errors["lesson_number"].append("ƒå√≠slo lekce mus√≠ b√Ωt ƒç√≠slo.")
            lesson_number_int = 0
        
        # Validace required_score
        try:
            required_score_float = float(required_score)
            if required_score_float < 0 or required_score_float > 100:
                errors["required_score"].append("Sk√≥re mus√≠ b√Ωt mezi 0-100%.")
        except ValueError:
            errors["required_score"].append("Sk√≥re mus√≠ b√Ωt ƒç√≠slo.")
            required_score_float = 90.0
        
        if lesson_type not in ["entry_test", "standard", "advanced"]:
            errors["lesson_type"].append("Neplatn√Ω typ lekce.")
        
        if any(errors.values()):
            form = {
                "title": title, "language": language, "script": script, "questions": questions,
                "description": description, "lesson_number": lesson_number, "lesson_type": lesson_type, 
                "required_score": required_score,
                "title.errors": errors["title"], "language.errors": errors["language"], 
                "script.errors": errors["script"], "questions.errors": errors["questions"],
                "description.errors": errors["description"], "lesson_number.errors": errors["lesson_number"],
                "lesson_type.errors": errors["lesson_type"], "required_score.errors": errors["required_score"]
            }
            return templates.TemplateResponse("admin/lesson_form.html", {"request": request, "lesson": None, "form": form})
    
        # Vytvo≈ôen√≠ lekce
        lesson = Lesson(
            title=title,
            language=language,
            script=script,
            questions=questions,
            description=description,
            lesson_number=lesson_number_int,
            lesson_type=lesson_type,
            required_score=required_score_float
        )
        
        session = SessionLocal()
        session.add(lesson)
        try:
            session.commit()
            logger.info(f"‚úÖ Nov√° lekce vytvo≈ôena: {title} (ƒç√≠slo={lesson_number_int}, typ={lesson_type})")
        except Exception as e:
            session.rollback()
            form = {
                "title": title, "language": language, "script": script, "questions": questions,
                "description": description, "lesson_number": lesson_number, "lesson_type": lesson_type,
                "required_score": required_score, "title.errors": [str(e)], "language.errors": [], 
                "script.errors": [], "questions.errors": [], "description.errors": [], 
                "lesson_number.errors": [], "lesson_type.errors": [], "required_score.errors": []
            }
            session.close()
            return templates.TemplateResponse("admin/lesson_form.html", {"request": request, "lesson": None, "form": form})
        session.close()
        return RedirectResponse(url="/admin/lessons", status_code=status.HTTP_302_FOUND)
        
    except Exception as e:
        logger.error(f"‚ùå Chyba p≈ôi vytv√°≈ôen√≠ lekce: {e}")
        form = {
            "title": "", "language": "cs", "script": "", "questions": "",
            "description": "", "lesson_number": "0", "lesson_type": "standard", "required_score": "90.0",
            "title.errors": [f"Chyba: {str(e)}"], "language.errors": [], "script.errors": [], "questions.errors": [],
            "description.errors": [], "lesson_number.errors": [], "lesson_type.errors": [], "required_score.errors": []
        }
        return templates.TemplateResponse("admin/lesson_form.html", {"request": request, "lesson": None, "form": form})

@admin_router.get("/lessons/{id}/edit", response_class=HTMLResponse, name="admin_edit_lesson_get")
def admin_edit_lesson_get(request: Request, id: int = Path(...)):
    session = SessionLocal()
    lesson = session.query(Lesson).get(id)
    if not lesson:
        session.close()
        return RedirectResponse(url="/admin/lessons", status_code=status.HTTP_302_FOUND)
    
    # Pro Lekci 0 a nov√© lekce s ot√°zkami pou≈æij novou template
    if lesson.title.startswith("Lekce 0") or (lesson.questions and isinstance(lesson.questions, list) and len(lesson.questions) > 0 and isinstance(lesson.questions[0], dict)):
        session.close()
        return templates.TemplateResponse("admin/lesson_edit.html", {"request": request, "lesson": lesson})
    
    # Pro star√© lekce pou≈æij p≈Øvodn√≠ template s nov√Ωmi poli
    form = {
        "title": lesson.title, 
        "language": lesson.language, 
        "script": lesson.script, 
        "questions": lesson.questions,
        "description": getattr(lesson, 'description', ''),
        "lesson_number": getattr(lesson, 'lesson_number', 0),
        "lesson_type": getattr(lesson, 'lesson_type', 'standard'),
        "required_score": getattr(lesson, 'required_score', 90.0),
        "title.errors": [], "language.errors": [], "script.errors": [], "questions.errors": [],
        "description.errors": [], "lesson_number.errors": [], "lesson_type.errors": [], "required_score.errors": []
    }
    session.close()
    return templates.TemplateResponse("admin/lesson_form.html", {"request": request, "lesson": lesson, "form": form})

@admin_router.post("/lessons/{id}/edit", response_class=HTMLResponse)
async def admin_edit_lesson_post(request: Request, id: int = Path(...)):
    session = SessionLocal()
    lesson = session.query(Lesson).get(id)
    if not lesson:
        session.close()
        return RedirectResponse(url="/admin/lessons", status_code=status.HTTP_302_FOUND)
    
    try:
        form_data = await request.form()
        
        # Pro Lekci 0 a nov√© lekce s ot√°zkami
        if lesson.title.startswith("Lekce 0") or (lesson.questions and isinstance(lesson.questions, list) and len(lesson.questions) > 0 and isinstance(lesson.questions[0], dict)):
            title = form_data.get("title", "")
            description = form_data.get("description", "")
            level = form_data.get("level", "beginner")
            enabled_questions = form_data.getlist("enabled_questions")
            
            logger.info(f"üîç DEBUG: P≈ôijato {len(enabled_questions)} aktivn√≠ch ot√°zek: {enabled_questions}")
            
            if not title:
                session.close()
                return templates.TemplateResponse("admin/lesson_edit.html", {
                    "request": request, 
                    "lesson": lesson, 
                    "error": "N√°zev je povinn√Ω."
                })
            
            # Aktualizuj z√°kladn√≠ info
            lesson.title = title
            lesson.description = description
            lesson.level = level
            
            # Aktualizuj enabled stav ot√°zek
            if lesson.questions and isinstance(lesson.questions, list):
                logger.info(f"üîç DEBUG: Aktualizuji {len(lesson.questions)} ot√°zek")
                for i, question in enumerate(lesson.questions):
                    if isinstance(question, dict):
                        old_enabled = question.get('enabled', True)
                        new_enabled = str(i) in enabled_questions
                        question['enabled'] = new_enabled
                        logger.info(f"üîç DEBUG: Ot√°zka {i}: {old_enabled} ‚Üí {new_enabled}")
                
                # KRITICK√â: Ozn√°m SQLAlchemy, ≈æe se JSON sloupec zmƒõnil
                from sqlalchemy.orm.attributes import flag_modified
                flag_modified(lesson, 'questions')
                logger.info("üîç DEBUG: flag_modified() zavol√°n pro questions sloupec")
            
            session.commit()
            logger.info(f"‚úÖ Lekce {lesson.id} aktualizov√°na: {len(enabled_questions)} aktivn√≠ch ot√°zek")
            session.close()
            return RedirectResponse(url="/admin/lessons", status_code=status.HTTP_302_FOUND)
        
        # Pro star√© lekce - roz≈°√≠≈ôen√° logika s nov√Ωmi poli
        title = form_data.get("title", "")
        language = form_data.get("language", "cs")
        script = form_data.get("script", "")
        questions = form_data.get("questions", "")
        description = form_data.get("description", "")
        
        # Nov√° pole
        lesson_number = form_data.get("lesson_number", "0")
        lesson_type = form_data.get("lesson_type", "standard")
        required_score = form_data.get("required_score", "90.0")
        
        errors = {"title": [], "language": [], "script": [], "questions": [], "lesson_number": [], "lesson_type": [], "required_score": [], "description": []}
        
        # Validace
        if not title:
            errors["title"].append("N√°zev je povinn√Ω.")
        if language not in ["cs", "en"]:
            errors["language"].append("Neplatn√Ω jazyk.")
        if not script:
            errors["script"].append("Skript je povinn√Ω.")
        
        # Validace lesson_number
        try:
            lesson_number_int = int(lesson_number)
            if lesson_number_int < 0 or lesson_number_int > 100:
                errors["lesson_number"].append("ƒå√≠slo lekce mus√≠ b√Ωt mezi 0-100.")
        except ValueError:
            errors["lesson_number"].append("ƒå√≠slo lekce mus√≠ b√Ωt ƒç√≠slo.")
            lesson_number_int = 0
        
        # Validace required_score
        try:
            required_score_float = float(required_score)
            if required_score_float < 0 or required_score_float > 100:
                errors["required_score"].append("Sk√≥re mus√≠ b√Ωt mezi 0-100%.")
        except ValueError:
            errors["required_score"].append("Sk√≥re mus√≠ b√Ωt ƒç√≠slo.")
            required_score_float = 90.0
        
        if lesson_type not in ["entry_test", "standard", "advanced"]:
            errors["lesson_type"].append("Neplatn√Ω typ lekce.")
        
        if any(errors.values()):
            form = {
                "title": title, "language": language, "script": script, "questions": questions,
                "description": description, "lesson_number": lesson_number, "lesson_type": lesson_type, 
                "required_score": required_score,
                "title.errors": errors["title"], "language.errors": errors["language"], 
                "script.errors": errors["script"], "questions.errors": errors["questions"],
                "description.errors": errors["description"], "lesson_number.errors": errors["lesson_number"],
                "lesson_type.errors": errors["lesson_type"], "required_score.errors": errors["required_score"]
            }
            session.close()
            return templates.TemplateResponse("admin/lesson_form.html", {"request": request, "lesson": lesson, "form": form})
        
        # Aktualizace lekce
        lesson.title = title
        lesson.language = language
        lesson.script = script
        lesson.questions = questions
        lesson.description = description
        lesson.lesson_number = lesson_number_int
        lesson.lesson_type = lesson_type
        lesson.required_score = required_score_float
        
        session.commit()
        logger.info(f"‚úÖ Lekce {lesson.id} aktualizov√°na: ƒç√≠slo={lesson_number_int}, typ={lesson_type}")
        
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå Chyba p≈ôi editaci lekce {id}: {e}")
        session.close()
        return templates.TemplateResponse("admin/lesson_edit.html", {
            "request": request, 
            "lesson": lesson, 
            "error": f"Chyba p≈ôi ukl√°d√°n√≠: {str(e)}"
        })
    session.close()
    return RedirectResponse(url="/admin/lessons", status_code=status.HTTP_302_FOUND)

@admin_router.post("/lessons/{lesson_id}/delete", name="admin_delete_lesson")
def admin_delete_lesson(lesson_id: int = Path(...)):
    session = SessionLocal()
    lesson = session.query(Lesson).get(lesson_id)
    if lesson:
        try:
            session.delete(lesson)
            session.commit()
        except Exception as e:
            session.rollback()
        finally:
            session.close()
    else:
        session.close()
    return RedirectResponse(url="/admin/lessons", status_code=status.HTTP_302_FOUND)

@admin_router.post("/lessons/generate-questions", response_class=JSONResponse)
async def admin_generate_questions(request: Request):
    import json
    data = None
    try:
        data = await request.json()
    except Exception:
        return JSONResponse({"error": "Neplatn√Ω JSON"}, status_code=400)
    script = data.get("script")
    language = data.get("language", "cs")
    if not script:
        return JSONResponse({"error": "Chyb√≠ text skriptu"}, status_code=400)
    try:
        from app.services.openai_service import OpenAIService
        openai = OpenAIService()
        questions = openai.generate_questions(script, language)
        if not questions:
            return JSONResponse({"error": "Nepoda≈ôilo se vygenerovat ot√°zky. Zkontrolujte OpenAI API kl√≠ƒç."}, status_code=500)
        return JSONResponse({"questions": questions})
    except Exception as e:
        # Simulace pro v√Ωvoj bez OpenAI
        print(f"Chyba p≈ôi generov√°n√≠ ot√°zek: {e}")
        return JSONResponse({"questions": [{"question": "Uk√°zkov√° ot√°zka?", "answer": "Uk√°zkov√° odpovƒõƒè"}]})

@admin_router.get("/network-test", response_class=JSONResponse)
def admin_network_test():
    results = {}
    # Test DNS
    try:
        socket.gethostbyname('api.twilio.com')
        results['dns_twilio'] = 'OK'
    except Exception as e:
        results['dns_twilio'] = f'CHYBA: {str(e)}'
    try:
        socket.gethostbyname('api.openai.com')
        results['dns_openai'] = 'OK'
    except Exception as e:
        results['dns_openai'] = f'CHYBA: {str(e)}'
    # Test HTTP
    try:
        response = requests.get('https://httpbin.org/ip', timeout=10)
        results['http_test'] = f"OK - IP: {response.json().get('origin', 'unknown')}"
    except Exception as e:
        results['http_test'] = f'CHYBA: {str(e)}'
    return results

@admin_router.get("/db-test", response_class=JSONResponse)
def admin_db_test():
    session = SessionLocal()
    results = {}
    try:
        session.execute(text('SELECT 1'))
        results['db_connection'] = 'OK'
    except Exception as e:
        results['db_connection'] = f'CHYBA: {str(e)}'
    try:
        user_count = User.query.count()
        results['user_table'] = f'OK - {user_count} u≈æivatel≈Ø'
    except Exception as e:
        results['user_table'] = f'CHYBA: {str(e)}'
    try:
        lesson_count = Lesson.query.count()
        results['lesson_table'] = f'OK - {lesson_count} lekc√≠'
    except Exception as e:
        results['lesson_table'] = f'CHYBA: {str(e)}'
    session.close()
    return results

@admin_router.get("/init-db", response_class=JSONResponse)
def admin_init_db():
    session = SessionLocal()
    results = {}
    try:
        session.create_all()
        results['create_tables'] = 'OK'
    except Exception as e:
        results['create_tables'] = f'CHYBA: {str(e)}'
    try:
        user_count = User.query.count()
        lesson_count = Lesson.query.count()
        results['tables_check'] = f'OK - {user_count} u≈æivatel≈Ø, {lesson_count} lekc√≠'
    except Exception as e:
        results['tables_check'] = f'CHYBA: {str(e)}'
    session.close()
    return results

@admin_router.get("/debug/openai", response_class=JSONResponse)
def admin_debug_openai():
    try:
        from app.services.openai_service import OpenAIService
        api_key = os.getenv('OPENAI_API_KEY')
        api_key_exists = bool(api_key)
        api_key_length = len(api_key) if api_key else 0
        api_key_start = api_key[:7] + "..." if api_key and len(api_key) > 7 else "N/A"
        openai = OpenAIService()
        openai_enabled = getattr(openai, 'enabled', False)
        openai_client_exists = bool(getattr(openai, 'client', None))
        debug_info = {
            "environment_variables": {
                "OPENAI_API_KEY_exists": api_key_exists,
                "OPENAI_API_KEY_length": api_key_length,
                "OPENAI_API_KEY_start": api_key_start
            },
            "openai_service": {
                "service_exists": bool(openai),
                "enabled": openai_enabled,
                "client_exists": openai_client_exists
            },
            "timestamp": datetime.now().isoformat()
        }
        return debug_info
    except Exception as e:
        return {"error": str(e)}

@admin_router.get("/debug/database", response_class=JSONResponse)
def admin_debug_database():
    session = SessionLocal()
    database_url = os.getenv('DATABASE_URL')
    database_url_exists = bool(database_url)
    database_url_start = database_url[:20] + "..." if database_url and len(database_url) > 20 else "N/A"
    app_database_uri = session.engine.url if hasattr(session, 'engine') else 'N/A'
    app_database_uri_start = str(app_database_uri)[:20] + "..." if app_database_uri and len(str(app_database_uri)) > 20 else "N/A"
    try:
        session.execute(text('SELECT 1'))
        database_connection = "OK"
    except Exception as db_error:
        database_connection = f"ERROR: {str(db_error)}"
    session.close()
    debug_info = {
        "environment_variables": {
            "DATABASE_URL_exists": database_url_exists,
            "DATABASE_URL_start": database_url_start,
            "DATABASE_URL_full": database_url if database_url else "N/A"
        },
        "app_configuration": {
            "SQLALCHEMY_DATABASE_URI_start": app_database_uri_start,
            "SQLALCHEMY_DATABASE_URI_full": str(app_database_uri)
        },
        "database_connection": database_connection,
        "timestamp": datetime.now().isoformat()
    }
    return debug_info

@admin_router.get("/debug/env", response_class=JSONResponse)
def admin_debug_env():
    env_vars = [
        'DATABASE_URL',
        'OPENAI_API_KEY',
        'TWILIO_ACCOUNT_SID',
        'TWILIO_AUTH_TOKEN',
        'TWILIO_PHONE_NUMBER',
        'WEBHOOK_BASE_URL',
        'SECRET_KEY',
        'PORT',
        'FLASK_ENV',
        'FLASK_DEBUG'
    ]
    env_info = {}
    for var in env_vars:
        value = os.getenv(var)
        if value:
            if 'KEY' in var or 'TOKEN' in var or 'SID' in var:
                env_info[var] = f"{value[:10]}..." if len(value) > 10 else "***"
            elif 'URL' in var:
                env_info[var] = value
            else:
                env_info[var] = value
        else:
            env_info[var] = "NENASTAVENO"
    debug_info = {
        "environment_variables": env_info,
        "timestamp": datetime.now().isoformat()
    }
    return debug_info

@admin_router.get("/migrate-db", response_class=JSONResponse)
def admin_migrate_db():
    """Provede datab√°zov√© migrace pro nov√© funkce"""
    session = SessionLocal()
    results = {"migrations": []}
    
    try:
        # 1. P≈ôidej current_lesson_level do users
        try:
            session.execute(text("SELECT current_lesson_level FROM users LIMIT 1"))
            results["migrations"].append("current_lesson_level: ji≈æ existuje")
        except Exception:
            try:
                session.execute(text("ALTER TABLE users ADD COLUMN current_lesson_level INTEGER DEFAULT 0"))
                session.commit()
                results["migrations"].append("current_lesson_level: ‚úÖ p≈ôid√°n")
            except Exception as e:
                results["migrations"].append(f"current_lesson_level: ‚ùå {str(e)}")
                session.rollback()
        
        # 2. P≈ôidej lesson_number do lessons
        try:
            session.execute(text("SELECT lesson_number FROM lessons LIMIT 1"))
            results["migrations"].append("lesson_number: ji≈æ existuje")
        except Exception:
            try:
                session.execute(text("ALTER TABLE lessons ADD COLUMN lesson_number INTEGER DEFAULT 0"))
                session.execute(text("ALTER TABLE lessons ADD COLUMN required_score FLOAT DEFAULT 90.0"))
                session.execute(text("ALTER TABLE lessons ADD COLUMN lesson_type VARCHAR(20) DEFAULT 'standard'"))
                session.execute(text("ALTER TABLE lessons ADD COLUMN description TEXT"))
                session.commit()
                results["migrations"].append("lesson columns: ‚úÖ p≈ôid√°ny")
            except Exception as e:
                results["migrations"].append(f"lesson columns: ‚ùå {str(e)}")
                session.rollback()
        
        # 3. Vytvo≈ô user_progress tabulku
        try:
            session.execute(text("SELECT id FROM user_progress LIMIT 1"))
            results["migrations"].append("user_progress: ji≈æ existuje")
        except Exception:
            try:
                create_progress_table = """
                CREATE TABLE user_progress (
                    id SERIAL PRIMARY KEY,
                    user_id INTEGER REFERENCES users(id),
                    lesson_number INTEGER NOT NULL,
                    is_completed BOOLEAN DEFAULT FALSE,
                    best_score FLOAT,
                    attempts_count INTEGER DEFAULT 0,
                    first_completed_at TIMESTAMP,
                    last_attempt_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
                """
                session.execute(text(create_progress_table))
                session.commit()
                results["migrations"].append("user_progress: ‚úÖ vytvo≈ôena")
            except Exception as e:
                results["migrations"].append(f"user_progress: ‚ùå {str(e)}")
                session.rollback()
        
        results["status"] = "completed"
        
    except Exception as e:
        results["status"] = "error"
        results["error"] = str(e)
        session.rollback()
    finally:
        session.close()
    
    return results

# NOV√â ADMIN ENDPOINTY - MUS√ç B√ùT P≈òED REGISTRAC√ç ROUTERU

@admin_router.get("/create-lesson-1", name="admin_create_lesson_1")
def admin_create_lesson_1(request: Request):
    """Endpoint pro vytvo≈ôen√≠ Lekce 1 - Z√°klady obr√°bƒõc√≠ch kapalin"""
    try:
        logger.info("üöÄ Vytv√°≈ôen√≠ Lekce 1...")
        
        session = SessionLocal()
        
        # Zkontroluj, jestli u≈æ lekce 1 existuje
        existing_lesson = session.query(Lesson).filter(
            Lesson.title.contains("Lekce 1")
        ).first()
        
        if existing_lesson:
            session.close()
            return templates.TemplateResponse("message.html", {
                "request": request,
                "message": f"‚úÖ Lekce 1 ji≈æ existuje! (ID: {existing_lesson.id})",
                "back_url": "/admin/lessons",
                "back_text": "Zpƒõt na lekce"
            })
        
        # Obsah lekce 1 - Z√°klady obr√°bƒõc√≠ch kapalin
        lesson_script = """
# Lekce 1: Z√°klady obr√°bƒõc√≠ch kapalin

## √övod
Obr√°bƒõc√≠ kapaliny jsou nezbytnou souƒç√°st√≠ modern√≠ho obr√°bƒõn√≠ kov≈Ø. Jejich spr√°vn√© pou≈æit√≠ a √∫dr≈æba v√Ωraznƒõ ovliv≈àuje kvalitu v√Ωroby, ≈æivotnost n√°stroj≈Ø a bezpeƒçnost pr√°ce.

## Hlavn√≠ funkce obr√°bƒõc√≠ch kapalin

### 1. Chlazen√≠
- Odvod tepla vznikaj√≠c√≠ho p≈ôi ≈ôezn√©m procesu
- Zabr√°nƒõn√≠ p≈ôeh≈ô√°t√≠ n√°stroje a obrobku
- Udr≈æen√≠ st√°l√© teploty ≈ôezn√© hrany

### 2. Maz√°n√≠
- Sn√≠≈æen√≠ t≈ôen√≠ mezi n√°strojem a obrobkem
- Zlep≈°en√≠ kvality povrchu
- Prodlou≈æen√≠ ≈æivotnosti n√°stroje

### 3. Odvod t≈ô√≠sek
- Transport t≈ô√≠sek pryƒç z m√≠sta ≈ôezu
- Zabr√°nƒõn√≠ zan√°≈°en√≠ n√°stroje
- Udr≈æen√≠ ƒçistoty ≈ôezn√© z√≥ny

## Typy obr√°bƒõc√≠ch kapalin

### ≈òezn√© oleje
- Vysok√° mazac√≠ schopnost
- Pou≈æit√≠ p≈ôi tƒõ≈æk√©m obr√°bƒõn√≠
- Nevhodn√© pro vysok√© rychlosti

### Emulze (smƒõsi oleje a vody)
- Kombinace maz√°n√≠ a chlazen√≠
- Nejƒçastƒõji pou≈æ√≠van√©
- Koncentrace 3-8%

### Syntetick√© kapaliny
- Bez oleje, pouze chemick√© p≈ô√≠sady
- V√Ωborn√© chladic√≠ vlastnosti
- Dlouh√° ≈æivotnost

## Kontrola a √∫dr≈æba

### Denn√≠ kontrola
- Mƒõ≈ôen√≠ koncentrace refraktometrem
- Kontrola pH hodnoty (8,5-9,5)
- Vizu√°ln√≠ kontrola ƒçistoty

### T√Ωdenn√≠ √∫dr≈æba
- Doplnƒõn√≠ kapaliny
- Odstranƒõn√≠ neƒçistot
- Kontrola bakteri√°ln√≠ kontaminace

### Mƒõs√≠ƒçn√≠ servis
- V√Ωmƒõna filtr≈Ø
- Hloubkov√° anal√Ωza
- P≈ô√≠padn√° regenerace

## Bezpeƒçnost
- Pou≈æ√≠v√°n√≠ ochrann√Ωch pom≈Øcek
- Prevence kontaktu s k≈Ø≈æ√≠
- Spr√°vn√© skladov√°n√≠ a likvidace

## Z√°vƒõr
Spr√°vn√° pr√°ce s obr√°bƒõc√≠mi kapalinami je z√°kladem efektivn√≠ho obr√°bƒõn√≠. Pravideln√° kontrola a √∫dr≈æba zaji≈°≈•uje optim√°ln√≠ v√Ωkon a bezpeƒçnost provozu.
        """
        
        # Vytvo≈ô lekci 1
        lesson = Lesson(
            title="Lekce 1: Z√°klady obr√°bƒõc√≠ch kapalin",
            description="Komplexn√≠ √∫vod do problematiky obr√°bƒõc√≠ch kapalin - funkce, typy, kontrola a √∫dr≈æba.",
            language="cs",
            script=lesson_script,
            questions=[],  # Ot√°zky se budou generovat dynamicky
            level="beginner"
        )
        
        session.add(lesson)
        session.commit()
        lesson_id = lesson.id
        session.close()
        
        logger.info(f"‚úÖ Lekce 1 vytvo≈ôena s ID: {lesson_id}")
        
        return templates.TemplateResponse("message.html", {
            "request": request,
            "message": f"üéâ Lekce 1 √∫spƒõ≈°nƒõ vytvo≈ôena!\n\nüìù ID: {lesson_id}\nüìö Obsah: Z√°klady obr√°bƒõc√≠ch kapalin\nüéØ √örove≈à: Zaƒç√°teƒçn√≠k\n\n‚ö° Ot√°zky se generuj√≠ automaticky p≈ôi testov√°n√≠!",
            "back_url": "/admin/lessons",
            "back_text": "Zobrazit v≈°echny lekce"
        })
        
    except Exception as e:
        logger.error(f"‚ùå Chyba p≈ôi vytv√°≈ôen√≠ Lekce 1: {e}")
        return templates.TemplateResponse("message.html", {
            "request": request,
            "message": f"‚ùå Chyba p≈ôi vytv√°≈ôen√≠ Lekce 1: {str(e)}",
            "back_url": "/admin/lessons",
            "back_text": "Zpƒõt na lekce"
        })

@admin_router.get("/user-progress", response_class=HTMLResponse, name="admin_user_progress")
def admin_user_progress(request: Request):
    """Zobraz√≠ pokrok v≈°ech u≈æivatel≈Ø"""
    session = SessionLocal()
    try:
        users = session.query(User).all()
        
        # P≈ôiprav data o pokroku
        progress_data = []
        for user in users:
            user_level = getattr(user, 'current_lesson_level', 0)
            
            # Najdi n√°zev aktu√°ln√≠ lekce
            current_lesson_name = "Vstupn√≠ test"
            if user_level == 1:
                current_lesson_name = "Lekce 1: Z√°klady"
            elif user_level > 1:
                current_lesson_name = f"Lekce {user_level}"
            
            progress_data.append({
                'user': user,
                'level': user_level,
                'lesson_name': current_lesson_name,
                'attempts_count': len(user.attempts) if hasattr(user, 'attempts') else 0
            })
        
        session.close()
        return templates.TemplateResponse("admin/user_progress.html", {
            "request": request, 
            "progress_data": progress_data
        })
        
    except Exception as e:
        session.close()
        logger.error(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ pokroku: {e}")
        return templates.TemplateResponse("message.html", {
            "request": request,
            "message": f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ pokroku u≈æivatel≈Ø: {str(e)}",
            "back_url": "/admin/users",
            "back_text": "Zpƒõt na u≈æivatele"
        })

@admin_router.get("/lesson-0-questions", response_class=HTMLResponse, name="admin_lesson_0_questions")
def admin_lesson_0_questions(request: Request):
    """Zobrazen√≠ a editace ot√°zek vstupn√≠ho testu (Lekce 0)"""
    session = SessionLocal()
    try:
        # Najdi Lekci 0
        lesson_0 = session.query(Lesson).filter(Lesson.lesson_number == 0).first()
        
        if not lesson_0:
            return HTMLResponse(content="""
            <!DOCTYPE html>
            <html>
            <head>
                <title>Spr√°va ot√°zek - Lekce 0</title>
                <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
            </head>
            <body>
                <div class="container mt-4">
                    <h2>‚ùå Lekce 0 nebyla nalezena</h2>
                    <p>Nejprve vytvo≈ôte Lekci 0 pomoc√≠ <a href="/admin/create-lesson-0">tohoto odkazu</a>.</p>
                    <a href="/admin" class="btn btn-primary">‚Üê Zpƒõt na admin</a>
                </div>
            </body>
            </html>
            """)
        
        questions = lesson_0.questions if isinstance(lesson_0.questions, list) else []
        
        # Vytvo≈ôen√≠ HTML tabulky s ot√°zkami
        questions_html = ""
        for i, question in enumerate(questions):
            if isinstance(question, dict):
                question_text = question.get('question', 'N/A')
                correct_answer = question.get('correct_answer', 'N/A')
                keywords = ', '.join(question.get('keywords', []))
                enabled = question.get('enabled', True)
                
                questions_html += f"""
                <tr>
                    <td>{i + 1}</td>
                    <td>
                        <textarea class="form-control" name="question_{i}" rows="2">{question_text}</textarea>
                    </td>
                    <td>
                        <textarea class="form-control" name="answer_{i}" rows="2">{correct_answer}</textarea>
                    </td>
                    <td>
                        <input type="text" class="form-control" name="keywords_{i}" value="{keywords}" placeholder="kl√≠ƒçov√° slova oddƒõlen√° ƒç√°rkami">
                    </td>
                    <td>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" name="enabled_{i}" {'checked' if enabled else ''}>
                        </div>
                    </td>
                </tr>
                """
        
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Spr√°va ot√°zek - Lekce 0</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
            <script src="https://unpkg.com/htmx.org@1.9.10"></script>
        </head>
        <body>
            <div class="container mt-4">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2>üìù Spr√°va ot√°zek - Vstupn√≠ test (Lekce 0)</h2>
                    <a href="/admin" class="btn btn-secondary">‚Üê Zpƒõt na admin</a>
                </div>
                
                <div class="alert alert-info">
                    <strong>üí° Tip:</strong> M≈Ø≈æete upravit ot√°zky, spr√°vn√© odpovƒõdi, kl√≠ƒçov√° slova a povolit/zak√°zat ot√°zky.
                    Kl√≠ƒçov√° slova oddƒõlujte ƒç√°rkami (nap≈ô. "refraktometr, titrace").
                </div>
                
                <form hx-post="/admin/lesson-0-questions" hx-target="#result" class="mb-4">
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead class="table-dark">
                                <tr>
                                    <th>#</th>
                                    <th>Ot√°zka</th>
                                    <th>Spr√°vn√° odpovƒõƒè</th>
                                    <th>Kl√≠ƒçov√° slova</th>
                                    <th>Povoleno</th>
                                </tr>
                            </thead>
                            <tbody>
                                {questions_html}
                            </tbody>
                        </table>
                    </div>
                    
                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-primary">
                            üíæ Ulo≈æit zmƒõny
                        </button>
                        <a href="/admin/create-lesson-0" class="btn btn-warning">
                            üîÑ Obnovit v√Ωchoz√≠ ot√°zky
                        </a>
                    </div>
                </form>
                
                <div id="result"></div>
            </div>
        </body>
        </html>
        """
        
        return HTMLResponse(content=html_content)
        
    except Exception as e:
        logger.error(f"Chyba p≈ôi naƒç√≠t√°n√≠ ot√°zek Lekce 0: {e}")
        return HTMLResponse(content=f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Chyba</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
        </head>
        <body>
            <div class="container mt-4">
                <div class="alert alert-danger">
                    <h4>‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ ot√°zek</h4>
                    <p>{str(e)}</p>
                </div>
                <a href="/admin" class="btn btn-primary">‚Üê Zpƒõt na admin</a>
            </div>
        </body>
        </html>
        """)
    finally:
        session.close()

@admin_router.post("/lesson-0-questions", response_class=HTMLResponse)
async def admin_lesson_0_questions_post(request: Request):
    """Ulo≈æen√≠ zmƒõn v ot√°zk√°ch vstupn√≠ho testu"""
    session = SessionLocal()
    try:
        form = await request.form()
        
        # Najdi Lekci 0
        lesson_0 = session.query(Lesson).filter(Lesson.lesson_number == 0).first()
        if not lesson_0:
            return HTMLResponse(content="<div class='alert alert-danger'>‚ùå Lekce 0 nebyla nalezena</div>")
        
        # Z√≠skej aktu√°ln√≠ ot√°zky
        current_questions = lesson_0.questions if isinstance(lesson_0.questions, list) else []
        updated_questions = []
        
        # Zpracuj ka≈ædou ot√°zku
        for i, question in enumerate(current_questions):
            if isinstance(question, dict):
                # Z√≠skej hodnoty z formul√°≈ôe
                question_text = form.get(f'question_{i}', question.get('question', ''))
                correct_answer = form.get(f'answer_{i}', question.get('correct_answer', ''))
                keywords_str = form.get(f'keywords_{i}', '')
                enabled = form.get(f'enabled_{i}') == 'on'
                
                # Zpracuj kl√≠ƒçov√° slova
                keywords = [kw.strip() for kw in keywords_str.split(',') if kw.strip()]
                
                # Vytvo≈ô aktualizovanou ot√°zku
                updated_question = {
                    'number': i + 1,
                    'question': question_text,
                    'correct_answer': correct_answer,
                    'keywords': keywords,
                    'enabled': enabled
                }
                updated_questions.append(updated_question)
        
        # Ulo≈æ zmƒõny
        lesson_0.questions = updated_questions
        session.commit()
        
        return HTMLResponse(content=f"""
        <div class="alert alert-success">
            ‚úÖ Ot√°zky byly √∫spƒõ≈°nƒõ ulo≈æeny! ({len(updated_questions)} ot√°zek)
        </div>
        """)
        
    except Exception as e:
        logger.error(f"Chyba p≈ôi ukl√°d√°n√≠ ot√°zek Lekce 0: {e}")
        session.rollback()
        return HTMLResponse(content=f"""
        <div class="alert alert-danger">
            ‚ùå Chyba p≈ôi ukl√°d√°n√≠: {str(e)}
        </div>
        """)
    finally:
        session.close()

# P≈ôipojen√≠ admin routeru
app.include_router(admin_router)
app.include_router(system_router) # P≈ôipojen√≠ nov√©ho routeru

logger = logging.getLogger("uvicorn")

# P≈ò√çM√ù ENDPOINT NA HLAVN√ç APP - GARANTOVANƒö DOSTUPN√ù
@app.get("/admin/system/run-migrations", response_class=HTMLResponse)
def direct_run_migrations(request: Request):
    """
    P≈ò√çM√ù endpoint pro datab√°zov√© migrace - registrovan√Ω p≈ô√≠mo na hlavn√≠ app.
    """
    session = SessionLocal()
    results = {"success": [], "errors": []}
    
    # Kompletn√≠ seznam migrac√≠
    migrations = {
        "lessons": [
            ("base_difficulty", "VARCHAR(20)", "medium"),
        ],
        "test_sessions": [
            ("difficulty_score", "FLOAT", 50.0),
            ("failed_categories", "JSON", "[]"),
        ]
    }
    
    try:
        for table, columns in migrations.items():
            for column_name, column_type, default_value in columns:
                # Pro default hodnoty stringov√©ho typu pot≈ôebujeme uvozovky
                default_sql = f"'{default_value}'" if isinstance(default_value, str) else default_value
                
                try:
                    # Zkusit p≈ôidat sloupec
                    session.execute(text(f"ALTER TABLE {table} ADD COLUMN {column_name} {column_type} DEFAULT {default_sql}"))
                    session.commit()
                    results["success"].append(f"‚úÖ Sloupec '{column_name}' √∫spƒõ≈°nƒõ p≈ôid√°n do tabulky '{table}'.")
                except Exception as e:
                    # Pokud sloupec ji≈æ existuje, ignorovat chybu
                    if "already exists" in str(e) or "duplicate column" in str(e):
                        results["success"].append(f"‚òëÔ∏è Sloupec '{column_name}' v tabulce '{table}' ji≈æ existuje.")
                    else:
                        results["errors"].append(f"‚ùå Chyba p≈ôi p≈ôid√°v√°n√≠ sloupce '{column_name}': {e}")
                    session.rollback() # D≈Øle≈æit√Ω rollback po ka≈æd√© chybƒõ
                    
        if not results["errors"]:
            message = "üéâ V≈°echny migrace probƒõhly √∫spƒõ≈°nƒõ! Datab√°ze je nyn√≠ synchronizov√°na."
        else:
            message = "‚ö†Ô∏è Nƒõkter√© migrace selhaly. Zkontrolujte detaily n√≠≈æe."
            
        return templates.TemplateResponse("message.html", {
            "request": request,
            "message": message,
            "details": results,
            "back_url": "/admin/dashboard",
            "back_text": "Zpƒõt na dashboard"
        })

    except Exception as e:
        session.rollback()
        return templates.TemplateResponse("message.html", {
            "request": request,
            "message": f"‚ùå Kritick√° chyba p≈ôi migraci: {e}",
            "back_url": "/admin/dashboard",
            "back_text": "Zpƒõt na dashboard"
        })
    finally:
        session.close()

@app.get("/")
async def root():
    """Health check endpoint - MUS√ç b√Ωt rychl√Ω pro Railway health check"""
    # Nejjednodu≈°≈°√≠ mo≈æn√° odpovƒõƒè - ≈æ√°dn√© importy, ≈æ√°dn√© datab√°zov√© dotazy
    return {
        "status": "healthy",
        "message": "Lecture App FastAPI bƒõ≈æ√≠!",
        "port": os.getenv('PORT', '8000'),
        "time": str(datetime.now())
    }

@app.post("/")
async def root_post(request: Request, attempt_id: str = Query(None)):
    """Twilio nƒõkdy vol√° root endpoint m√≠sto /voice/ - pou≈æijeme stejnou logiku"""
    logger.info("P≈ôijat Twilio webhook na ROOT / endpoint")
    logger.info(f"Attempt ID: {attempt_id}")
    
    # P≈òESMƒöRUJ NA /voice/ handler pro konzistentn√≠ chov√°n√≠
    logger.info("üîÑ P≈ôesmƒõrov√°v√°m ROOT request na voice_handler")
    return await voice_handler(request)

@app.get("/health")
def health():
    return {"status": "healthy", "service": "lecture-app"}

@app.post("/stream-callback")
async def stream_callback(request: Request):
    """Twilio Stream statusCallback endpoint"""
    logger.info("P≈ôijat Twilio Stream statusCallback")
    
    # P≈ôeƒçteme data z requestu
    form_data = await request.form()
    callback_data = dict(form_data)
    
    logger.info(f"Stream callback data: {callback_data}")
    
    # Zpracujeme r≈Øzn√© typy stream event≈Ø
    stream_event = callback_data.get('StreamEvent')
    stream_sid = callback_data.get('StreamSid')
    
    if stream_event == 'stream-started':
        logger.info(f"üü¢ Stream {stream_sid} spu≈°tƒõn")
    elif stream_event == 'stream-stopped':
        logger.info(f"üî¥ Stream {stream_sid} ukonƒçen - WebSocket by mƒõl b√Ωt uzav≈ôen")
        # Zde by mohlo b√Ωt dodateƒçn√© cleanup pokud pot≈ôebujeme
    elif stream_event == 'stream-error':
        error_code = callback_data.get('StreamErrorCode')
        error_msg = callback_data.get('StreamError')
        logger.error(f"‚ùå Stream {stream_sid} chyba {error_code}: {error_msg}")
    
    return {"status": "ok"}

@app.post("/voice/call")
async def voice_call_handler(request: Request):
    """Handler pro Twilio Voice webhook na /voice/call endpoint"""
    logger.info("P≈ôijat Twilio webhook na /voice/call")
    
    # Z√≠sk√°me form data z Twilio
    form_data = await request.form()
    
    # Logov√°n√≠ d≈Øle≈æit√Ωch informac√≠
    from_number = form_data.get('From', 'Unknown')
    to_number = form_data.get('To', 'Unknown') 
    call_sid = form_data.get('CallSid', 'Unknown')
    
    logger.info(f"Call SID: {call_sid}")
    logger.info(f"From: {from_number} -> To: {to_number}")
    
    # Zkus√≠me z√≠skat attempt_id z query parametr≈Ø
    attempt_id = request.query_params.get('attempt_id')
    logger.info(f"Attempt ID: {attempt_id}")
    
    # Vytvo≈ô√≠me TwiML odpovƒõƒè
    twiml_response = f'''<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Say language="cs-CZ" rate="0.9" voice="Google.cs-CZ-Standard-A">V√≠tejte u AI asistenta pro v√Ωuku jazyk≈Ø.</Say>
    <Say language="cs-CZ" rate="0.9" voice="Google.cs-CZ-Standard-A">WebSocket test - pokud sly≈°√≠te tuto zpr√°vu, HTTP funguje.</Say>
    <Say language="cs-CZ" rate="0.9" voice="Google.cs-CZ-Standard-A">Nyn√≠ testuji WebSocket p≈ôipojen√≠.</Say>
    <Start>
        <Stream 
            name="ai_assistant_stream"
            url="wss://lecture-app-production.up.railway.app/audio" 
            track="both_tracks" 
            statusCallback="https://lecture-app-production.up.railway.app/stream-callback"
            statusCallbackMethod="POST"
        />
    </Start>
    <Pause length="3600"/>
</Response>'''
    
    logger.info(f"TwiML odpovƒõƒè z /voice/call: {twiml_response}")
    
    return Response(
        content=twiml_response,
        media_type="application/xml"
    )

@app.post("/voice/")
async def voice_handler(request: Request):
    logger.info("P≈ôijat Twilio webhook na /voice/")
    attempt_id = request.query_params.get('attempt_id')
    logger.info(f"Attempt ID: {attempt_id}")
    
    # Z√≠sk√°n√≠ parametr≈Ø hovoru
    form = await request.form()
    caller_country = form.get("CallerCountry", "")
    to_country = form.get("ToCountry", "")
    logger.info(f"Volaj√≠c√≠: {caller_country} -> {to_country}")
    
    response = VoiceResponse()
    
    # Inteligentn√≠ uv√≠t√°n√≠ podle aktu√°ln√≠ lekce u≈æivatele
    session = SessionLocal()
    try:
        current_user = None
        current_lesson = None
        lesson_info = ""
        
        # Pokus√≠me se naj√≠t u≈æivatele podle attempt_id
        if attempt_id:
            try:
                attempt = session.query(Attempt).get(int(attempt_id))
                if attempt:
                    current_user = attempt.user
                    current_lesson = attempt.lesson
            except:
                pass
        
        # Pokud nen√≠ attempt, najdi posledn√≠ho u≈æivatele
        if not current_user:
            current_user = session.query(User).order_by(User.id.desc()).first()
        
        if current_user:
            # Z√≠skej aktu√°ln√≠ √∫rove≈à u≈æivatele
            user_level = getattr(current_user, 'current_lesson_level', 0)
            
            # Najdi spr√°vnou lekci podle √∫rovnƒõ
            if user_level == 0:
                target_lesson = session.query(Lesson).filter(
                    Lesson.lesson_number == 0
                ).first()
                if target_lesson:
                    lesson_info = f"Lekce {target_lesson.lesson_number}: Vstupn√≠ test z obr√°bƒõc√≠ch kapalin. Hned zaƒçneme s testem!"
                else:
                    lesson_info = "Lekce 0: Vstupn√≠ test. Hned zaƒçneme!"
            else:
                target_lesson = session.query(Lesson).filter(
                    Lesson.lesson_number == user_level
                ).first()
                if target_lesson:
                    lesson_info = f"Lekce {target_lesson.lesson_number}: {target_lesson.title.replace(f'Lekce {target_lesson.lesson_number}:', '').strip()}. Zaƒç√≠n√°me s v√Ωukou!"
                else:
                    lesson_info = f"Lekce {user_level}. Zaƒç√≠n√°me s v√Ωukou!"
    except Exception as e:
        logger.error(f"Chyba p≈ôi naƒç√≠t√°n√≠ lekce: {e}")
        lesson_info = "Lekce 0: Vstupn√≠ test. Hned zaƒçneme!"
    finally:
        session.close()
    
    # Nov√©, lep≈°√≠ uv√≠t√°n√≠ s prvn√≠ ot√°zkou (pokud je to nov√° session)
    if current_user and user_level == 0:
        # Pro vstupn√≠ test zkontroluj, jestli u≈æ existuje aktivn√≠ session
        test_session_check = session.query(TestSession).filter(
            TestSession.user_id == current_user.id,
            TestSession.lesson_id == target_lesson.id if target_lesson else None,
            TestSession.is_completed == False
        ).first()
        
        if not test_session_check and target_lesson:
            # NOV√Å SESSION - ≈ôekni uv√≠t√°n√≠ + prvn√≠ ot√°zku
            enabled_questions = []
            if isinstance(target_lesson.questions, list):
                enabled_questions = [
                    q for q in target_lesson.questions 
                    if isinstance(q, dict) and q.get('enabled', True)
                ]
            
            if enabled_questions:
                first_question = enabled_questions[0].get('question', '')
                full_intro = f"Ahoj, jsem tv≈Øj lektor! Zaƒç√≠n√°me s {lesson_info} Prvn√≠ ot√°zka: {first_question}"
                # P≈ôidej p≈ôirozenƒõj≈°√≠ pauzy do √∫vodn√≠ ≈ôeƒçi
                intro_with_pauses = create_natural_speech_response(full_intro)
                response.say(intro_with_pauses, language="cs-CZ", rate="0.8", voice="Google.cs-CZ-Standard-A")
                logger.info(f"üéØ √övodn√≠ ot√°zka ≈ôeƒçena v voice_handler: {first_question}")
            else:
                intro_text = f"Ahoj, jsem tv≈Øj lektor! Zaƒç√≠n√°me s {lesson_info}"
                intro_with_pauses = create_natural_speech_response(intro_text)
                response.say(intro_with_pauses, language="cs-CZ", rate="0.8", voice="Google.cs-CZ-Standard-A")
        else:
            # EXISTUJ√çC√ç SESSION - pouze uv√≠t√°n√≠
            existing_intro = "Ahoj, jsem tv≈Øj lektor! Pokraƒçujeme v testu."
            existing_intro_with_pauses = create_natural_speech_response(existing_intro)
            response.say(existing_intro_with_pauses, language="cs-CZ", rate="0.8", voice="Google.cs-CZ-Standard-A")
    else:
        # Bƒõ≈æn√© lekce
        lesson_intro = f"Ahoj, jsem tv≈Øj lektor! Zaƒç√≠n√°me s {lesson_info}"
        lesson_intro_with_pauses = create_natural_speech_response(lesson_intro)
        response.say(lesson_intro_with_pauses, language="cs-CZ", rate="0.8", voice="Google.cs-CZ-Standard-A")
    
    # Krat≈°√≠ pauza a p≈ôechod do action
    response.pause(length=1)
    
    # Gather s vylep≈°en√Ωmi parametry pro lep≈°√≠ detekci konce odpovƒõdi
    gather = response.gather(
        input='speech',
        timeout=8,  # Krat≈°√≠ z√°kladn√≠ timeout
        speech_timeout=3,  # Konkr√©tn√≠ hodnota m√≠sto 'auto' pro lep≈°√≠ detekci konce
        action='/voice/process',
        method='POST',
        language='cs-CZ',
        speech_model='phone_call',
        partial_result_callback='',  # Zak√°≈æeme partial results pro ƒçist≈°√≠ zpracov√°n√≠
        enhanced='true'  # Vylep≈°en√© rozpozn√°v√°n√≠
    )
    
    gather.say(
        "P√≠p.",
        language="cs-CZ",
        rate="0.8",
        voice="Google.cs-CZ-Standard-A"
    )
    
    # Vylep≈°en√Ω fallback s mo≈ænost√≠ p≈ôipomenut√≠
    response.say(
        "Nerozumƒõl jsem v√°m nebo jste neodpovƒõdƒõl. Zkuste mluvit jasnƒõ a v√Ωraznƒõ.",
        language="cs-CZ",
        rate="0.8",
        voice="Google.cs-CZ-Standard-A"
    )
    
    # Nab√≠dka opakov√°n√≠
    response.redirect('/voice/process?reminder=true')
    
    logger.info(f"TwiML odpovƒõƒè s inteligentn√≠m uv√≠t√°n√≠m: {response}")
    return Response(content=str(response), media_type="text/xml")

@app.post("/voice/process")
async def process_speech(request: Request):
    """Vylep≈°en√© zpracov√°n√≠ hlasov√©ho vstupu s inteligentn√≠m flow"""
    logger.info("üéôÔ∏è === PROCESS_SPEECH START ===")
    
    form = await request.form()
    speech_result = form.get('SpeechResult', '').strip()
    confidence = form.get('Confidence', '0')
    attempt_id = request.query_params.get('attempt_id')
    is_reminder = request.query_params.get('reminder') == 'true'
    is_confirmation = request.query_params.get('confirmation') == 'true'
    original_text = request.query_params.get('original_text', '')
    
    # URL decode original_text pokud je pot≈ôeba
    if original_text:
        from urllib.parse import unquote_plus
        original_text = unquote_plus(original_text)
    
    logger.info(f"üìù Rozpoznan√° ≈ôeƒç: '{speech_result}' (confidence: {confidence})")
    logger.info(f"üîó attempt_id: {attempt_id}, reminder: {is_reminder}, confirmation: {is_confirmation}")
    
    response = VoiceResponse()
    
    # Zpracov√°n√≠ confirmation workflow
    if is_confirmation and original_text:
        logger.info(f"üîÑ === CONFIRMATION WORKFLOW ===")
        logger.info(f"üìã P≈Øvodn√≠ text: '{original_text}'")
        logger.info(f"üé§ Nov√° odpovƒõƒè: '{speech_result}'")
        
        # Zkontroluj jestli u≈æivatel potvrdil ("ano", "yes", "spr√°vnƒõ", atd.)
        confirmation_words = ['ano', 'yes', 'spr√°vnƒõ', 'jo', 'jasnƒõ', 'p≈ôesnƒõ', 'souhlas√≠m']
        speech_lower = speech_result.lower()
        
        found_confirmation = [word for word in confirmation_words if word in speech_lower]
        
        if found_confirmation:
            # Potvrzeno - pou≈æij p≈Øvodn√≠ text
            speech_result = original_text
            logger.info(f"‚úÖ POTVRZENO ('{found_confirmation[0]}') ‚Üí pou≈æ√≠v√°m p≈Øvodn√≠: '{speech_result}'")
        else:
            # Nepotvrzeno - pou≈æij nov√Ω text
            logger.info(f"‚ùå NEPOTVRZENO ‚Üí pou≈æ√≠v√°m nov√Ω text: '{speech_result}'")
        
        logger.info(f"üéØ Fin√°ln√≠ text pro zpracov√°n√≠: '{speech_result}'")
        
        # Pokraƒçuj norm√°ln√≠m flow (bez dal≈°√≠ch confidence kontrol)
        confidence_float = 1.0  # Nastav√≠me vysokou confidence aby se p≈ôeskoƒçily dal≈°√≠ kontroly
    else:
        # Kontrola confidence threshold pro ASR
        confidence_float = float(confidence) if confidence else 0.0

    LOW_CONFIDENCE_THRESHOLD = 0.5  # Zv√Ω≈°en√Ω pr√°h pro lep≈°√≠ kontrolu

    # Pokud m√°me speech_result ale confidence je 0, pravdƒõpodobnƒõ je to false positive
    # Twilio nƒõkdy neposkytne confidence i kdy≈æ rozpozn√°n√≠ bylo √∫spƒõ≈°n√©
    if speech_result and confidence_float == 0.0:
        logger.info(f"üîç Speech result existuje ale confidence je 0 - pravdƒõpodobnƒõ OK rozpozn√°n√≠")
        confidence_float = 0.5  # Nastav√≠me st≈ôedn√≠ confidence pro pokraƒçov√°n√≠

    # Zpracov√°n√≠ p≈ôipomenut√≠ kdy≈æ u≈æivatel neodpovƒõdƒõl
    if is_reminder:
        response.say(
            "P≈ôipom√≠n√°m - pokud mi nerozum√≠te nebo pot≈ôebujete ƒças na zamy≈°len√≠, ≈ôeknƒõte to pros√≠m nahlas.",
            language="cs-CZ",
            rate="0.9",
            voice="Google.cs-CZ-Standard-A"
        )
        # Pokraƒçuj do norm√°ln√≠ho flow
    
    # Pou≈æij chyt≈ôej≈°√≠ logiku rozpozn√°v√°n√≠
    elif speech_result:
        # Kontrola, zda u≈æivatel signalizuje dokonƒçen√≠ odpovƒõdi
        if is_completion_signal(speech_result):
            logger.info(f"‚úÖ U≈æivatel signalizoval dokonƒçen√≠: '{speech_result}' - pokraƒçuji s vyhodnocen√≠m")
            # Pokraƒçuj s norm√°ln√≠m flow jako by mƒõl vysokou confidence
            confidence_float = 1.0
        
        recognition_decision = should_ask_for_confirmation(speech_result, confidence_float)
        logger.info(f"üß† Rozpozn√°n√≠: {recognition_decision['reason']} ‚Üí {recognition_decision['action']}")
        
        if recognition_decision['action'] in ['ask_confirm', 'ask_repeat', 'ask_complete']:
            # Vytvo≈ô p≈ôirozenƒõj≈°√≠ odpovƒõƒè s pauzami
            message_with_pauses = create_natural_speech_response(recognition_decision['message'])
            
            response.say(
                message_with_pauses,
                language="cs-CZ",
                rate="0.8",  # Trochu pomalej≈°√≠ pro jasnost
                voice="Google.cs-CZ-Standard-A"
            )
            
            if recognition_decision['action'] == 'ask_confirm':
                # URL encode pro bezpeƒçn√© p≈ôed√°n√≠ parametr≈Ø
                from urllib.parse import quote_plus
                encoded_text = quote_plus(speech_result)
                
                gather = response.gather(
                    input='speech',
                    timeout=12,  # V√≠ce ƒçasu na rozmy≈°len√≠
                    speech_timeout=4,
                    action=f'/voice/process?confirmation=true&original_text={encoded_text}',
                    method='POST',
                    language='cs-CZ',
                    speech_model='phone_call',
                    enhanced='true'
                )
                
                gather.say(
                    "≈òeknƒõte 'ano' pokud je to spr√°vnƒõ, nebo zopakujte va≈°i odpovƒõƒè.",
                    language="cs-CZ",
                    rate="0.8",
                    voice="Google.cs-CZ-Standard-A"
                )
            
            elif recognition_decision['action'] == 'ask_complete':
                # Nab√≠dka doplnƒõn√≠ odpovƒõdi
                gather = response.gather(
                    input='speech',
                    timeout=15,  # V√≠ce ƒçasu na rozmy≈°len√≠ del≈°√≠ odpovƒõdi
                    speech_timeout=5,
                    action='/voice/process',
                    method='POST',
                    language='cs-CZ',
                    speech_model='phone_call',
                    enhanced='true'
                )
                
                gather.say(
                    "Pokud chcete nƒõco doplnit, pokraƒçujte. Nebo ≈ôeknƒõte 'hotovo' pokud je odpovƒõƒè kompletn√≠.",
                    language="cs-CZ",
                    rate="0.8",
                    voice="Google.cs-CZ-Standard-A"
                )
            
            else:  # ask_repeat
                gather = response.gather(
                    input='speech',
                    timeout=12,
                    speech_timeout=4,
                    action='/voice/process',
                    method='POST',
                    language='cs-CZ',
                    speech_model='phone_call',
                    enhanced='true'
                )
            
            response.say(
                "Nerozumƒõl jsem v√°m. Zkuste to pros√≠m znovu pomaleji.",
                language="cs-CZ",
                rate="0.8",
                voice="Google.cs-CZ-Standard-A"
            )
            response.redirect('/voice/process?reminder=true')
            
            return Response(content=str(response), media_type="text/xml")
    
    # Pokud je odpovƒõƒè pr√°zdn√° a nen√≠ to reminder
    if not speech_result and not is_reminder:
        response.say(
            "Nerozumƒõl jsem v√°m nebo jste neodpovƒõdƒõl. Zkuste mluvit jasnƒõ a z≈ôetelnƒõ.",
            language="cs-CZ",
            rate="0.9",
            voice="Google.cs-CZ-Standard-A"
        )
        
        # Vylep≈°en√Ω gather s lep≈°√≠mi parametry
        gather = response.gather(
            input='speech',
            timeout=10,
            speech_timeout=4,  # Del≈°√≠ speech_timeout pro lep≈°√≠ detekci konce
            action='/voice/process',
            method='POST',
            language='cs-CZ',
            speech_model='phone_call',
            enhanced='true'
        )
        
        gather.say(
            "Zkuste to pros√≠m znovu. Naslouch√°m...",
            language="cs-CZ",
            rate="0.9",
            voice="Google.cs-CZ-Standard-A"
        )
        
        response.say(
            "Pokud m√°te pot√≠≈æe s p≈ôipojen√≠m, zkuste zavolat znovu.",
            language="cs-CZ",
            rate="0.9",
            voice="Google.cs-CZ-Standard-A"
        )
        response.hangup()
        
        return Response(content=str(response), media_type="text/xml")
    
    # Hlavn√≠ zpracov√°n√≠ s OpenAI
    try:
        openai_api_key = os.getenv('OPENAI_API_KEY')
        if not openai_api_key:
            response.say("AI slu≈æba nen√≠ dostupn√°.", language="cs-CZ")
            response.hangup()
            return Response(content=str(response), media_type="text/xml")
        
        import openai
        client = openai.OpenAI(api_key=openai_api_key)
        
        session = SessionLocal()
        current_user = None
        user_level = 0
        should_continue = False
        
        try:
            # Naƒçten√≠ u≈æivatele
            if attempt_id:
                try:
                    attempt = session.query(Attempt).get(int(attempt_id))
                    if attempt:
                        current_user = attempt.user
                except:
                    pass
            
            if not current_user:
                current_user = session.query(User).order_by(User.id.desc()).first()
            
            if not current_user:
                response.say("Technick√° chyba - u≈æivatel nenalezen.", language="cs-CZ")
                response.hangup()
                return Response(content=str(response), media_type="text/xml")
            
            user_level = getattr(current_user, 'current_lesson_level', 0)
            logger.info(f"üë§ U≈æivatel: {current_user.name}, √örove≈à: {user_level}")
            
            if user_level == 0:
                # === VSTUPN√ç TEST (LEKCE 0) ===
                should_continue = await handle_entry_test(session, current_user, speech_result, response, client, attempt_id, confidence_float)
            else:
                # === Bƒö≈ΩN√â LEKCE (1+) ===
                should_continue = await handle_regular_lesson(session, current_user, user_level, speech_result, response, client)
                
        except Exception as db_error:
            logger.error(f"‚ùå DB chyba: {db_error}")
            response.say("Do≈°lo k technick√© chybƒõ. Zkuste to pros√≠m pozdƒõji.", language="cs-CZ")
            response.hangup()
            return Response(content=str(response), media_type="text/xml")
        finally:
            session.close()
    
    except Exception as e:
        logger.error(f"‚ùå Celkov√° chyba: {e}")
        response.say("Do≈°lo k neoƒçek√°van√© chybƒõ.", language="cs-CZ")
        response.hangup()
        return Response(content=str(response), media_type="text/xml")
    
    # === POKRAƒåOV√ÅN√ç KONVERZACE ===
    if should_continue:
        gather = response.gather(
            input='speech',
            timeout=15,  # Del≈°√≠ timeout pro √∫vahu
            speech_timeout=4,  # Lep≈°√≠ detekce konce odpovƒõdi
            action='/voice/process',
            method='POST',
            language='cs-CZ',
            speech_model='phone_call',
            enhanced='true'
        )
        
        if user_level == 0:
            gather.say(
                "P√≠p.",
                language="cs-CZ",
                rate="0.8",
                voice="Google.cs-CZ-Standard-A"
            )
        else:
            question_prompt = "M√°te dal≈°√≠ ot√°zku?"
            question_prompt_with_pauses = create_natural_speech_response(question_prompt)
            gather.say(
                question_prompt_with_pauses,
                language="cs-CZ",
                rate="0.8",
                voice="Google.cs-CZ-Standard-A"
            )
        
        # Vylep≈°en√Ω fallback
        response.say(
            "Nerozumƒõl jsem va≈°√≠ odpovƒõdi. Zkuste mluvit jasnƒõ nebo ≈ôeknƒõte 'konec' pro ukonƒçen√≠.",
            language="cs-CZ",
            rate="0.8",
            voice="Google.cs-CZ-Standard-A"
        )
        response.redirect('/voice/process?reminder=true')
    else:
        response.say(
            "Dƒõkuji za rozhovor. Na shledanou!",
            language="cs-CZ",
            rate="0.9",
            voice="Google.cs-CZ-Standard-A"
        )
        response.hangup()
    
    return Response(content=str(response), media_type="text/xml")


async def handle_entry_test(session, current_user, speech_result, response, client, attempt_id, confidence_float):
    """Zpracov√°n√≠ vstupn√≠ho testu (Lekce 0)"""
    logger.info("üéØ Zpracov√°v√°m vstupn√≠ test...")
    
    # Najdi Lekci 0
    target_lesson = session.query(Lesson).filter(
        Lesson.lesson_number == 0
    ).first()
    
    if not target_lesson:
        target_lesson = session.query(Lesson).filter(
            Lesson.title.contains("Lekce 0")
        ).first()
    
    if not target_lesson:
        response.say("Vstupn√≠ test nebyl nalezen. Kontaktujte administr√°tora.", language="cs-CZ")
        return False
    
    # Zkontroluj, jestli u≈æ existuje aktivn√≠ session P≈òED jej√≠m z√≠sk√°n√≠m
    session_db = SessionLocal()
    existing_active_session = session_db.query(TestSession).filter(
        TestSession.user_id == current_user.id,
        TestSession.lesson_id == target_lesson.id,
        TestSession.is_completed == False
    ).first()
    session_db.close()
    
    # Z√≠skej nebo vytvo≈ô test session
    test_session = get_or_create_test_session(
        user_id=current_user.id,
        lesson_id=target_lesson.id,
        attempt_id=int(attempt_id) if attempt_id else None
    )
    
    # Rozli≈°en√≠: NOV√Å session (prvn√≠ ot√°zka) vs EXISTUJ√çC√ç session (odpovƒõƒè)
    if not existing_active_session:
        # NOV√Å SESSION - prvn√≠ ot√°zka u≈æ byla ≈ôeƒçena v voice_handler
        logger.info(f"üéØ Nov√° session vytvo≈ôena, prvn√≠ ot√°zka u≈æ byla ≈ôeƒçena")
        return True
    else:
        # EXISTUJ√çC√ç SESSION - vyhodnotit odpovƒõƒè
        logger.info(f"üí¨ Vyhodnocuji odpovƒõƒè: '{speech_result}'")
        
        current_question = get_current_question(test_session)
        if not current_question or not speech_result:
            response.say("Nerozumƒõl jsem va≈°√≠ odpovƒõdi. Zkuste to pros√≠m znovu.", language="cs-CZ")
            return True
        
        # AI vyhodnocen√≠ podle nov√Ωch instrukc√≠ s vylep≈°en√Ωm matching algoritmem
        keywords = current_question.get('keywords', [])
        system_prompt = f"""√öKOL:
Vyhodno≈• studentskou odpovƒõƒè na zadanou ot√°zku a porovnej ji s ide√°ln√≠ spr√°vnou odpovƒõd√≠.

OT√ÅZKA: {current_question.get('question', '')}
SPR√ÅVN√Å ODPOVƒöƒé: {current_question.get('correct_answer', '')}
STUDENTSK√Å ODPOVƒöƒé: "{speech_result}"

D≈ÆLE≈ΩIT√â PRAVIDLA PRO VYHODNOCEN√ç:
1. POROVN√ÅV√ÅN√ç SE SPR√ÅVNOU ODPOVƒöD√ç: Hlavn√≠ krit√©rium je podobnost s ide√°ln√≠ spr√°vnou odpovƒõd√≠, ne kl√≠ƒçov√° slova.

2. ROZPOZN√ÅV√ÅN√ç CHYB ASR: Ber v √∫vahu mo≈æn√© chyby rozpozn√°v√°n√≠ ≈ôeƒçi:
   - 'oper√°torem' = 'separ√°torem' (ƒåAST√Å CHYBA ASR!)
   - 'repar√°tor' = 'separ√°tor' (ƒåAST√Å CHYBA ASR!)
   - 'chlazen√≠' = 'hlazen√≠'
   - 'maz√°n√≠' = 'mazan√≠'
   - 'odvod' = 'odvod'

3. SYNONYMA A VARIANTY: Uzn√°vej tyto varianty:
   - 'refraktometr' = 'refraktometrick√Ω', 'refraktometrick√©'
   - 'koncentrace' = 'koncentrovan√Ω', 'koncentrovan√°'
   - 'bakterie' = 'bakteri√°ln√≠', 'bakteri√≠', 'bakteri√°ln√≠ho'
   - 'pH' = 'ph', 'PH', 'ph hodnota'
   - 'emulze' = 'emulzn√≠', 'emulzn√≠ kapalina'
   - 'chlazen√≠' = 'chlazen', 'ochlazov√°n', 'chlazen√°'
   - 'separ√°tor' = 'separ√°tor oleje', 'separ√°torem', 'separ√°toru', 'oper√°torem', 'oper√°tor', 'repar√°tor', 'repar√°torem'
   - 'odstranƒõn√≠' = 'odstranit', 'odstra≈àuje', 'odstranƒõno', 'odstra≈àov√°n√≠'
   - 'skimmer' = 'skimmerem', 'skimmeru', 'skimmer'

4. KRITICK√â PRAVIDLO: 
   - Pokud student ≈ôekne 'oper√°torem' nebo 'oper√°tor', pova≈æuj to za 'separ√°torem'!
   - Pokud student ≈ôekne 'separ√°tor', pova≈æuj to za 'separ√°torem' (stejn√Ω v√Ωznam)!
   - R≈Øzn√© tvary slov maj√≠ stejn√Ω v√Ωznam: 'separ√°tor' = 'separ√°torem' = 'separ√°toru'

5. PRAVIDLO PRO ƒå√ÅSTEƒåN√â SHODY:
   - Pokud student zm√≠n√≠ hlavn√≠ koncept (nap≈ô. 'separ√°tor'), ale chyb√≠ up≈ôesnƒõn√≠ (nap≈ô. 'oleje'), st√°le to pova≈æuj za spr√°vn√©, pokud je kontext jasn√Ω.
   - P≈ô√≠klad: Na ot√°zku "Jak se odstra≈àuje tramp oil?" je odpovƒõƒè "separ√°torem" spr√°vn√°, i kdy≈æ ide√°ln√≠ je "separ√°torem oleje".

6. ROZPOZN√ÅV√ÅN√ç KO≈òEN≈Æ SLOV:
   - Pokud ko≈ôen slova je spr√°vn√Ω, pova≈æuj to za spr√°vn√©
   - P≈ô√≠klad: 'chlazen√≠' = 'chlazen', 'chlazen√°', 'chlazen√Ω', 'ochlazov√°n√≠'
   - P≈ô√≠klad: 'maz√°n√≠' = 'mazan', 'mazan√Ω', 'maz√°n', 'maz√°n√≠'
   - P≈ô√≠klad: 'odstranƒõn√≠' = 'odstranit', 'odstra≈àuje', 'odstranƒõno', 'odstra≈àov√°n√≠'
   - P≈ô√≠klad: 'separ√°tor' = 'separ√°torem', 'separ√°toru', 'separ√°torov√Ω'
   - P≈ô√≠klad: 'skimmer' = 'skimmerem', 'skimmeru', 'skimmerov√Ω'
   - P≈ô√≠klad: 'refraktometr' = 'refraktometrick√Ω', 'refraktometrick√©', 'refraktometr≈Ø'
   - P≈ô√≠klad: 'koncentrace' = 'koncentrovan√Ω', 'koncentrovan√°', 'koncentrovat'
   - P≈ô√≠klad: 'bakterie' = 'bakteri√°ln√≠', 'bakteri√≠', 'bakteri√°ln√≠ho'

7. VYPOƒåET SK√ìRE: 
   - 100%: Odpovƒõƒè obsahuje v≈°echny kl√≠ƒçov√© koncepty ze spr√°vn√© odpovƒõdi
   - 80-99%: Odpovƒõƒè obsahuje vƒõt≈°inu kl√≠ƒçov√Ωch koncept≈Ø
   - 60-79%: Odpovƒõƒè obsahuje nƒõkter√© kl√≠ƒçov√© koncepty
   - 40-59%: Odpovƒõƒè obsahuje m√°lo kl√≠ƒçov√Ωch koncept≈Ø
   - 0-39%: Odpovƒõƒè neobsahuje kl√≠ƒçov√© koncepty

V√ùSTUP:
1. Procentu√°ln√≠ sk√≥re: Vypoƒç√≠tej podle pravidel v√Ω≈°e
2. Ultra kr√°tk√° zpƒõtn√° vazba (max. 1‚Äì2 vƒõty):  
   - Pokud chyb√≠ kl√≠ƒçov√© koncepty, vyjmenuj je struƒçnƒõ: ‚ÄûChyb√≠: ‚Ä¶"  
   - Pokud odpovƒõƒè obsahuje v≈°echny kl√≠ƒçov√© koncepty: ‚ÄûV√Ωbornƒõ, √∫pln√° odpovƒõƒè!"

Form√°t odpovƒõdi: [FEEDBACK] [SK√ìRE: XX%]"""
        
        try:
            gpt_response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "system", "content": system_prompt}],
                max_tokens=150,
                temperature=0.3
            )
            
            ai_answer = gpt_response.choices[0].message.content
            
            # Extrakce sk√≥re - robustn√≠ regex pro r≈Øzn√© form√°ty
            import re
            score_match = re.search(r'\[SK√ìRE:\s*(\d+)%?\]', ai_answer, re.IGNORECASE)
            current_score = int(score_match.group(1)) if score_match else 0
            
            # Vyƒçistƒõn√≠ feedback od sk√≥re tagu
            clean_feedback = re.sub(r'\[SK√ìRE:\s*\d+%?\]', '', ai_answer, flags=re.IGNORECASE).strip()
            
            # Log pro debug AI odpovƒõdi
            logger.info(f"ü§ñ AI raw odpovƒõƒè: '{ai_answer}'")
            logger.info(f"üéØ Extrahovan√© sk√≥re: {current_score}%")
            logger.info(f"üí¨ ƒåist√Ω feedback: '{clean_feedback}'")
            
            # Vylep≈°en√© logov√°n√≠ p≈ôed ulo≈æen√≠m odpovƒõdi
            log_answer_analysis(
                user_id=current_user.id,
                question=current_question,
                user_answer=speech_result,
                ai_score=current_score,
                ai_feedback=clean_feedback,
                confidence=confidence_float
            )
            
            # Ulo≈æen√≠ odpovƒõdi a posun
            updated_session = save_answer_and_advance(
                test_session.id, 
                speech_result, 
                float(current_score), 
                clean_feedback,
                test_session.current_question_index  # P≈ôid√°n chybƒõj√≠c√≠ parametr
            )
            
            if updated_session and updated_session.get('is_completed'):
                # Test dokonƒçen
                final_score = updated_session.get('current_score', 0)
                total_questions = len(updated_session.get('answers', []))
                
                if final_score >= 90:
                    current_user.current_lesson_level = 1
                    session.commit()
                    final_message = f"{clean_feedback} Test dokonƒçen! Sk√≥re: {final_score:.1f}% z {total_questions} ot√°zek. Gratulujeme, postoupili jste do Lekce 1!"
                else:
                    final_message = f"{clean_feedback} Test dokonƒçen. Sk√≥re: {final_score:.1f}% z {total_questions} ot√°zek. Pro postup pot≈ôebujete 90%. M≈Ø≈æete zkusit znovu!"
                
                # Pou≈æij p≈ôirozenƒõj≈°√≠ pauzy pro fin√°ln√≠ zpr√°vu
                final_message_with_pauses = create_natural_speech_response(final_message)
                response.say(final_message_with_pauses, language="cs-CZ", rate="0.8")
                return False  # Ukonƒçit konverzaci
            else:
                # Dal≈°√≠ ot√°zka - pou≈æij adaptivn√≠ v√Ωbƒõr
                next_question = get_next_adaptive_question(updated_session)
                if next_question:
                    # Aktualizace indexu v datab√°zi
                    test_session = session.query(TestSession).get(updated_session['id'])
                    test_session.current_question_index = next_question['original_index']
                    session.commit()
                    
                    difficulty_indicator = {"easy": "‚≠ê", "medium": "‚≠ê‚≠ê", "hard": "‚≠ê‚≠ê‚≠ê"}.get(
                        next_question.get('difficulty', 'medium'), "‚≠ê‚≠ê"
                    )
                    
                    next_text = f"{clean_feedback} Dal≈°√≠ ot√°zka {difficulty_indicator}: {next_question.get('question', '')}"
                    # Pou≈æij p≈ôirozenƒõj≈°√≠ pauzy
                    next_text_with_pauses = create_natural_speech_response(next_text)
                    response.say(next_text_with_pauses, language="cs-CZ", rate="0.8")
                    return True  # Pokraƒçovat
                else:
                    response.say("V≈°echny ot√°zky zodpovƒõzeny. Test konƒç√≠.", language="cs-CZ", rate="0.8")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå AI chyba: {e}")
            response.say("Chyba p≈ôi vyhodnocov√°n√≠ odpovƒõdi.", language="cs-CZ")
            return False


def log_answer_analysis(user_id: int, question: dict, user_answer: str, ai_score: int, ai_feedback: str, confidence: float):
    """Detailn√≠ logov√°n√≠ odpovƒõdi pro anal√Ωzu typick√Ωch chyb"""
    try:
        question_text = question.get('question', 'N/A')
        correct_answer = question.get('correct_answer', 'N/A')
        keywords = question.get('keywords', [])
        
        logger.info(f"""
üìä === ANAL√ùZA ODPOVƒöDI ===
üë§ User ID: {user_id}
‚ùì Ot√°zka: {question_text}
‚úÖ Spr√°vn√° odpovƒõƒè: {correct_answer}
üîë Kl√≠ƒçov√° slova: {', '.join(keywords) if keywords else '≈æ√°dn√°'}
üí¨ Odpovƒõƒè u≈æivatele: '{user_answer}'
üéØ AI sk√≥re: {ai_score}%
üìù AI feedback: {ai_feedback}
üé§ Speech confidence: {confidence:.2f}
üìè D√©lka odpovƒõdi: {len(user_answer)} znak≈Ø, {len(user_answer.split())} slov
===========================""")
        
        # Anal√Ωza typick√Ωch probl√©m≈Ø
        issues = []
        
        # P≈ô√≠li≈° kr√°tk√° odpovƒõƒè
        if len(user_answer.split()) < 2:
            issues.append("KR√ÅTK√Å_ODPOVƒöƒé")
        
        # N√≠zk√° confidence
        if confidence < 0.3:
            issues.append("N√çZK√Å_CONFIDENCE")
        elif confidence < 0.5:
            issues.append("ST≈òEDN√ç_CONFIDENCE")
        
        # N√≠zk√© sk√≥re
        if ai_score < 30:
            issues.append("VELMI_N√çZK√â_SK√ìRE")
        elif ai_score < 60:
            issues.append("N√çZK√â_SK√ìRE")
        
        # Detailn√≠ anal√Ωza kl√≠ƒçov√Ωch slov
        if keywords:
            found_keywords = []
            missing_keywords = []
            
            for kw in keywords:
                kw_lower = kw.lower()
                answer_lower = user_answer.lower()
                found_match = False
                match_type = ""
                
                # 1. P≈òESN√Å SHODA
                if kw_lower in answer_lower:
                    found_keywords.append(kw)
                    found_match = True
                    match_type = "p≈ôesn√°"
                
                # 2. SUBSTRING MATCHING (hotfix) - kl√≠ƒçov√© slovo jako souƒç√°st del≈°√≠ho slova
                elif not found_match:
                    # Hledej kl√≠ƒçov√© slovo jako substring v libovoln√©m slovƒõ odpovƒõdi
                    words_in_answer = answer_lower.split()
                    for word in words_in_answer:
                        if kw_lower in word or word in kw_lower:
                            found_keywords.append(f"{kw}({word})")
                            found_match = True
                            match_type = "substring"
                            break
                
                # 3. SYNONYMA A VARIANTY (roz≈°√≠≈ôen√Ω seznam)
                if not found_match:
                    synonyms = {
                        'chlazen√≠': ['hlazen√≠', 'chladƒõn√≠', 'ochlazov√°n√≠', 'chlazen', 'ochlazov√°n'],
                        'maz√°n√≠': ['mazan√≠', 'lubrication', 'lubrikace', 'mazan', 'maz√°n'],
                        'odvod': ['odveden√≠', 'odv√°dƒõn√≠', 'odv√°dƒõn', 'odv√°dƒõn√Ω'],
                        'refraktometr': ['refraktometric', 'refraktometrick√Ω', 'refraktometr≈Ø'],
                        'koncentrace': ['koncentrac', 'koncentraci', 'koncentrovat'],
                        'bakterie': ['bakteri√≠', 'bakteri√°ln√≠ho', 'mikroorganismy'],
                        'pH': ['ph', 'kyselost', 'kysel√°', 'z√°sadit√°'],
                        'emulze': ['emulzn√≠', 'emulgovat', 'emulgovan√Ω'],
                        'separ√°tor': ['separ√°tor oleje', 'separ√°torem', 'oper√°torem', 'oper√°tor', 'repar√°tor', 'repar√°torem'],
                        'odstranƒõn√≠': ['odstranit', 'odstra≈àuje', 'odstranƒõno', 'odstra≈àov√°n√≠'],
                        'skimmer': ['skimmerem', 'skimmeru', 'skimmer']
                    }
                    
                    if kw_lower in synonyms:
                        for syn in synonyms[kw_lower]:
                            if syn in answer_lower:
                                found_keywords.append(f"{kw}({syn})")
                                found_match = True
                                match_type = "synonymum"
                                break
                
                # 4. POKUD NEBYLO NALEZENO
                if not found_match:
                    missing_keywords.append(kw)
                    
                # Log pro debug
                if found_match:
                    logger.debug(f"‚úì '{kw}' nalezeno jako {match_type}: {found_keywords[-1]}")
            
            # V√Ωpoƒçet pokryt√≠ kl√≠ƒçov√Ωch slov
            keyword_coverage = len(found_keywords) / len(keywords) * 100 if keywords else 0
            
            if not found_keywords:
                issues.append("≈Ω√ÅDN√Å_KL√çƒåOV√Å_SLOVA")
            elif keyword_coverage < 50:
                issues.append("M√ÅLO_KL√çƒåOV√ùCH_SLOV")
                
            # Detailn√≠ breakdown matchingu
            exact_matches = [kw for kw in found_keywords if '(' not in str(kw)]
            fuzzy_matches = [kw for kw in found_keywords if '(' in str(kw)]
            
            logger.info(f"üîç ANAL√ùZA KL√çƒåOV√ùCH SLOV ({len(found_keywords)}/{len(keywords)}):")
            logger.info(f"  ‚úÖ P≈ôesn√© shody: {exact_matches}")
            logger.info(f"  üîÑ Fuzzy/substring shody: {fuzzy_matches}")
            logger.info(f"  ‚ùå Chybƒõj√≠c√≠: {missing_keywords}")
            logger.info(f"üìä Celkov√© pokryt√≠: {keyword_coverage:.1f}%")
        
        if issues:
            logger.warning(f"‚ö†Ô∏è Identifikovan√© probl√©my: {', '.join(issues)}")
        else:
            logger.info(f"‚úÖ Odpovƒõƒè bez evidentn√≠ch probl√©m≈Ø")
            
    except Exception as e:
        logger.error(f"‚ùå Chyba p≈ôi logov√°n√≠ anal√Ωzy: {e}")


async def handle_regular_lesson(session, current_user, user_level, speech_result, response, client):
    """Zpracov√°n√≠ bƒõ≈æn√Ωch lekc√≠ (1+)"""
    logger.info(f"üìö Zpracov√°v√°m lekci √∫rovnƒõ {user_level}")
    
    # Najdi lekci podle ƒç√≠sla
    target_lesson = session.query(Lesson).filter(
        Lesson.lesson_number == user_level
    ).first()
    
    if not target_lesson:
        # Fallback - najdi podle √∫rovnƒõ
        target_lesson = session.query(Lesson).filter(
            Lesson.level == "beginner"
        ).first()
    
    if not target_lesson:
        response.say(f"Lekce {user_level} nebyla nalezena. Kontaktujte administr√°tora.", language="cs-CZ")
        return False
    
    logger.info(f"‚úÖ Nalezena lekce: {target_lesson.title}")
    
    # Obecn√° konverzace nebo testov√°n√≠
    lesson_content = target_lesson.script or target_lesson.description or ""
    
    # Jednoduch√Ω AI chat o lekci
    system_prompt = f"""Jsi AI lektor pro lekci: {target_lesson.title}

OBSAH LEKCE:
{lesson_content[:800]}

INSTRUKCE:
1. Odpov√≠dej na ot√°zky studenta o lekci
2. Buƒè vƒõcn√Ω a srozumiteln√Ω
3. Pokud student chce test, p≈ôiprav ot√°zku
4. Udr≈æuj rozhovor aktivn√≠

Student ≈ôekl: "{speech_result}"
Odpovƒõz mu v ƒçe≈°tinƒõ (max 2 vƒõty)."""
    
    try:
        gpt_response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "system", "content": system_prompt}],
            max_tokens=200,
            temperature=0.6
        )
        
        ai_answer = gpt_response.choices[0].message.content
        response.say(ai_answer, language="cs-CZ", rate="0.9")
        return True  # Pokraƒçovat v konverzaci
        
    except Exception as e:
        logger.error(f"‚ùå AI chyba: {e}")
        response.say("Chyba p≈ôi zpracov√°n√≠ dotazu.", language="cs-CZ")
        return False

@app.post("/voice/start-stream/")
async def voice_start_stream(request: Request):
    """TwiML odpovƒõƒè s <Start><Stream> pro Media Streams (obousmƒõrnƒõ)."""
    response = """
<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Say language="cs-CZ" rate="0.9" voice="Google.cs-CZ-Standard-A">
        V√≠tejte u AI asistenta pro v√Ωuku jazyk≈Ø.
    </Say>
    <Start>
        <Stream url="wss://lecture-app-production.up.railway.app/audio" track="both" />
    </Start>
</Response>
"""
    return Response(content=response, media_type="text/xml")

# Pomocn√° funkce pro pr√°ci s OpenAI Assistant
async def get_assistant_info(client, assistant_id: str):
    """Z√≠sk√° informace o OpenAI asistentovi"""
    try:
        assistant = await client.beta.assistants.retrieve(assistant_id)
        logger.info(f"Assistant info - ID: {assistant.id}, Name: {assistant.name}, Model: {assistant.model}")
        return assistant
    except Exception as e:
        logger.error(f"Chyba p≈ôi z√≠sk√°v√°n√≠ informac√≠ o asistentovi {assistant_id}: {e}")
        return None

async def wav_to_mulaw(audio_data: bytes) -> bytes:
    """P≈ôevede WAV audio na Œº-law form√°t pro Twilio"""
    try:
        from pydub import AudioSegment
        
        # Naƒçteme WAV audio
        audio_segment = AudioSegment.from_wav(io.BytesIO(audio_data))
        
        # P≈ôevedeme na 8kHz mono
        audio_segment = audio_segment.set_frame_rate(8000).set_channels(1)
        
        # P≈ôevedeme na Œº-law
        raw_audio = audio_segment.raw_data
        mulaw_audio = audioop.lin2ulaw(raw_audio, 2)  # 2 bytes per sample
        
        return mulaw_audio
    except Exception as e:
        logger.error(f"Chyba p≈ôi p≈ôevodu WAV na Œº-law: {e}")
        return b""

async def send_tts_to_twilio(websocket: WebSocket, text: str, stream_sid: str, client):
    """Ode≈°le TTS audio do Twilio WebSocket streamu"""
    try:
        # Kontrola jestli je WebSocket st√°le p≈ôipojen
        try:
            # Ping test pro ovƒõ≈ôen√≠ p≈ôipojen√≠
            await websocket.ping()
            logger.debug("TTS: WebSocket ping OK")
        except Exception as ping_error:
            logger.warning(f"TTS: WebSocket ping failed: {ping_error}")
            logger.warning("WebSocket nen√≠ p≈ôipojen, p≈ôeskakujem TTS")
            return
            
        logger.info(f"üîä Generuji TTS pro text: '{text[:50]}...'")
        
        # Generace TTS pomoc√≠ OpenAI
        response = client.audio.speech.create(
            model="tts-1",
            voice="nova",
            input=text,
            response_format="wav"
        )
        
        # P≈ôevod na G.711 Œº-law pro Twilio
        audio_data = response.content
        
        # Zde by mƒõla b√Ωt konverze na G.711, ale pro jednoduchost pou≈æijeme base64
        import base64
        audio_b64 = base64.b64encode(audio_data).decode()
        
        # Rozdƒõl√≠me na chunky a po≈°leme
        chunk_size = 1000  # Base64 chunky
        for i in range(0, len(audio_b64), chunk_size):
            chunk = audio_b64[i:i+chunk_size]
            
            media_message = {
                "event": "media",
                "streamSid": stream_sid,
                "media": {
                    "payload": chunk
                }
            }
            
            if stream_sid:  # Pouze pokud m√°me stream_sid
                await websocket.send_text(json.dumps(media_message))
                await asyncio.sleep(0.05)  # 50ms mezi chunky
        
        logger.info("‚úÖ TTS audio odesl√°no")
        
    except Exception as e:
        logger.error(f"Chyba p≈ôi TTS: {e}")

async def process_audio_chunk(websocket: WebSocket, audio_data: bytes, 
                             stream_sid: str, client, assistant_id: str, thread_id: str):
    """Zpracuje audio chunk pomoc√≠ OpenAI Assistant API v real-time"""
    try:
        logger.info(f"üéß === PROCESS_AUDIO_CHUNK SPU≈†TƒöN === ({len(audio_data)} bajt≈Ø)")
        
        if len(audio_data) < 1000:  # P≈ô√≠li≈° mal√Ω chunk, ignorujeme
            logger.info(f"‚ö†Ô∏è P≈ô√≠li≈° mal√Ω chunk ({len(audio_data)} bajt≈Ø), ignoruji")
            return
            
        logger.info(f"üéß Zpracov√°v√°m audio chunk ({len(audio_data)} bajt≈Ø)")
        
        # Ulo≈æ√≠me audio do doƒçasn√©ho souboru
        import tempfile
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmp_file:
            logger.info("üìÅ Vytv√°≈ô√≠m doƒçasn√Ω WAV soubor")
            # Vytvo≈ô√≠me jednoduch√Ω WAV header pro Œº-law audio
            import struct
            
            # WAV header pro Œº-law, 8kHz, mono
            wav_header = struct.pack('<4sI4s4sIHHIIHH4sI',
                b'RIFF', len(audio_data) + 44 - 8,  # File size
                b'WAVE',
                b'fmt ', 16,  # Format chunk size
                7,  # Œº-law format
                1,  # Mono
                8000,  # Sample rate
                8000,  # Byte rate
                1,  # Block align
                8,  # Bits per sample
                b'data', len(audio_data)
            )
            
            tmp_file.write(wav_header)
            tmp_file.write(audio_data)
            tmp_file_path = tmp_file.name
            logger.info(f"üìÅ WAV soubor vytvo≈ôen: {tmp_file_path}")
        
        try:
            logger.info("üé§ Spou≈°t√≠m Whisper STT...")
            # OpenAI Whisper pro STT
            with open(tmp_file_path, "rb") as audio_file:
                transcript = client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file,
                    language="cs"
                )
            
            user_text = transcript.text.strip()
            logger.info(f"üìù Transkripce DOKONƒåENA: '{user_text}'")
            
            if not user_text or len(user_text) < 3:
                logger.info("‚ö†Ô∏è P≈ô√≠li≈° kr√°tk√° transkripce, ignoruji")
                return
            
            logger.info("ü§ñ P≈ôid√°v√°m zpr√°vu do Assistant threadu...")
            # P≈ôid√°me zpr√°vu do threadu
            client.beta.threads.messages.create(
                thread_id=thread_id,
                role="user",
                content=user_text
            )
            
            logger.info("üöÄ Spou≈°t√≠m Assistant run...")
            # Spust√≠me asistenta
            run = client.beta.threads.runs.create(
                thread_id=thread_id,
                assistant_id=assistant_id
            )
            
            logger.info(f"‚è≥ ƒåek√°m na dokonƒçen√≠ Assistant run (ID: {run.id})...")
            # ƒåek√°me na dokonƒçen√≠ (s timeout)
            import time
            max_wait = 15  # 15 sekund timeout pro rychlej≈°√≠ odpovƒõƒè
            start_time = time.time()
            
            while run.status in ["queued", "in_progress"] and (time.time() - start_time) < max_wait:
                await asyncio.sleep(0.5)  # Krat≈°√≠ interval pro rychlej≈°√≠ odpovƒõƒè
                run = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
                logger.info(f"‚è≥ Run status: {run.status}")
            
            if run.status == "completed":
                logger.info("‚úÖ Assistant run DOKONƒåEN! Z√≠sk√°v√°m odpovƒõƒè...")
                # Z√≠sk√°me nejnovƒõj≈°√≠ odpovƒõƒè
                messages = client.beta.threads.messages.list(thread_id=thread_id, limit=1)
                
                for message in messages.data:
                    if message.role == "assistant":
                        for content in message.content:
                            if content.type == "text":
                                assistant_response = content.text.value
                                logger.info(f"ü§ñ Assistant odpovƒõƒè Z√çSK√ÅNA: '{assistant_response}'")
                                
                                # Po≈°leme jako TTS
                                logger.info("üîä Odes√≠l√°m TTS odpovƒõƒè...")
                                await send_tts_to_twilio(websocket, assistant_response, stream_sid, client)
                                logger.info("‚úÖ TTS odpovƒõƒè ODESL√ÅNA!")
                                return
                
                logger.warning("‚ö†Ô∏è ≈Ω√°dn√° assistant odpovƒõƒè nenalezena")
            else:
                logger.warning(f"‚ö†Ô∏è Assistant run ne√∫spƒõ≈°n√Ω: {run.status}")
                
        finally:
            # Vyƒçist√≠me doƒçasn√Ω soubor
            import os
            try:
                os.unlink(tmp_file_path)
                logger.info("üóëÔ∏è Doƒçasn√Ω soubor vymaz√°n")
            except:
                pass
                
    except Exception as e:
        logger.error(f"‚ùå CHYBA p≈ôi zpracov√°n√≠ audio: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")

@app.websocket("/audio-test")
async def audio_stream_test(websocket: WebSocket):
    """Jednoduch√Ω test WebSocket handler bez OpenAI p≈ôipojen√≠"""
    await websocket.accept()
    logger.info("=== AUDIO TEST WEBSOCKET HANDLER SPU≈†TƒöN ===")
    
    try:
        while True:
            # ƒåek√°me na zpr√°vu od klienta
            data = await websocket.receive_text()
            logger.info(f"P≈ôijata zpr√°va: {data[:100]}...")
            
            # Parsujeme JSON
            try:
                message = json.loads(data)
                event_type = message.get("event", "unknown")
                logger.info(f"Event type: {event_type}")
                
                if event_type == "start":
                    logger.info("Start event - odes√≠l√°m odpovƒõƒè")
                    response = {
                        "event": "test_response",
                        "message": "Test WebSocket funguje!"
                    }
                    await websocket.send_text(json.dumps(response))
                    
                elif event_type == "media":
                    logger.info("Media event - ignoruji")
                    
                elif event_type == "stop":
                    logger.info("Stop event - ukonƒçuji")
                    break
                    
            except json.JSONDecodeError as e:
                logger.error(f"Chyba p≈ôi parsov√°n√≠ JSON: {e}")
                
    except WebSocketDisconnect:
        logger.info("WebSocket odpojen√≠")
    except Exception as e:
        logger.error(f"Chyba v test handleru: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
    finally:
        logger.info("=== AUDIO TEST WEBSOCKET HANDLER UKONƒåEN ===")

@app.websocket("/audio")
async def audio_stream(websocket: WebSocket):
    """WebSocket endpoint pro Twilio Media Stream s robustn√≠m connection managementem"""
    
    # PRINT pro Railway stdout
    print("üöÄ === AUDIO_STREAM FUNKCE SPU≈†TƒöNA! ===")
    print(f"üîó WebSocket client: {websocket.client}")
    print(f"üìã WebSocket headers: {dict(websocket.headers)}")
    
    logger.info("üöÄ === AUDIO_STREAM FUNKCE SPU≈†TƒöNA! ===")
    logger.info(f"üîó WebSocket client: {websocket.client}")
    logger.info(f"üìã WebSocket headers: {dict(websocket.headers)}")
    
    # KRITICK√â: Mus√≠me nejprve p≈ôijmout WebSocket p≈ôipojen√≠
    try:
        await websocket.accept()
        print("‚úÖ DEBUG: WebSocket connection accepted.")
        logger.info("‚úÖ DEBUG: WebSocket connection accepted.")
    except Exception as accept_error:
        print(f"‚ùå CHYBA p≈ôi websocket.accept(): {accept_error}")
        logger.error(f"‚ùå CHYBA p≈ôi websocket.accept(): {accept_error}")
        return
        
    # Inicializace OpenAI klienta
    openai_api_key = os.getenv('OPENAI_API_KEY')
    if not openai_api_key:
        logger.error("‚ùå OPENAI_API_KEY nen√≠ nastaven")
        await websocket.close()
        return
        
    logger.info("ü§ñ Inicializuji OpenAI klienta...")
    import openai
    client = openai.OpenAI(api_key=openai_api_key)
    logger.info("‚úÖ OpenAI klient inicializov√°n")
    
    # Vytvo≈ô√≠me nov√©ho assistanta s ƒçesk√Ωmi instrukcemi pro v√Ωuku jazyk≈Ø
    logger.info("üéØ Vytv√°≈ô√≠m nov√©ho Assistant...")
    try:
        assistant = client.beta.assistants.create(
            name="AI Asistent pro v√Ωuku jazyk≈Ø",
            instructions="""Jsi AI asistent pro v√Ωuku jazyk≈Ø. Komunikuje≈° POUZE v ƒçe≈°tinƒõ.

TVOJE ROLE:
- Pom√°h√°≈° student≈Øm s v√Ωukou jazyk≈Ø
- Mluv√≠≈° pouze ƒçesky, p≈ôirozenƒõ a srozumitelnƒõ
- Jsi trpƒõliv√Ω, povzbuzuj√≠c√≠ a p≈ô√°telsk√Ω
- Odpov√≠d√°≈° struƒçnƒõ a jasnƒõ

TVOJE √öKOLY:
- Odpov√≠dej na ot√°zky student≈Ø
- Vysvƒõtluj jazykov√© koncepty
- Poskytuj zpƒõtnou vazbu na odpovƒõdi
- Klade≈° jednoduch√© ot√°zky pro ovƒõ≈ôen√≠ porozumƒõn√≠
- Buƒè konstruktivn√≠ a motivuj√≠c√≠

STYL KOMUNIKACE:
- Pou≈æ√≠vej p≈ôirozen√Ω konverzaƒçn√≠ styl
- Kr√°tk√©, srozumiteln√© vƒõty
- Pozitivn√≠ p≈ô√≠stup
- Pokud student nƒõco nev√≠, vysvƒõtli to jednodu≈°e

V≈ædy z≈Øst√°vaj v roli uƒçitele jazyk≈Ø a komunikuj pouze v ƒçe≈°tinƒõ.""",
            model="gpt-4-1106-preview",
            tools=[]
        )
        assistant_id = assistant.id
        logger.info(f"‚úÖ Vytvo≈ôen nov√Ω Assistant: {assistant_id}")
    except Exception as e:
        logger.error(f"‚ùå Chyba p≈ôi vytv√°≈ôen√≠ Assistanta: {e}")
        # Fallback na existuj√≠c√≠ Assistant
        assistant_id = "asst_W6120kPP1lLBzU5OQLYvH6W1"
        logger.info(f"üîÑ Pou≈æ√≠v√°m existuj√≠c√≠ Assistant: {assistant_id}")
    
    thread = None
    
    try:
        logger.info("=== AUDIO WEBSOCKET HANDLER SPU≈†TƒöN ===")
        
        # Vytvo≈ô√≠me nov√Ω thread pro konverzaci
        thread = client.beta.threads.create()
        logger.info(f"‚úÖ Thread vytvo≈ôen: {thread.id}")
        
        # Inicializace promƒõnn√Ωch
        stream_sid = None
        audio_buffer = bytearray()
        
        # √övodn√≠ zpr√°va - poƒçk√°me na stream_sid
        initial_message = "Ahoj! Jsem AI asistent pro v√Ωuku jazyk≈Ø. Jak v√°m mohu pomoci?"
        initial_message_sent = False
        
        # Okam≈æit√° √∫vodn√≠ zpr√°va (bez ƒçek√°n√≠ na stream_sid)
        welcome_message = "P≈ôipojuji se k AI asistentovi. Moment pros√≠m."
        welcome_sent = False
        
        # Keepalive task pro udr≈æen√≠ WebSocket p≈ôipojen√≠
        keepalive_task = None
        websocket_active = True  # Flag pro sledov√°n√≠ stavu p≈ôipojen√≠
        
        async def keepalive_sender():
            """Periodicky odes√≠l√° keepalive zpr√°vy"""
            nonlocal websocket_active
            try:
                while websocket_active:
                    await asyncio.sleep(10)  # Ka≈æd√Ωch 10 sekund
                    
                    if not websocket_active:
                        logger.info("üíì WebSocket neaktivn√≠, ukonƒçujem keepalive")
                        break
                        
                    if stream_sid:
                        try:
                            # Po≈°leme pr√°zdn√Ω media chunk jako keepalive
                            keepalive_msg = {
                                "event": "media",
                                "streamSid": stream_sid,
                                "media": {
                                    "payload": ""  # Pr√°zdn√Ω payload
                                }
                            }
                            await websocket.send_text(json.dumps(keepalive_msg))
                            logger.info("üíì Keepalive odesl√°no")
                        except Exception as send_error:
                            logger.error(f"üíì Keepalive send error: {send_error}")
                            websocket_active = False
                            break
            except Exception as e:
                logger.error(f"Keepalive chyba: {e}")
        
        # Hlavn√≠ smyƒçka pro zpracov√°n√≠ WebSocket zpr√°v
        while websocket_active:
            try:
                logger.info("üîÑ DEBUG: ƒåek√°m na WebSocket data...")
                
                # Kontrola stavu WebSocket p≈ôed ƒçten√≠m
                try:
                    # Pokus√≠me se o rychl√Ω ping test
                    await websocket.ping()
                    logger.info("‚úÖ DEBUG: WebSocket ping OK")
                except Exception as ping_error:
                    logger.info(f"‚ùå DEBUG: WebSocket ping failed: {ping_error}")
                    logger.info("DEBUG: WebSocket je pravdƒõpodobnƒõ zav≈ôen, ukonƒçujem smyƒçku")
                    websocket_active = False
                    break
                
                logger.info("üì• DEBUG: Vol√°m websocket.receive_text()...")
                data = await websocket.receive_text()
                logger.info(f"üì® DEBUG: P≈ôijata data ({len(data)} znak≈Ø): {data[:200]}...")
                
                try:
                    msg = json.loads(data)
                    logger.info(f"‚úÖ DEBUG: JSON parsov√°n√≠ OK")
                    event = msg.get("event", "unknown")
                    logger.info(f"üéØ DEBUG: Event typ: '{event}'")
                except json.JSONDecodeError as json_error:
                    logger.error(f"‚ùå DEBUG: JSON parsing CHYBA: {json_error}")
                    logger.error(f"‚ùå DEBUG: Problematick√° data: {data}")
                    continue
                
                if event == "start":
                    logger.info("=== MEDIA STREAM START EVENT P≈òIJAT! ===")
                    stream_sid = msg.get("streamSid")
                    logger.info(f"Stream SID: {stream_sid}")
                    
                    # Spust√≠me keepalive task
                    if not keepalive_task:
                        keepalive_task = asyncio.create_task(keepalive_sender())
                        logger.info("üíì Keepalive task spu≈°tƒõn")
                    
                    # Po≈°leme okam≈æitou welcome zpr√°vu
                    if not welcome_sent:
                        logger.info("üîä Odes√≠l√°m welcome zpr√°vu")
                        await send_tts_to_twilio(websocket, welcome_message, stream_sid, client)
                        welcome_sent = True
                    
                    # Po≈°leme √∫vodn√≠ zpr√°vu po kr√°tk√© pauze
                    if not initial_message_sent:
                        await asyncio.sleep(3)  # Kr√°tk√° pauza po welcome zpr√°vƒõ
                        logger.info("üîä Odes√≠l√°m √∫vodn√≠ zpr√°vu")
                        await send_tts_to_twilio(websocket, initial_message, stream_sid, client)
                        initial_message_sent = True
                    
                elif event == "media":
                    logger.info(f"üéµ MEDIA EVENT P≈òIJAT! Track: {msg['media'].get('track', 'unknown')}")
                    payload = msg["media"]["payload"]
                    track = msg["media"]["track"]
                    
                    if track == "inbound":
                        logger.info("üì• INBOUND TRACK - zpracov√°v√°m audio data")
                        # Real-time zpracov√°n√≠ - zpracujeme audio ihned
                        audio_data = base64.b64decode(payload)
                        audio_buffer.extend(audio_data)
                        
                        logger.info(f"üìä Audio buffer: {len(audio_buffer)} bajt≈Ø")
                        
                        # Zpracujeme audio ka≈æd√Ωch 800 bajt≈Ø (~1 sekunda audio p≈ôi 8kHz)
                        if len(audio_buffer) >= 800:  # ~1 sekunda audio p≈ôi 8kHz
                            logger.info(f"üéß Zpracov√°v√°m audio chunk ({len(audio_buffer)} bajt≈Ø) - PR√ÅH DOSA≈ΩEN!")
                            
                            # Zkop√≠rujeme buffer p≈ôed vymaz√°n√≠m
                            audio_to_process = bytes(audio_buffer)
                            audio_buffer.clear()
                            
                            # Zpracujeme audio v background tasku
                            asyncio.create_task(
                                process_audio_chunk(
                                    websocket, audio_to_process, stream_sid, 
                                    client, assistant_id, thread.id
                                )
                            )
                    else:
                        logger.info(f"üì§ OUTBOUND TRACK - ignoruji (track: {track})")
                    
                elif event == "stop":
                    logger.info("Media Stream ukonƒçen")
                    websocket_active = False
                    
                    # Zpracujeme zb√Ωvaj√≠c√≠ audio i kdy≈æ je mal√©
                    if audio_buffer and len(audio_buffer) > 100:  # Alespo≈à 100 bajt≈Ø
                        logger.info(f"üéß Zpracov√°v√°m zb√Ωvaj√≠c√≠ audio ({len(audio_buffer)} bajt≈Ø)")
                        await process_audio_chunk(
                            websocket, bytes(audio_buffer), stream_sid, 
                            client, assistant_id, thread.id
                        )
                    break
                    
            except json.JSONDecodeError as e:
                logger.error(f"DEBUG: Neplatn√Ω JSON z Twilia: {e}")
            except RuntimeError as e:
                if "Need to call \"accept\" first" in str(e):
                    logger.error(f"DEBUG: WebSocket nebyl p≈ôijat nebo byl zav≈ôen: {e}")
                else:
                    logger.error(f"DEBUG: WebSocket runtime error: {e}")
                websocket_active = False
                break
            except Exception as e:
                error_msg = str(e)
                logger.error(f"DEBUG: Chyba p≈ôi zpracov√°n√≠ zpr√°vy: {error_msg}")
                
                # Zkontrolujeme r≈Øzn√© typy WebSocket chyb
                if any(keyword in error_msg.lower() for keyword in [
                    "websocket", "disconnect", "connection", "closed", "broken pipe"
                ]):
                    logger.info("DEBUG: Detekov√°no WebSocket odpojen√≠")
                    websocket_active = False
                    break
                    
                # Pro ostatn√≠ chyby pokraƒçujeme
                continue
                    
    except Exception as e:
        logger.error(f"Chyba v Assistant API handleru: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
    finally:
        # Oznaƒç√≠me WebSocket jako neaktivn√≠
        if 'websocket_active' in locals():
            websocket_active = False
        
        # Vyƒçist√≠me keepalive task
        if 'keepalive_task' in locals() and keepalive_task and not keepalive_task.done():
            keepalive_task.cancel()
            logger.info("üíì Keepalive task ukonƒçen")
        
        # Vyƒçist√≠me thread
        if thread:
            try:
                client.beta.threads.delete(thread.id)
                logger.info(f"Thread {thread.id} smaz√°n")
            except:
                pass
        
        logger.info("=== AUDIO WEBSOCKET HANDLER UKONƒåEN ===")

@app.websocket("/voice/media-stream")
async def media_stream(websocket: WebSocket):
    logger.info("=== MEDIA STREAM WEBSOCKET HANDLER SPU≈†TƒöN ===")
    logger.info(f"WebSocket client: {websocket.client}")
    logger.info(f"WebSocket headers: {websocket.headers}")
    logger.info(f"WebSocket query params: {websocket.query_params}")
    
    await websocket.accept()
    logger.info("=== WEBSOCKET ACCEPTED - ƒåEK√ÅM NA TWILIO DATA ===")
    
    # Inicializace slu≈æeb
    from app.services.openai_service import OpenAIService
    from app.services.twilio_service import TwilioService
    openai_service = OpenAIService()
    twilio_service = TwilioService()
    
    # Stav konverzace
    conversation_state = {
        "phase": "introduction",  # introduction, teaching, questioning, evaluation
        "current_question_index": 0,
        "questions": [],
        "user_answers": [],
        "attempt_id": None,
        "user_id": None,
        "lesson_id": None,
        "lesson": None,
        "audio_buffer": b"",
        "last_audio_time": None
    }
    
    async def safe_send_text(msg):
        try:
            await websocket.send_text(msg)
        except Exception as e:
            logger.error(f"[safe_send_text] WebSocket nen√≠ p≈ôipojen: {e}")

    async def process_audio_and_respond(websocket, conversation_state, openai_service, twilio_service):
        """Zpracuje audio buffer a odpov√≠ podle f√°ze konverzace."""
        try:
            # P≈ôevod audia na text
            audio_text = openai_service.speech_to_text(
                conversation_state["audio_buffer"], 
                language=conversation_state["lesson"].language if conversation_state["lesson"] else "cs"
            )
            
            if not audio_text.strip():
                logger.info("Pr√°zdn√Ω audio - ignoruji")
                conversation_state["audio_buffer"] = b""
                return
            
            logger.info(f"P≈ôepsan√Ω text: {audio_text}")
            
            # Zpracov√°n√≠ podle f√°ze konverzace
            if conversation_state["phase"] == "introduction":
                # P≈ôechod do f√°ze v√Ωuky
                conversation_state["phase"] = "teaching"
                await send_twiml_response(websocket, twilio_service.create_teaching_response(
                    conversation_state["lesson"]
                ))
                
            elif conversation_state["phase"] == "teaching":
                # Kontrola, zda u≈æivatel chce p≈ôej√≠t k ot√°zk√°m
                if any(keyword in audio_text.lower() for keyword in ["ot√°zky", "zkou≈°en√≠", "test", "hotovo", "konec"]):
                    conversation_state["phase"] = "questioning"
                    await send_twiml_response(websocket, twilio_service.create_questioning_start_response())
                else:
                    # Odpovƒõƒè na ot√°zku o lekci
                    response = openai_service.answer_user_question(
                        audio_text,
                        current_lesson=conversation_state["lesson"].__dict__ if conversation_state["lesson"] else None,
                        language=conversation_state["lesson"].language if conversation_state["lesson"] else "cs"
                    )
                    await send_twiml_response(websocket, twilio_service.create_chat_response(
                        response["answer"],
                        conversation_state["lesson"].language if conversation_state["lesson"] else "cs"
                    ))
                    
            elif conversation_state["phase"] == "questioning":
                # Zpracov√°n√≠ odpovƒõdi na ot√°zku
                if conversation_state["current_question_index"] < len(conversation_state["questions"]):
                    current_question = conversation_state["questions"][conversation_state["current_question_index"]]
                    
                    # Vyhodnocen√≠ odpovƒõdi
                    evaluation = openai_service.evaluate_voice_answer(
                        current_question["question"],
                        current_question["correct_answer"],
                        audio_text,
                        conversation_state["lesson"].language if conversation_state["lesson"] else "cs"
                    )
                    
                    # Ulo≈æen√≠ odpovƒõdi
                    conversation_state["user_answers"].append({
                        "question": current_question["question"],
                        "correct_answer": current_question["correct_answer"],
                        "user_answer": audio_text,
                        "score": evaluation["score"],
                        "feedback": evaluation["feedback"],
                        "is_correct": evaluation["is_correct"]
                    })
                    
                    # Odpovƒõƒè s feedbackem
                    feedback_text = f"Va≈°e odpovƒõƒè: {evaluation['feedback']}. Sk√≥re: {evaluation['score']}%."
                    await send_twiml_response(websocket, twilio_service.create_feedback_response(
                        feedback_text,
                        conversation_state["lesson"].language if conversation_state["lesson"] else "cs"
                    ))
                    
                    conversation_state["current_question_index"] += 1
                    
                    # Dal≈°√≠ ot√°zka nebo konec
                    if conversation_state["current_question_index"] < len(conversation_state["questions"]):
                        next_question = conversation_state["questions"][conversation_state["current_question_index"]]
                        await send_twiml_response(websocket, twilio_service.create_question_response(
                            next_question["question"],
                            conversation_state["lesson"].language if conversation_state["lesson"] else "cs"
                        ))
                    else:
                        # Konec zkou≈°en√≠
                        conversation_state["phase"] = "evaluation"
                        await send_twiml_response(websocket, twilio_service.create_evaluation_response(
                            conversation_state["user_answers"],
                            conversation_state["lesson"].language if conversation_state["lesson"] else "cs"
                        ))
            
            # Vyƒçi≈°tƒõn√≠ bufferu
            conversation_state["audio_buffer"] = b""
            
        except Exception as e:
            logger.error(f"Chyba p≈ôi zpracov√°n√≠ audia: {e}")
            conversation_state["audio_buffer"] = b""

    async def send_twiml_response(websocket, twiml_content):
        """Po≈°le TwiML odpovƒõƒè zpƒõt do Twilio."""
        try:
            await websocket.send_text(json.dumps({
                "event": "media",
                "streamSid": "placeholder",
                "media": {
                    "payload": twiml_content
                }
            }))
        except Exception as e:
            logger.error(f"Chyba p≈ôi odes√≠l√°n√≠ TwiML: {e}")

    async def save_conversation_results(conversation_state):
        """Ulo≈æ√≠ v√Ωsledky konverzace do datab√°ze."""
        if not conversation_state["attempt_id"]:
            return
        
        session = SessionLocal()
        try:
            attempt = session.query(Attempt).get(conversation_state["attempt_id"])
            if attempt and conversation_state["user_answers"]:
                total_score = sum(answer["score"] for answer in conversation_state["user_answers"])
                average_score = total_score / len(conversation_state["user_answers"])
                attempt.score = average_score
                attempt.status = "completed"
                attempt.completed_at = datetime.now()
                attempt.calculate_next_due()
                for i, answer_data in enumerate(conversation_state["user_answers"]):
                    answer = Answer(
                        attempt_id=attempt.id,
                        question_index=i,
                        question_text=answer_data["question"],
                        correct_answer=answer_data["correct_answer"],
                        user_answer=answer_data["user_answer"],
                        score=answer_data["score"],
                        is_correct=answer_data["is_correct"],
                        feedback=answer_data["feedback"]
                    )
                    session.add(answer)
                session.commit()
                logger.info(f"Ulo≈æeny v√Ωsledky pro pokus {attempt.id}, pr≈Ømƒõrn√© sk√≥re: {average_score:.1f}%")
        except Exception as e:
            session.rollback()
            logger.error(f"Chyba p≈ôi ukl√°d√°n√≠ v√Ωsledk≈Ø: {e}")
        finally:
            session.close() 

# Konfigurace pro produkci s del≈°√≠mi WebSocket timeouty
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=int(os.getenv("PORT", 8000)),
        ws_ping_interval=30,  # Ping ka≈æd√Ωch 30 sekund
        ws_ping_timeout=10,   # Timeout pro ping odpovƒõƒè 10 sekund
        timeout_keep_alive=65  # Keep-alive timeout 65 sekund
    ) 

@app.get("/test-websocket")
async def test_websocket():
    """Test endpoint pro ovƒõ≈ôen√≠ WebSocket funkƒçnosti"""
    return {
        "message": "WebSocket test endpoint",
        "websocket_url": "wss://lecture-app-production.up.railway.app/audio",
        "test_url": "wss://lecture-app-production.up.railway.app/audio-test"
    } 

@app.websocket("/test")
async def websocket_test(websocket: WebSocket):
    """Velmi jednoduch√Ω WebSocket test"""
    logger.info("üß™ === WEBSOCKET TEST ENDPOINT SPU≈†TƒöN ===")
    await websocket.accept()
    logger.info("üß™ WebSocket test p≈ôipojen√≠ p≈ôijato")
    
    try:
        while True:
            data = await websocket.receive_text()
            logger.info(f"üß™ Test p≈ôijal: {data}")
            await websocket.send_text(f"Echo: {data}")
    except Exception as e:
        logger.info(f"üß™ Test WebSocket ukonƒçen: {e}")
    finally:
        logger.info("üß™ === WEBSOCKET TEST UKONƒåEN ===") 

@app.get("/websocket-status")
async def websocket_status():
    """Kontrola stavu WebSocket endpoint≈Ø"""
    return {
        "message": "WebSocket status check",
        "endpoints": {
            "audio": "/audio",
            "test": "/test", 
            "audio-test": "/audio-test"
        },
        "railway_websocket_support": "Testing...",
        "timestamp": "2025-07-24T19:15:00Z"
    } 

@app.post("/tts")
async def generate_tts(request: Request):
    """HTTP endpoint pro generov√°n√≠ TTS audio"""
    try:
        data = await request.json()
        text = data.get('text', '')
        
        if not text:
            return {"error": "Missing text parameter"}
        
        logger.info(f"üîä Generuji TTS pro: {text[:50]}...")
        
        # OpenAI TTS
        openai_api_key = os.getenv('OPENAI_API_KEY')
        if not openai_api_key:
            return {"error": "OpenAI API key not configured"}
        
        import openai
        client = openai.OpenAI(api_key=openai_api_key)
        
        response = client.audio.speech.create(
            model="tts-1",
            voice="nova",
            input=text,
            response_format="wav"
        )
        
        # P≈ôevod na base64 pro Twilio
        import base64
        audio_b64 = base64.b64encode(response.content).decode()
        
        logger.info("‚úÖ TTS audio vygenerov√°no")
        
        return {
            "success": True,
            "audio": audio_b64,
            "format": "wav",
            "text": text[:100]
        }
        
    except Exception as e:
        logger.error(f"Chyba p≈ôi TTS: {e}")
        return {"error": str(e)} 

@admin_router.get("/create-lesson-1", name="admin_create_lesson_1")
def admin_create_lesson_1(request: Request):
    """Endpoint pro vytvo≈ôen√≠ Lekce 1 - Z√°klady obr√°bƒõc√≠ch kapalin"""
    try:
        logger.info("üöÄ Vytv√°≈ôen√≠ Lekce 1...")
        
        session = SessionLocal()
        
        # Zkontroluj, jestli u≈æ lekce 1 existuje
        existing_lesson = session.query(Lesson).filter(
            Lesson.title.contains("Lekce 1")
        ).first()
        
        if existing_lesson:
            session.close()
            return templates.TemplateResponse("message.html", {
                "request": request,
                "message": f"‚úÖ Lekce 1 ji≈æ existuje! (ID: {existing_lesson.id})",
                "back_url": "/admin/lessons",
                "back_text": "Zpƒõt na lekce"
            })
        
        # Obsah lekce 1 - Z√°klady obr√°bƒõc√≠ch kapalin
        lesson_script = """
# Lekce 1: Z√°klady obr√°bƒõc√≠ch kapalin

## √övod
Obr√°bƒõc√≠ kapaliny jsou nezbytnou souƒç√°st√≠ modern√≠ho obr√°bƒõn√≠ kov≈Ø. Jejich spr√°vn√© pou≈æit√≠ a √∫dr≈æba v√Ωraznƒõ ovliv≈àuje kvalitu v√Ωroby, ≈æivotnost n√°stroj≈Ø a bezpeƒçnost pr√°ce.

## Hlavn√≠ funkce obr√°bƒõc√≠ch kapalin

### 1. Chlazen√≠
- Odvod tepla vznikaj√≠c√≠ho p≈ôi ≈ôezn√©m procesu
- Zabr√°nƒõn√≠ p≈ôeh≈ô√°t√≠ n√°stroje a obrobku
- Udr≈æen√≠ st√°l√© teploty ≈ôezn√© hrany

### 2. Maz√°n√≠
- Sn√≠≈æen√≠ t≈ôen√≠ mezi n√°strojem a obrobkem
- Zlep≈°en√≠ kvality povrchu
- Prodlou≈æen√≠ ≈æivotnosti n√°stroje

### 3. Odvod t≈ô√≠sek
- Transport t≈ô√≠sek pryƒç z m√≠sta ≈ôezu
- Zabr√°nƒõn√≠ zan√°≈°en√≠ n√°stroje
- Udr≈æen√≠ ƒçistoty ≈ôezn√© z√≥ny

## Typy obr√°bƒõc√≠ch kapalin

### ≈òezn√© oleje
- Vysok√° mazac√≠ schopnost
- Pou≈æit√≠ p≈ôi tƒõ≈æk√©m obr√°bƒõn√≠
- Nevhodn√© pro vysok√© rychlosti

### Emulze (smƒõsi oleje a vody)
- Kombinace maz√°n√≠ a chlazen√≠
- Nejƒçastƒõji pou≈æ√≠van√©
- Koncentrace 3-8%

### Syntetick√© kapaliny
- Bez oleje, pouze chemick√© p≈ô√≠sady
- V√Ωborn√© chladic√≠ vlastnosti
- Dlouh√° ≈æivotnost

## Kontrola a √∫dr≈æba

### Denn√≠ kontrola
- Mƒõ≈ôen√≠ koncentrace refraktometrem
- Kontrola pH hodnoty (8,5-9,5)
- Vizu√°ln√≠ kontrola ƒçistoty

### T√Ωdenn√≠ √∫dr≈æba
- Doplnƒõn√≠ kapaliny
- Odstranƒõn√≠ neƒçistot
- Kontrola bakteri√°ln√≠ kontaminace

### Mƒõs√≠ƒçn√≠ servis
- V√Ωmƒõna filtr≈Ø
- Hloubkov√° anal√Ωza
- P≈ô√≠padn√° regenerace

## Bezpeƒçnost
- Pou≈æ√≠v√°n√≠ ochrann√Ωch pom≈Øcek
- Prevence kontaktu s k≈Ø≈æ√≠
- Spr√°vn√© skladov√°n√≠ a likvidace

## Z√°vƒõr
Spr√°vn√° pr√°ce s obr√°bƒõc√≠mi kapalinami je z√°kladem efektivn√≠ho obr√°bƒõn√≠. Pravideln√° kontrola a √∫dr≈æba zaji≈°≈•uje optim√°ln√≠ v√Ωkon a bezpeƒçnost provozu.
        """
        
        # Vytvo≈ô lekci 1
        lesson = Lesson(
            title="Lekce 1: Z√°klady obr√°bƒõc√≠ch kapalin",
            description="Komplexn√≠ √∫vod do problematiky obr√°bƒõc√≠ch kapalin - funkce, typy, kontrola a √∫dr≈æba.",
            language="cs",
            script=lesson_script,
            questions=[],  # Ot√°zky se budou generovat dynamicky
            level="beginner"
        )
        
        session.add(lesson)
        session.commit()
        lesson_id = lesson.id
        session.close()
        
        logger.info(f"‚úÖ Lekce 1 vytvo≈ôena s ID: {lesson_id}")
        
        return templates.TemplateResponse("message.html", {
            "request": request,
            "message": f"üéâ Lekce 1 √∫spƒõ≈°nƒõ vytvo≈ôena!\n\nüìù ID: {lesson_id}\nüìö Obsah: Z√°klady obr√°bƒõc√≠ch kapalin\nüéØ √örove≈à: Zaƒç√°teƒçn√≠k\n\n‚ö° Ot√°zky se generuj√≠ automaticky p≈ôi testov√°n√≠!",
            "back_url": "/admin/lessons",
            "back_text": "Zobrazit v≈°echny lekce"
        })
        
    except Exception as e:
        logger.error(f"‚ùå Chyba p≈ôi vytv√°≈ôen√≠ Lekce 1: {e}")
        return templates.TemplateResponse("message.html", {
            "request": request,
            "message": f"‚ùå Chyba p≈ôi vytv√°≈ôen√≠ Lekce 1: {str(e)}",
            "back_url": "/admin/lessons",
            "back_text": "Zpƒõt na lekce"
        })

@admin_router.get("/user-progress", response_class=HTMLResponse, name="admin_user_progress")
def admin_user_progress(request: Request):
    """Zobraz√≠ pokrok v≈°ech u≈æivatel≈Ø"""
    session = SessionLocal()
    try:
        users = session.query(User).all()
        
        # P≈ôiprav data o pokroku
        progress_data = []
        for user in users:
            user_level = getattr(user, 'current_lesson_level', 0)
            
            # Najdi n√°zev aktu√°ln√≠ lekce
            current_lesson_name = "Vstupn√≠ test"
            if user_level == 1:
                current_lesson_name = "Lekce 1: Z√°klady"
            elif user_level > 1:
                current_lesson_name = f"Lekce {user_level}"
            
            progress_data.append({
                'user': user,
                'level': user_level,
                'lesson_name': current_lesson_name,
                'attempts_count': len(user.attempts) if hasattr(user, 'attempts') else 0
            })
        
        session.close()
        return templates.TemplateResponse("admin/user_progress.html", {
            "request": request, 
            "progress_data": progress_data
        })
        
    except Exception as e:
        session.close()
        logger.error(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ pokroku: {e}")
        return templates.TemplateResponse("message.html", {
            "request": request,
            "message": f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ pokroku u≈æivatel≈Ø: {str(e)}",
            "back_url": "/admin/users",
            "back_text": "Zpƒõt na u≈æivatele"
        })


# Funkce pro spr√°vu test sessions
def get_or_create_test_session(user_id: int, lesson_id: int, attempt_id: int = None) -> TestSession:
    """Najde existuj√≠c√≠ aktivn√≠ test session nebo vytvo≈ô√≠ novou"""
    session = SessionLocal()
    try:
        # NEJD≈ò√çV zkus naj√≠t existuj√≠c√≠ aktivn√≠ session
        existing_session = session.query(TestSession).filter(
            TestSession.user_id == user_id,
            TestSession.lesson_id == lesson_id,
            TestSession.is_completed == False
        ).first()
        
        # Pokud existuje aktivn√≠ session, vra≈• ji
        if existing_session:
            logger.info(f"üìã Pokraƒçuji v existuj√≠c√≠ test session {existing_session.id} (ot√°zka {existing_session.current_question_index + 1}/{existing_session.total_questions})")
            session.close()
            return existing_session
        
        # Pokud neexistuje aktivn√≠ session, vytvo≈ô novou
        logger.info(f"üÜï Vytv√°≈ô√≠m novou test session pro u≈æivatele {user_id}")
        
        # Vytvo≈ô novou session
        lesson = session.query(Lesson).get(lesson_id)
        if not lesson:
            raise ValueError(f"Lekce {lesson_id} neexistuje")
        
        # Z√≠skej aktivn√≠ ot√°zky z lekce
        enabled_questions = []
        if isinstance(lesson.questions, list):
            enabled_questions = [
                q for q in lesson.questions 
                if isinstance(q, dict) and q.get('enabled', True)
            ]
        
        if not enabled_questions:
            raise ValueError("≈Ω√°dn√© aktivn√≠ ot√°zky v lekci")
        
        # Vytvo≈ô novou test session
        test_session = TestSession(
            user_id=user_id,
            lesson_id=lesson_id,
            attempt_id=attempt_id,
            current_question_index=0,
            total_questions=len(enabled_questions),
            questions_data=enabled_questions,
            answers=[],
            scores=[]
        )
        
        session.add(test_session)
        session.commit()
        
        logger.info(f"üÜï Vytvo≈ôena nov√° test session: {test_session.id} s {len(enabled_questions)} ot√°zkami")
        logger.info(f"üîç Prvn√≠ 3 ot√°zky: {[q.get('question', 'N/A')[:50] for q in enabled_questions[:3]]}")
        return test_session
        
    finally:
        session.close()

def get_current_question(test_session) -> dict:
    """Z√≠sk√° aktu√°ln√≠ ot√°zku pro test session (p≈ôij√≠m√° TestSession objekt nebo dict)"""
    if isinstance(test_session, dict):
        current_index = test_session.get('current_question_index', 0)
        questions_data = test_session.get('questions_data', [])
    else:
        current_index = test_session.current_question_index
        questions_data = test_session.questions_data
    
    if current_index >= len(questions_data):
        return None
    
    return questions_data[current_index]

def get_next_adaptive_question(test_session) -> Optional[dict]:
    """
    Vybere dal≈°√≠ ot√°zku na z√°kladƒõ adaptivn√≠ obt√≠≈ænosti.
    """
    if isinstance(test_session, dict):
        answered_indices = {a['question_index'] for a in test_session.get('answers', [])}
        all_questions = test_session.get('questions_data', [])
        difficulty_score = test_session.get('difficulty_score', 50.0)
    else: # Je to TestSession objekt
        # Bezpeƒçnƒõj≈°√≠ p≈ô√≠stup k potentially None 'answers'
        answered_indices = {a['question_index'] for a in (test_session.answers or [])}
        all_questions = test_session.questions_data
        difficulty_score = getattr(test_session, 'difficulty_score', 50.0) or 50.0

    unanswered_questions = [
        (idx, q) for idx, q in enumerate(all_questions) if idx not in answered_indices
    ]

    if not unanswered_questions:
        return None

    difficulty_map = {"easy": 25, "medium": 50, "hard": 75}
    
    best_question = None
    min_diff = float('inf')

    for idx, q_data in unanswered_questions:
        q_difficulty = difficulty_map.get(q_data.get("difficulty", "medium"), 50)
        diff = abs(q_difficulty - difficulty_score)
        
        if diff < min_diff:
            min_diff = diff
            best_question = q_data.copy() # Vytvo≈ô√≠me kopii
            best_question['original_index'] = idx 
            
    return best_question

def save_answer_and_advance(test_session_id: int, user_answer: str, score: float, feedback: str, question_index: int):
    """
    Ulo≈æ√≠ odpovƒõƒè, aktualizuje sk√≥re obt√≠≈ænosti, sleduje chyby a posune na dal≈°√≠ ot√°zku.
    """
    session = SessionLocal()
    try:
        test_session = session.query(TestSession).get(test_session_id)
        if not test_session:
            return None
        
        # Z√≠sk√°n√≠ ot√°zky podle p≈ôedan√©ho indexu
        current_question = test_session.questions_data[question_index]
        
        # Aktualizace sk√≥re obt√≠≈ænosti
        difficulty_map = {"easy": 25, "medium": 50, "hard": 75}
        q_difficulty_val = difficulty_map.get(current_question.get("difficulty", "medium"), 50)
        
        if score >= 80:
            adjustment = (100 - q_difficulty_val) / 10
            current_difficulty = getattr(test_session, 'difficulty_score', 50.0) or 50.0
            test_session.difficulty_score = current_difficulty + adjustment
        else:
            adjustment = q_difficulty_val / 10
            current_difficulty = getattr(test_session, 'difficulty_score', 50.0) or 50.0
            test_session.difficulty_score = current_difficulty - adjustment
            
            category = current_question.get("category", "Nezn√°m√°")
            if not test_session.failed_categories:
                test_session.failed_categories = []
            if category not in test_session.failed_categories:
                test_session.failed_categories.append(category)
                flag_modified(test_session, "failed_categories")

        current_difficulty = getattr(test_session, 'difficulty_score', 50.0) or 50.0
        test_session.difficulty_score = max(0, min(100, current_difficulty))
        final_difficulty = getattr(test_session, 'difficulty_score', 50.0) or 50.0
        logger.info(f"üß† Nov√© sk√≥re obt√≠≈ænosti: {final_difficulty:.2f} (zmƒõna: {adjustment:.2f})")

        answer_data = {
            "question": current_question.get("question", ""),
            "correct_answer": current_question.get("correct_answer", ""),
            "user_answer": user_answer,
            "score": score,
            "feedback": feedback,
            "question_index": question_index
        }
        
        if not test_session.answers:
            test_session.answers = []
        if not test_session.scores:
            test_session.scores = []
            
        test_session.answers.append(answer_data)
        test_session.scores.append(score)
        
        test_session.current_score = sum(test_session.scores) / len(test_session.scores)
        
        question_num = len(test_session.answers)
        logger.info(f"""
üíæ === ODPOVƒöƒé ULO≈ΩENA ===
üî¢ Ot√°zka: {question_num}/{test_session.total_questions}
üìù U≈æivatel: "{user_answer}"
üéØ Sk√≥re: {score}%
üí¨ Feedback: "{feedback}"
üìä Pr≈Ømƒõr: {test_session.current_score:.1f}%
=========================""")
        
        if len(test_session.answers) >= test_session.total_questions:
            test_session.is_completed = True
            test_session.completed_at = datetime.utcnow()
        
        # KRITICK√â: Ozn√°men√≠ SQLAlchemy o zmƒõn√°ch JSON sloupc≈Ø
        flag_modified(test_session, 'answers')
        flag_modified(test_session, 'scores')
        flag_modified(test_session, 'failed_categories')
        
        # KRITICK√â: Commit zmƒõn do datab√°ze
        session.commit()
        
        return {
            'id': test_session.id,
            'current_question_index': test_session.current_question_index,
            'total_questions': test_session.total_questions,
            'questions_data': test_session.questions_data,
            'answers': test_session.answers,
            'scores': test_session.scores,
            'current_score': test_session.current_score,
            'is_completed': test_session.is_completed,
            'completed_at': test_session.completed_at,
            'failed_categories': test_session.failed_categories,
            'difficulty_score': getattr(test_session, 'difficulty_score', 50.0)
        }
            
    finally:
        session.close()
    
    return None

# === NOV√Å FUNKCE: Inteligentn√≠ rozhodov√°n√≠ o kvalitƒõ rozpozn√°n√≠ ===
def should_ask_for_confirmation(speech_result: str, confidence_float: float, context: str = "") -> dict:
    """
    Chytr√° logika pro rozhodov√°n√≠, zda se pt√°t na potvrzen√≠ odpovƒõdi.
    Vrac√≠ slovn√≠k s doporuƒçen√≠m a d≈Øvodem.
    """
    
    # Z√°kladn√≠ kontroly
    if not speech_result:
        return {"action": "ask_repeat", "reason": "empty_response", "message": "Nerozumƒõl jsem v√°m. M≈Ø≈æete zopakovat svou odpovƒõƒè?"}
    
    speech_lower = speech_result.lower().strip()
    word_count = len(speech_result.split())
    
    # 1. VYSOK√Å KVALITA - pokraƒçovat bez ptan√≠
    if confidence_float >= 0.8 and word_count >= 2:
        return {"action": "continue", "reason": "high_confidence", "message": ""}
    
    # 2. VELMI KR√ÅTK√â ODPOVƒöDI - mo≈æn√° ne√∫pln√©
    if word_count == 1 and confidence_float < 0.7:
        return {
            "action": "ask_complete", 
            "reason": "too_short", 
            "message": f"Rozumƒõl jsem: '{speech_result}'. Chtƒõli byste svou odpovƒõƒè roz≈°√≠≈ôit nebo je to v≈°e?"
        }
    
    # 3. ST≈òEDN√ç KVALITA - rozhoduj podle obsahu
    if 0.4 <= confidence_float < 0.8:
        # Pokud obsahuje jasn√° slova, pravdƒõpodobnƒõ je OK
        clear_indicators = ['ano', 'ne', 'nev√≠m', 'nen√≠', 'je', 'm√°', 'nem√°']
        has_clear_word = any(word in speech_lower for word in clear_indicators)
        
        if has_clear_word and word_count >= 2:
            return {"action": "continue", "reason": "clear_content", "message": ""}
        elif word_count >= 4:  # Del≈°√≠ odpovƒõƒè, pravdƒõpodobnƒõ OK
            return {"action": "continue", "reason": "sufficient_length", "message": ""}
        else:
            return {
                "action": "ask_confirm", 
                "reason": "medium_confidence", 
                "message": f"Rozumƒõl jsem: '{speech_result}'. Je to spr√°vnƒõ?"
            }
    
    # 4. N√çZK√Å KVALITA - po≈æ√°dat o zopakov√°n√≠
    if confidence_float < 0.4:
        return {
            "action": "ask_repeat", 
            "reason": "low_confidence", 
            "message": "Omlouv√°m se, nerozumƒõl jsem v√°m dob≈ôe. M≈Ø≈æete zopakovat svou odpovƒõƒè pomaleji a jasnƒõji?"
        }
    
    # 5. V√ùCHOZ√ç - pokraƒçovat
    return {"action": "continue", "reason": "default", "message": ""}


def create_natural_speech_response(text: str, language: str = "cs-CZ", add_pauses: bool = True) -> str:
    """
    Vrac√≠ ƒçist√Ω text bez SSML tag≈Ø - TwiML je nepodporuje spr√°vnƒõ.
    Pou≈æ√≠v√°me pomalej≈°√≠ tempo ≈ôeƒçi m√≠sto SSML pauz.
    """
    # Jednoduch√Ω return bez jak√Ωchkoliv SSML modifikac√≠
    return text.strip()


def is_completion_signal(speech_text: str) -> bool:
    """
    Rozpozn√°, zda u≈æivatel signalizuje dokonƒçen√≠ odpovƒõdi.
    """
    if not speech_text:
        return False
    
    completion_signals = [
        'hotovo', 'konec', 'dokonƒçeno', 'to je v≈°e', 'to je v≈°echno',
        'staƒç√≠', 'u≈æ ne', 'u≈æ nechci', 'konƒç√≠m', 'finish', 'done'
    ]
    
    speech_lower = speech_text.lower().strip()
    return any(signal in speech_lower for signal in completion_signals)

# --- NOV√â SYST√âMOV√â ENDPOINTY ---
@system_router.get("/run-migrations", response_class=HTMLResponse, name="admin_run_migrations")
def admin_run_migrations(request: Request):
    """
    Bezpeƒçn√Ω endpoint pro jednor√°zov√© spu≈°tƒõn√≠ datab√°zov√Ωch migrac√≠.
    P≈ôid√°v√° chybƒõj√≠c√≠ sloupce, kter√© mohly vzniknout p≈ôi v√Ωvoji.
    """
    session = SessionLocal()
    results = {"success": [], "errors": []}
    
    # Kompletn√≠ seznam migrac√≠ pro synchronizaci DB s modely
    migrations = {
        "lessons": [
            ("base_difficulty", "VARCHAR(20)", "medium"),
        ],
        "test_sessions": [
            ("difficulty_score", "FLOAT", 50.0),
            ("failed_categories", "JSON", "[]"),
        ]
    }
    
    try:
        for table, columns in migrations.items():
            for column_name, column_type, default_value in columns:
                # Pro default hodnoty stringov√©ho typu pot≈ôebujeme uvozovky
                default_sql = f"'{default_value}'" if isinstance(default_value, str) else default_value
                
                try:
                    # Zkusit p≈ôidat sloupec
                    session.execute(text(f"ALTER TABLE {table} ADD COLUMN {column_name} {column_type} DEFAULT {default_sql}"))
                    session.commit()
                    results["success"].append(f"‚úÖ Sloupec '{column_name}' √∫spƒõ≈°nƒõ p≈ôid√°n do tabulky '{table}'.")
                except Exception as e:
                    # Pokud sloupec ji≈æ existuje, ignorovat chybu
                    if "already exists" in str(e) or "duplicate column" in str(e):
                        results["success"].append(f"‚òëÔ∏è Sloupec '{column_name}' v tabulce '{table}' ji≈æ existuje.")
                    else:
                        results["errors"].append(f"‚ùå Chyba p≈ôi p≈ôid√°v√°n√≠ sloupce '{column_name}': {e}")
                    session.rollback() # D≈Øle≈æit√Ω rollback po ka≈æd√© chybƒõ
                    
        if not results["errors"]:
            message = "V≈°echny migrace probƒõhly √∫spƒõ≈°nƒõ!"
        else:
            message = "Nƒõkter√© migrace selhaly. Zkontrolujte logy."
            
        return templates.TemplateResponse("message.html", {
            "request": request,
            "message": message,
            "details": results,
            "back_url": "/admin/dashboard",
            "back_text": "Zpƒõt na dashboard"
        })

    except Exception as e:
        session.rollback()
        return templates.TemplateResponse("message.html", {
            "request": request,
            "message": f"Kritick√° chyba p≈ôi migraci: {e}",
            "back_url": "/admin/dashboard",
            "back_text": "Zpƒõt na dashboard"
        })
    finally:
        session.close()


@admin_router.get("/lessons/new", response_class=HTMLResponse, name="admin_new_lesson_get")
def admin_new_lesson_get(request: Request):
    form = {
        "title": "", "language": "cs", "script": "", "questions": "",
        "description": "", "lesson_number": "0", "lesson_type": "standard", "required_score": "90.0",
        "title.errors": [], "language.errors": [], "script.errors": [], "questions.errors": [],
        "description.errors": [], "lesson_number.errors": [], "lesson_type.errors": [], "required_score.errors": []
    }
    return templates.TemplateResponse("admin/lesson_form.html", {"request": request, "lesson": None, "form": form})
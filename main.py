import os
from fastapi import FastAPI, Request, WebSocket, WebSocketDisconnect, Response
from fastapi.responses import PlainTextResponse, HTMLResponse, RedirectResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
import logging
from twilio.twiml.voice_response import VoiceResponse, Connect, Stream
from app.models import Attempt, Lesson, User, Answer
from fastapi import Query
from fastapi.templating import Jinja2Templates
from fastapi import APIRouter, Form, status, Depends
from starlette.requests import Request
from typing import Optional
from fastapi import Path
import socket
import requests
from sqlalchemy import text
import os
from datetime import datetime
from app.database import SessionLocal
import base64
import json
import io
import openai
# Audio zpracov√°n√≠
import audioop
import wave
import asyncio
import time
import tempfile

load_dotenv()

app = FastAPI()

# CORS (pro p≈ô√≠padn√© admin rozhran√≠)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# DEBUG middleware pro WebSocket
@app.middleware("http")
async def debug_middleware(request: Request, call_next):
    print(f"üîç MIDDLEWARE: {request.method} {request.url}")
    if request.url.path == "/audio":
        print("üéØ MIDDLEWARE: Detekov√°n /audio request!")
    response = await call_next(request)
    return response

# Nastaven√≠ ≈°ablon
TEMPLATES_DIR = os.path.join(os.path.dirname(__file__), 'app', 'templates')
templates = Jinja2Templates(directory=TEMPLATES_DIR)

# Admin router
admin_router = APIRouter(prefix="/admin", tags=["admin"])

@admin_router.get("/", response_class=HTMLResponse)
def admin_root(request: Request):
    # P≈ôesmƒõrov√°n√≠ na seznam u≈æivatel≈Ø (jako ve Flasku)
    return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)

@admin_router.get("/users", response_class=HTMLResponse, name="admin_list_users")
def admin_list_users(request: Request):
    session = SessionLocal()
    try:
        # FORCE migrace p≈ôi ka≈æd√©m naƒçten√≠
        logger.info("üîß Spou≈°t√≠m force migrace...")
        
        # 1. P≈ôidej current_lesson_level do users
        try:
            session.execute(text("ALTER TABLE users ADD COLUMN current_lesson_level INTEGER DEFAULT 0"))
            session.commit()
            logger.info("‚úÖ current_lesson_level p≈ôid√°n")
        except Exception as e:
            if "already exists" in str(e) or "duplicate column" in str(e):
                logger.info("‚úÖ current_lesson_level ji≈æ existuje")
            else:
                logger.warning(f"Chyba p≈ôi p≈ôid√°v√°n√≠ current_lesson_level: {e}")
            session.rollback()
        
        # 2. P≈ôidej lesson sloupce
        try:
            session.execute(text("ALTER TABLE lessons ADD COLUMN lesson_number INTEGER DEFAULT 0"))
            session.execute(text("ALTER TABLE lessons ADD COLUMN required_score FLOAT DEFAULT 90.0"))
            session.execute(text("ALTER TABLE lessons ADD COLUMN lesson_type VARCHAR(20) DEFAULT 'standard'"))
            session.execute(text("ALTER TABLE lessons ADD COLUMN description TEXT"))
            session.commit()
            logger.info("‚úÖ lesson sloupce p≈ôid√°ny")
        except Exception as e:
            if "already exists" in str(e) or "duplicate column" in str(e):
                logger.info("‚úÖ lesson sloupce ji≈æ existuj√≠")
            else:
                logger.warning(f"Chyba p≈ôi p≈ôid√°v√°n√≠ lesson sloupc≈Ø: {e}")
            session.rollback()
        
        # 3. Vytvo≈ô user_progress tabulku
        try:
            create_progress_table = """
            CREATE TABLE IF NOT EXISTS user_progress (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users(id),
                lesson_number INTEGER NOT NULL,
                is_completed BOOLEAN DEFAULT FALSE,
                best_score FLOAT,
                attempts_count INTEGER DEFAULT 0,
                first_completed_at TIMESTAMP,
                last_attempt_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            """
            session.execute(text(create_progress_table))
            session.commit()
            logger.info("‚úÖ user_progress tabulka vytvo≈ôena")
        except Exception as e:
            logger.warning(f"Chyba p≈ôi vytv√°≈ôen√≠ user_progress: {e}")
            session.rollback()
        
        # Bezpeƒçn√© naƒçten√≠ u≈æivatel≈Ø s fallback
        try:
            users = session.query(User).all()
        except Exception as query_error:
            logger.error(f"Chyba p≈ôi naƒç√≠t√°n√≠ u≈æivatel≈Ø: {query_error}")
            # Fallback - naƒçti bez current_lesson_level
            users_raw = session.execute(text("SELECT id, name, phone, language, detail FROM users")).fetchall()
            users = []
            for row in users_raw:
                user = type('User', (), {
                    'id': row[0],
                    'name': row[1], 
                    'phone': row[2],
                    'language': row[3],
                    'detail': row[4],
                    'current_lesson_level': 0  # Default hodnota
                })()
                users.append(user)
        
        # Zajisti, ≈æe v≈°ichni u≈æivatel√© maj√≠ current_lesson_level
        for user in users:
            if not hasattr(user, 'current_lesson_level') or user.current_lesson_level is None:
                user.current_lesson_level = 0
        
        return templates.TemplateResponse("users/list.html", {"request": request, "users": users})
    except Exception as e:
        logger.error(f"‚ùå Kritick√° chyba v admin_list_users: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        # Fallback - pr√°zdn√Ω seznam
        return templates.TemplateResponse("users/list.html", {"request": request, "users": []})
    finally:
        session.close()

@admin_router.get("/users/new", response_class=HTMLResponse, name="admin_new_user_get")
def admin_new_user_get(request: Request):
    # Pr√°zdn√Ω formul√°≈ô pro nov√©ho u≈æivatele
    return templates.TemplateResponse("users/form.html", {"request": request, "user": None, "form": {"name": "", "phone": "", "language": "cs", "detail": "", "name.errors": [], "phone.errors": [], "language.errors": [], "detail.errors": []}})

@admin_router.post("/users/new", response_class=HTMLResponse)
def admin_new_user_post(request: Request, name: str = Form(...), phone: str = Form(...), language: str = Form(...), detail: str = Form("")):
    errors = {"name": [], "phone": [], "language": [], "detail": []}
    if not name:
        errors["name"].append("Jm√©no je povinn√©.")
    if not phone or not (phone.startswith("+420") or phone.startswith("0")) or len(phone.replace(" ", "")) < 9:
        errors["phone"].append("Telefon mus√≠ b√Ωt ve form√°tu +420XXXXXXXXX nebo 0XXXXXXXXX")
    if language not in ["cs", "en"]:
        errors["language"].append("Neplatn√Ω jazyk.")
    if any(errors.values()):
        return templates.TemplateResponse("users/form.html", {"request": request, "user": None, "form": {"name": name, "phone": phone, "language": language, "detail": detail, "name.errors": errors["name"], "phone.errors": errors["phone"], "language.errors": errors["language"], "detail.errors": errors["detail"]}})
    user = User(name=name, phone=phone, language=language, detail=detail)
    # Doƒçasnƒõ bez current_lesson_level
    session = SessionLocal()
    session.add(user)
    try:
        session.commit()
    except Exception as e:
        session.rollback()
        form = {"name": name, "phone": phone, "language": language, "detail": detail, "name.errors": [str(e)], "phone.errors": [], "language.errors": [], "detail.errors": []}
        session.close()
        return templates.TemplateResponse("users/form.html", {"request": request, "user": None, "form": form})
    session.close()
    return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)

@admin_router.get("/users/{id}/edit", response_class=HTMLResponse, name="admin_edit_user_get")
def admin_edit_user_get(request: Request, id: int = Path(...)):
    session = SessionLocal()
    user = session.query(User).get(id)
    if not user:
        session.close()
        return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)
    form = {"name": user.name, "phone": user.phone, "language": user.language, "detail": user.detail, "name.errors": [], "phone.errors": [], "language.errors": [], "detail.errors": []}
    session.close()
    return templates.TemplateResponse("users/form.html", {"request": request, "user": user, "form": form})

@admin_router.post("/users/{id}/edit", response_class=HTMLResponse)
def admin_edit_user_post(request: Request, id: int = Path(...), name: str = Form(...), phone: str = Form(...), language: str = Form(...), detail: str = Form("")):
    session = SessionLocal()
    user = session.query(User).get(id)
    if not user:
        session.close()
        return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)
    errors = {"name": [], "phone": [], "language": [], "detail": []}
    if not name:
        errors["name"].append("Jm√©no je povinn√©.")
    if not phone or not (phone.startswith("+420") or phone.startswith("0")) or len(phone.replace(" ", "")) < 9:
        errors["phone"].append("Telefon mus√≠ b√Ωt ve form√°tu +420XXXXXXXXX nebo 0XXXXXXXXX")
    if language not in ["cs", "en"]:
        errors["language"].append("Neplatn√Ω jazyk.")
    if any(errors.values()):
        form = {"name": name, "phone": phone, "language": language, "detail": detail, "name.errors": errors["name"], "phone.errors": errors["phone"], "language.errors": errors["language"], "detail.errors": errors["detail"]}
        session.close()
        return templates.TemplateResponse("users/form.html", {"request": request, "user": user, "form": form})
    user.name = name
    user.phone = phone
    user.language = language
    user.detail = detail
    try:
        session.commit()
    except Exception as e:
        session.rollback()
        form = {"name": name, "phone": phone, "language": language, "detail": detail, "name.errors": [str(e)], "phone.errors": [], "language.errors": [], "detail.errors": []}
        session.close()
        return templates.TemplateResponse("users/form.html", {"request": request, "user": user, "form": form})
    session.close()
    return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)

@admin_router.post("/users/{user_id}/delete", name="admin_delete_user")
def admin_delete_user(user_id: int = Path(...)):
    session = SessionLocal()
    user = session.query(User).get(user_id)
    if user:
        try:
            session.delete(user)
            session.commit()
        except Exception as e:
            session.rollback()
        finally:
            session.close()
    else:
        session.close()
    return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)

@admin_router.post("/users/{user_id}/call", name="admin_call_user")
def admin_call_user(user_id: int = Path(...)):
    session = SessionLocal()
    user = session.query(User).get(user_id)
    if not user:
        session.close()
        return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)
    lesson = session.query(Lesson).filter_by(language=user.language).order_by(Lesson.id.desc()).first()
    if not lesson:
        session.close()
        return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)
    
    # Vytvo≈ôen√≠ nov√©ho pokusu
    attempt = Attempt(
        user_id=user.id,
        lesson_id=lesson.id,
        next_due=datetime.now()
    )
    session.add(attempt)
    session.commit()
    
    try:
        from app.services.twilio_service import TwilioService
        twilio = TwilioService()
        base_url = os.getenv("WEBHOOK_BASE_URL", "https://lecture-app-production.up.railway.app")
        webhook_url = f"{base_url.rstrip('/')}/voice/?attempt_id={attempt.id}"  # ‚úÖ Pou≈æ√≠v√°m attempt.id
        logger.info(f"Vol√°m u≈æivatele {user.phone} s webhook URL: {webhook_url}")
        twilio.call(user.phone, webhook_url)
    except Exception as e:
        logger.error(f"Chyba p≈ôi vol√°n√≠ Twilio: {e}")
    finally:
        session.close()
    
    return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)

@admin_router.post("/users/{user_id}/call/lesson/{lesson_number}", name="admin_call_user_lesson")
def admin_call_user_lesson(user_id: int = Path(...), lesson_number: int = Path(...)):
    """Zavol√° u≈æivateli s konkr√©tn√≠ lekc√≠ podle ƒç√≠sla lekce"""
    session = SessionLocal()
    try:
        user = session.query(User).get(user_id)
        if not user:
            return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)
        
        # Najdi lekci podle ƒç√≠sla - FALLBACK na jakoukoliv lekci
        lesson = session.query(Lesson).filter_by(
            lesson_number=lesson_number,
            language=user.language
        ).first()
        
        # Fallback - pokud nen√≠ lekce s ƒç√≠slem, vezmi prvn√≠ dostupnou
        if not lesson:
            logger.warning(f"Lekce {lesson_number} nenalezena, pou≈æ√≠v√°m fallback")
            lesson = session.query(Lesson).filter_by(language=user.language).first()
        
        # Fallback - pokud nen√≠ ≈æ√°dn√° lekce v jazyce, vezmi prvn√≠ lekci
        if not lesson:
            logger.warning(f"≈Ω√°dn√° lekce v jazyce {user.language}, pou≈æ√≠v√°m prvn√≠ dostupnou")
            lesson = session.query(Lesson).first()
        
        if not lesson:
            logger.error("≈Ω√°dn√° lekce v datab√°zi!")
            return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)
        
        # Vytvo≈ôen√≠ nov√©ho pokusu
        attempt = Attempt(
            user_id=user.id,
            lesson_id=lesson.id,
            next_due=datetime.now()
        )
        session.add(attempt)
        session.commit()
        
        # Vol√°n√≠ p≈ôes Twilio
        from app.services.twilio_service import TwilioService
        twilio = TwilioService()
        base_url = os.getenv("WEBHOOK_BASE_URL", "https://lecture-app-production.up.railway.app")
        webhook_url = f"{base_url.rstrip('/')}/voice/?attempt_id={attempt.id}"
        
        logger.info(f"Vol√°m u≈æivatele {user.phone} s lekc√≠ {lesson.id} (ƒç√≠slo {lesson_number}): {webhook_url}")
        twilio.call(user.phone, webhook_url)
        
    except Exception as e:
        logger.error(f"‚ùå KRITICK√Å CHYBA p≈ôi vol√°n√≠ s lekc√≠: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        # Fallback na p≈Øvodn√≠ funkci
        return admin_call_user(user_id)
    finally:
        session.close()
    
    return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)

@admin_router.post("/users/{user_id}/advance", name="admin_advance_user")
def admin_advance_user(user_id: int = Path(...)):
    """Manu√°lnƒõ posune u≈æivatele do dal≈°√≠ lekce"""
    session = SessionLocal()
    try:
        user = session.query(User).get(user_id)
        if not user:
            return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)
        
        # Bezpeƒçn√° kontrola current_lesson_level
        if not hasattr(user, 'current_lesson_level') or user.current_lesson_level is None:
            user.current_lesson_level = 0
        
        if user.current_lesson_level < 10:
            user.current_lesson_level += 1
            
            # Bezpeƒçn√© vytvo≈ôen√≠ progress z√°znamu
            try:
                from app.models import UserProgress
                progress = UserProgress(
                    user_id=user.id,
                    lesson_number=user.current_lesson_level - 1,  # P≈ôedchoz√≠ lekce je dokonƒçena
                    is_completed=True,
                    best_score=95.0,  # Manu√°ln√≠ postup = vysok√© sk√≥re
                    attempts_count=1,
                    first_completed_at=datetime.now()
                )
                session.add(progress)
            except Exception as progress_error:
                logger.warning(f"Chyba p≈ôi vytv√°≈ôen√≠ progress z√°znamu: {progress_error}")
                # Pokraƒçuj bez progress z√°znamu
            
            session.commit()
            logger.info(f"U≈æivatel {user.name} manu√°lnƒõ posunut na lekci {user.current_lesson_level}")
        
    except Exception as e:
        logger.error(f"‚ùå Chyba p≈ôi posunu u≈æivatele: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        session.rollback()
    finally:
        session.close()
    
    return RedirectResponse(url="/admin/users", status_code=status.HTTP_302_FOUND)

@admin_router.get("/create-lesson-0", name="admin_create_lesson_0")
def admin_create_lesson_0(request: Request):
    """Endpoint pro vytvo≈ôen√≠ Lekce 0 s 30 z√°kladn√≠mi ot√°zkami"""
    try:
        logger.info("üöÄ Vytv√°≈ôen√≠ Lekce 0...")
        
        # 30 z√°kladn√≠ch ot√°zek z obr√°bƒõc√≠ch kapalin a servisu
        questions = [
            {
                "number": 1,
                "question": "K ƒçemu slou≈æ√≠ obr√°bƒõc√≠ kapaliny p≈ôi obr√°bƒõn√≠ kov≈Ø?",
                "correct_answer": "K chlazen√≠, maz√°n√≠ a odvodu t≈ô√≠sek",
                "keywords": ["chlazen√≠", "maz√°n√≠", "t≈ô√≠sky", "odvod"],
                "enabled": True
            },
            {
                "number": 2,
                "question": "Jak√© jsou hlavn√≠ typy obr√°bƒõc√≠ch kapalin?",
                "correct_answer": "Vodn√≠ roztoky, oleje a emulze",
                "keywords": ["vodn√≠", "oleje", "emulze", "typy"],
                "enabled": True
            },
            {
                "number": 3,
                "question": "Proƒç je d≈Øle≈æit√© pravidelnƒõ kontrolovat koncentraci emulze?",
                "correct_answer": "Pro zaji≈°tƒõn√≠ spr√°vn√© funkce a p≈ôedch√°zen√≠ bakteri√°ln√≠mu r≈Østu",
                "keywords": ["koncentrace", "funkce", "bakterie", "kontrola"],
                "enabled": True
            },
            {
                "number": 4,
                "question": "Jak se mƒõ≈ô√≠ koncentrac√≠ obr√°bƒõc√≠ emulze?",
                "correct_answer": "Refraktometrem nebo titrac√≠",
                "keywords": ["refraktometr", "titrace", "mƒõ≈ôen√≠"],
                "enabled": True
            },
            {
                "number": 5,
                "question": "Jak√° je optim√°ln√≠ koncentrace pro vƒõt≈°inu obr√°bƒõc√≠ch emulz√≠?",
                "correct_answer": "3-8 procent",
                "keywords": ["3", "8", "procent", "koncentrace"],
                "enabled": True
            },
            {
                "number": 6,
                "question": "Co zp≈Øsobuje pƒõnƒõn√≠ obr√°bƒõc√≠ch kapalin?",
                "correct_answer": "Vysok√° rychlost obƒõhu, kontaminace nebo ≈°patn√° koncentrace",
                "keywords": ["pƒõnƒõn√≠", "rychlost", "kontaminace", "koncentrace"],
                "enabled": True
            },
            {
                "number": 7,
                "question": "Jak ƒçasto se m√° mƒõnit obr√°bƒõc√≠ kapalina?",
                "correct_answer": "Podle stavu kapaliny, obvykle ka≈æd√© 2-6 mƒõs√≠c≈Ø",
                "keywords": ["mƒõnit", "stav", "mƒõs√≠c", "pravidelnƒõ"],
                "enabled": True
            },
            {
                "number": 8,
                "question": "Jak√© jsou p≈ô√≠znaky zka≈æen√© obr√°bƒõc√≠ kapaliny?",
                "correct_answer": "Z√°pach, zmƒõna barvy, pƒõnƒõn√≠ nebo r≈Øst bakteri√≠",
                "keywords": ["z√°pach", "barva", "pƒõnƒõn√≠", "bakterie"],
                "enabled": True
            },
            {
                "number": 9,
                "question": "Co je to pH obr√°bƒõc√≠ kapaliny a jak√° m√° b√Ωt hodnota?",
                "correct_answer": "M√≠ra kyselosti, optim√°lnƒõ 8,5-9,5",
                "keywords": ["pH", "kyselost", "8,5", "9,5"],
                "enabled": True
            },
            {
                "number": 10,
                "question": "Proƒç je d≈Øle≈æit√© udr≈æovat spr√°vn√© pH?",
                "correct_answer": "Zabra≈àuje korozi a r≈Østu bakteri√≠",
                "keywords": ["koroze", "bakterie", "ochrana"],
                "enabled": True
            },
            {
                "number": 11,
                "question": "Jak se p≈ôipravuje emulze z koncentr√°tu?",
                "correct_answer": "Koncentr√°t se p≈ôid√°v√° do vody, nikdy naopak",
                "keywords": ["koncentr√°t", "voda", "p≈ô√≠prava", "po≈ôad√≠"],
                "enabled": True
            },
            {
                "number": 12,
                "question": "Jak√° je funkce biocid≈Ø v obr√°bƒõc√≠ch kapalin√°ch?",
                "correct_answer": "Zab√≠jej√≠ bakterie a houby",
                "keywords": ["biocidy", "bakterie", "houby", "dezinfekce"],
                "enabled": True
            },
            {
                "number": 13,
                "question": "Co zp≈Øsobuje korozi na obr√°bƒõc√≠ch stroj√≠ch?",
                "correct_answer": "N√≠zk√© pH, kontaminace nebo star√° kapalina",
                "keywords": ["koroze", "pH", "kontaminace", "star√°"],
                "enabled": True
            },
            {
                "number": 14,
                "question": "Jak se testuje kvalita obr√°bƒõc√≠ kapaliny?",
                "correct_answer": "Mƒõ≈ôen√≠ pH, koncentrace, ƒçistoty a mikrobiologie",
                "keywords": ["pH", "koncentrace", "ƒçistota", "mikrobiologie"],
                "enabled": True
            },
            {
                "number": 15,
                "question": "Jak√© jsou bezpeƒçnostn√≠ opat≈ôen√≠ p≈ôi pr√°ci s obr√°bƒõc√≠mi kapalinami?",
                "correct_answer": "Ochrann√© rukavice, br√Ωle a vƒõtr√°n√≠",
                "keywords": ["rukavice", "br√Ωle", "vƒõtr√°n√≠", "ochrana"],
                "enabled": True
            },
            {
                "number": 16,
                "question": "Co je filtrace obr√°bƒõc√≠ch kapalin?",
                "correct_answer": "Odstranƒõn√≠ neƒçistot a ƒç√°stic z kapaliny",
                "keywords": ["filtrace", "neƒçistoty", "ƒç√°stice", "ƒçi≈°tƒõn√≠"],
                "enabled": True
            },
            {
                "number": 17,
                "question": "Proƒç se obr√°bƒõc√≠ kapaliny recykluj√≠?",
                "correct_answer": "Kv≈Øli √∫spo≈ôe n√°klad≈Ø a ochranƒõ ≈æivotn√≠ho prost≈ôed√≠",
                "keywords": ["recyklace", "√∫spora", "prost≈ôed√≠", "n√°klady"],
                "enabled": True
            },
            {
                "number": 18,
                "question": "Jak√° je role aditiv v obr√°bƒõc√≠ch kapalin√°ch?",
                "correct_answer": "Zlep≈°uj√≠ vlastnosti jako maz√°n√≠, ochranu p≈ôed koroz√≠",
                "keywords": ["aditiva", "maz√°n√≠", "koroze", "vlastnosti"],
                "enabled": True
            },
            {
                "number": 19,
                "question": "Co je to EP p≈ô√≠sada?",
                "correct_answer": "Extreme Pressure - p≈ô√≠sada pro vysok√© tlaky",
                "keywords": ["EP", "extreme", "pressure", "tlak"],
                "enabled": True
            },
            {
                "number": 20,
                "question": "Jak se likviduj√≠ pou≈æit√© obr√°bƒõc√≠ kapaliny?",
                "correct_answer": "Jako nebezpeƒçn√Ω odpad ve specializovan√Ωch firm√°ch",
                "keywords": ["likvidace", "nebezpeƒçn√Ω", "odpad", "specializovan√©"],
                "enabled": True
            },
            {
                "number": 21,
                "question": "Co zp≈Øsobuje bakteri√°ln√≠ r≈Øst v obr√°bƒõc√≠ch kapalin√°ch?",
                "correct_answer": "Vysok√° teplota, n√≠zk√© pH nebo kontaminace",
                "keywords": ["bakterie", "teplota", "pH", "kontaminace"],
                "enabled": True
            },
            {
                "number": 22,
                "question": "Jak√© jsou v√Ωhody syntetick√Ωch obr√°bƒõc√≠ch kapalin?",
                "correct_answer": "Del≈°√≠ ≈æivotnost, lep≈°√≠ ƒçistota a stabilita",
                "keywords": ["syntetick√©", "≈æivotnost", "ƒçistota", "stabilita"],
                "enabled": True
            },
            {
                "number": 23,
                "question": "Co je to mazac√≠ film?",
                "correct_answer": "Tenk√° vrstva kapaliny mezi n√°strojem a obrobkem",
                "keywords": ["mazac√≠", "film", "vrstva", "n√°stroj"],
                "enabled": True
            },
            {
                "number": 24,
                "question": "Proƒç je d≈Øle≈æit√© chlazen√≠ p≈ôi obr√°bƒõn√≠?",
                "correct_answer": "Zabra≈àuje p≈ôeh≈ô√°t√≠ n√°stroje a obrobku",
                "keywords": ["chlazen√≠", "p≈ôeh≈ô√°t√≠", "n√°stroj", "obrobek"],
                "enabled": True
            },
            {
                "number": 25,
                "question": "Co je to tramp oil?",
                "correct_answer": "Ciz√≠ olej kontaminuj√≠c√≠ obr√°bƒõc√≠ kapalinu",
                "keywords": ["tramp", "oil", "ciz√≠", "kontaminace"],
                "enabled": True
            },
            {
                "number": 26,
                "question": "Jak se odstra≈àuje tramp oil?",
                "correct_answer": "Skimmerem nebo separ√°torem oleje",
                "keywords": ["skimmer", "separ√°tor", "odstranƒõn√≠"],
                "enabled": True
            },
            {
                "number": 27,
                "question": "Jak√° je optim√°ln√≠ teplota obr√°bƒõc√≠ch kapalin?",
                "correct_answer": "20-35 stup≈à≈Ø Celsia",
                "keywords": ["teplota", "20", "35", "Celsius"],
                "enabled": True
            },
            {
                "number": 28,
                "question": "Co je to centr√°ln√≠ syst√©m obr√°bƒõc√≠ch kapalin?",
                "correct_answer": "Syst√©m z√°sobuj√≠c√≠ v√≠ce stroj≈Ø z jednoho zdroje",
                "keywords": ["centr√°ln√≠", "syst√©m", "v√≠ce", "stroj≈Ø"],
                "enabled": True
            },
            {
                "number": 29,
                "question": "Proƒç se kontroluje tvrdost vody pro p≈ô√≠pravu emulz√≠?",
                "correct_answer": "Tvrd√° voda m≈Ø≈æe zp≈Øsobit nestabilitu emulze",
                "keywords": ["tvrdost", "voda", "nestabilita", "emulze"],
                "enabled": True
            },
            {
                "number": 30,
                "question": "Co jsou to MWF (Metalworking Fluids)?",
                "correct_answer": "Obecn√Ω n√°zev pro v≈°echny obr√°bƒõc√≠ kapaliny",
                "keywords": ["MWF", "metalworking", "fluids", "obecn√Ω"],
                "enabled": True
            }
        ]
        
        session = SessionLocal()
        
        # Zkontroluj, jestli u≈æ Lekce 0 neexistuje
        existing_lesson = session.query(Lesson).filter(Lesson.title.contains("Lekce 0")).first()
        if existing_lesson:
            session.close()
            return templates.TemplateResponse("message.html", {
                "request": request,
                "message": f"‚úÖ Lekce 0 ji≈æ existuje! (ID: {existing_lesson.id})",
                "back_url": "/admin/lessons",
                "back_text": "Zpƒõt na lekce"
            })
        
        # Vytvo≈ô novou lekci
        lesson = Lesson(
            title="Lekce 0: Vstupn√≠ test - Obr√°bƒõc√≠ kapaliny a servis",
            description="Z√°kladn√≠ test znalost√≠ z oboru obr√°bƒõc√≠ch kapalin a jejich servisu. Nutn√© dos√°hnout 90% √∫spƒõ≈°nosti pro postup do Lekce 1.",
            language="cs",
            script="",  # Pr√°zdn√Ω script pro vstupn√≠ test
            questions=questions,
            level="entry_test"
        )
        
        session.add(lesson)
        session.commit()
        
        lesson_id = lesson.id
        session.close()
        
        logger.info(f"‚úÖ Lekce 0 vytvo≈ôena s ID: {lesson_id}")
        
        return templates.TemplateResponse("message.html", {
            "request": request,
            "message": f"üéâ Lekce 0 √∫spƒõ≈°nƒõ vytvo≈ôena!\n\nüìù ID: {lesson_id}\nüìö 30 ot√°zek z obr√°bƒõc√≠ch kapalin\nüéØ √örove≈à: Vstupn√≠ test",
            "back_url": "/admin/lessons",
            "back_text": "Zobrazit v≈°echny lekce"
        })
        
    except Exception as e:
        logger.error(f"‚ùå Chyba p≈ôi vytv√°≈ôen√≠ Lekce 0: {e}")
        return templates.TemplateResponse("message.html", {
            "request": request,
            "message": f"‚ùå Chyba p≈ôi vytv√°≈ôen√≠ Lekce 0: {str(e)}",
            "back_url": "/admin/lessons",
            "back_text": "Zpƒõt na lekce"
        })

@admin_router.get("/lessons", response_class=HTMLResponse, name="admin_list_lessons")
def admin_list_lessons(request: Request):
    session = SessionLocal()
    try:
        # KRITICK√Å MIGRACE - mus√≠ probƒõhnout P≈òED naƒç√≠t√°n√≠m dat
        logger.info("üîß Spou≈°t√≠m kritickou migraci pro lessons...")
        
        # 1. P≈ôidej description sloupec
        try:
            session.execute(text("ALTER TABLE lessons ADD COLUMN description TEXT"))
            session.commit()
            logger.info("‚úÖ Description sloupec p≈ôid√°n")
        except Exception as e:
            if "already exists" in str(e) or "duplicate column" in str(e):
                logger.info("‚úÖ Description sloupec ji≈æ existuje")
            else:
                logger.warning(f"Chyba p≈ôi p≈ôid√°v√°n√≠ description: {e}")
            session.rollback()
        
        # 2. P≈ôidej dal≈°√≠ pot≈ôebn√© sloupce pro budouc√≠ pou≈æit√≠
        try:
            session.execute(text("ALTER TABLE lessons ADD COLUMN lesson_number INTEGER DEFAULT 0"))
            session.execute(text("ALTER TABLE lessons ADD COLUMN required_score FLOAT DEFAULT 90.0"))
            session.execute(text("ALTER TABLE lessons ADD COLUMN lesson_type VARCHAR(20) DEFAULT 'standard'"))
            session.commit()
            logger.info("‚úÖ Dal≈°√≠ lesson sloupce p≈ôid√°ny")
        except Exception as e:
            if "already exists" in str(e) or "duplicate column" in str(e):
                logger.info("‚úÖ Dal≈°√≠ lesson sloupce ji≈æ existuj√≠")
            else:
                logger.warning(f"Chyba p≈ôi p≈ôid√°v√°n√≠ dal≈°√≠ch sloupc≈Ø: {e}")
            session.rollback()
        
        # 3. Nyn√≠ teprve naƒçti data
        lessons = session.query(Lesson).order_by(Lesson.id.desc()).all()
        logger.info(f"‚úÖ Naƒçteno {len(lessons)} lekc√≠")
        
        session.close()
        return templates.TemplateResponse("lessons/list.html", {"request": request, "lessons": lessons})
        
    except Exception as e:
        session.close()
        logger.error(f"‚ùå KRITICK√Å CHYBA p≈ôi naƒç√≠t√°n√≠ lekc√≠: {e}")
        logger.error(f"‚ùå Traceback: {str(e)}")
        
        # Zkus vytvo≈ôit tabulku znovu
        try:
            from app.database import Base, engine
            Base.metadata.create_all(engine)
            logger.info("‚úÖ Tabulky znovu vytvo≈ôeny")
        except Exception as create_error:
            logger.error(f"‚ùå Chyba p≈ôi vytv√°≈ôen√≠ tabulek: {create_error}")
        
        return templates.TemplateResponse("message.html", {
            "request": request,
            "message": f"‚ùå Datab√°zov√° chyba p≈ôi naƒç√≠t√°n√≠ lekc√≠.\n\nChyba: {str(e)}\n\nZkuste obnovit str√°nku za chv√≠li.",
            "back_url": "/admin/users",
            "back_text": "Zpƒõt na u≈æivatele"
        })

@admin_router.get("/lessons/new", response_class=HTMLResponse, name="admin_new_lesson_get")
def admin_new_lesson_get(request: Request):
    form = {"title": "", "language": "cs", "script": "", "questions": "", "title.errors": [], "language.errors": [], "script.errors": [], "questions.errors": []}
    return templates.TemplateResponse("lessons/form.html", {"request": request, "lesson": None, "form": form})

@admin_router.post("/lessons/new", response_class=HTMLResponse)
def admin_new_lesson_post(request: Request, title: str = Form(...), language: str = Form(...), script: str = Form(...), questions: str = Form("")):
    errors = {"title": [], "language": [], "script": [], "questions": []}
    if not title:
        errors["title"].append("N√°zev je povinn√Ω.")
    if language not in ["cs", "en"]:
        errors["language"].append("Neplatn√Ω jazyk.")
    if not script:
        errors["script"].append("Skript je povinn√Ω.")
    if any(errors.values()):
        form = {"title": title, "language": language, "script": script, "questions": questions, "title.errors": errors["title"], "language.errors": errors["language"], "script.errors": errors["script"], "questions.errors": errors["questions"]}
        return templates.TemplateResponse("lessons/form.html", {"request": request, "lesson": None, "form": form})
    lesson = Lesson(title=title, language=language, script=script, questions=questions)
    session = SessionLocal()
    session.add(lesson)
    try:
        session.commit()
    except Exception as e:
        session.rollback()
        form = {"title": title, "language": language, "script": script, "questions": questions, "title.errors": [str(e)], "language.errors": [], "script.errors": [], "questions.errors": []}
        session.close()
        return templates.TemplateResponse("lessons/form.html", {"request": request, "lesson": None, "form": form})
    session.close()
    return RedirectResponse(url="/admin/lessons", status_code=status.HTTP_302_FOUND)

@admin_router.get("/lessons/{id}/edit", response_class=HTMLResponse, name="admin_edit_lesson_get")
def admin_edit_lesson_get(request: Request, id: int = Path(...)):
    session = SessionLocal()
    lesson = session.query(Lesson).get(id)
    if not lesson:
        session.close()
        return RedirectResponse(url="/admin/lessons", status_code=status.HTTP_302_FOUND)
    
    # Pro Lekci 0 a nov√© lekce s ot√°zkami pou≈æij novou template
    if lesson.title.startswith("Lekce 0") or (lesson.questions and isinstance(lesson.questions, list) and len(lesson.questions) > 0 and isinstance(lesson.questions[0], dict)):
        session.close()
        return templates.TemplateResponse("lessons/edit.html", {"request": request, "lesson": lesson})
    
    # Pro star√© lekce pou≈æij p≈Øvodn√≠ template
    form = {"title": lesson.title, "language": lesson.language, "script": lesson.script, "questions": lesson.questions, "title.errors": [], "language.errors": [], "script.errors": [], "questions.errors": []}
    session.close()
    return templates.TemplateResponse("lessons/form.html", {"request": request, "lesson": lesson, "form": form})

@admin_router.post("/lessons/{id}/edit", response_class=HTMLResponse)
async def admin_edit_lesson_post(request: Request, id: int = Path(...)):
    session = SessionLocal()
    lesson = session.query(Lesson).get(id)
    if not lesson:
        session.close()
        return RedirectResponse(url="/admin/lessons", status_code=status.HTTP_302_FOUND)
    
    try:
        form_data = await request.form()
        
        # Pro Lekci 0 a nov√© lekce s ot√°zkami
        if lesson.title.startswith("Lekce 0") or (lesson.questions and isinstance(lesson.questions, list) and len(lesson.questions) > 0 and isinstance(lesson.questions[0], dict)):
            title = form_data.get("title", "")
            description = form_data.get("description", "")
            level = form_data.get("level", "beginner")
            enabled_questions = form_data.getlist("enabled_questions")
            
            if not title:
                session.close()
                return templates.TemplateResponse("lessons/edit.html", {
                    "request": request, 
                    "lesson": lesson, 
                    "error": "N√°zev je povinn√Ω."
                })
            
            # Aktualizuj z√°kladn√≠ info
            lesson.title = title
            lesson.description = description
            lesson.level = level
            
            # Aktualizuj enabled stav ot√°zek
            if lesson.questions and isinstance(lesson.questions, list):
                for i, question in enumerate(lesson.questions):
                    if isinstance(question, dict):
                        question['enabled'] = str(i) in enabled_questions
            
            session.commit()
            logger.info(f"‚úÖ Lekce {lesson.id} aktualizov√°na: {len(enabled_questions)} aktivn√≠ch ot√°zek")
            session.close()
            return RedirectResponse(url="/admin/lessons", status_code=status.HTTP_302_FOUND)
        
        # Pro star√© lekce - p≈Øvodn√≠ logika
        title = form_data.get("title", "")
        language = form_data.get("language", "cs")
        script = form_data.get("script", "")
        questions = form_data.get("questions", "")
        
        errors = {"title": [], "language": [], "script": [], "questions": []}
        if not title:
            errors["title"].append("N√°zev je povinn√Ω.")
        if language not in ["cs", "en"]:
            errors["language"].append("Neplatn√Ω jazyk.")
        if not script:
            errors["script"].append("Skript je povinn√Ω.")
        
        if any(errors.values()):
            form = {"title": title, "language": language, "script": script, "questions": questions, "title.errors": errors["title"], "language.errors": errors["language"], "script.errors": errors["script"], "questions.errors": errors["questions"]}
            session.close()
            return templates.TemplateResponse("lessons/form.html", {"request": request, "lesson": lesson, "form": form})
        
        lesson.title = title
        lesson.language = language
        lesson.script = script
        lesson.questions = questions
        session.commit()
        
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå Chyba p≈ôi editaci lekce {id}: {e}")
        session.close()
        return templates.TemplateResponse("lessons/edit.html", {
            "request": request, 
            "lesson": lesson, 
            "error": f"Chyba p≈ôi ukl√°d√°n√≠: {str(e)}"
        })
    session.close()
    return RedirectResponse(url="/admin/lessons", status_code=status.HTTP_302_FOUND)

@admin_router.post("/lessons/{lesson_id}/delete", name="admin_delete_lesson")
def admin_delete_lesson(lesson_id: int = Path(...)):
    session = SessionLocal()
    lesson = session.query(Lesson).get(lesson_id)
    if lesson:
        try:
            session.delete(lesson)
            session.commit()
        except Exception as e:
            session.rollback()
        finally:
            session.close()
    else:
        session.close()
    return RedirectResponse(url="/admin/lessons", status_code=status.HTTP_302_FOUND)

@admin_router.post("/lessons/generate-questions", response_class=JSONResponse)
async def admin_generate_questions(request: Request):
    import json
    data = None
    try:
        data = await request.json()
    except Exception:
        return JSONResponse({"error": "Neplatn√Ω JSON"}, status_code=400)
    script = data.get("script")
    language = data.get("language", "cs")
    if not script:
        return JSONResponse({"error": "Chyb√≠ text skriptu"}, status_code=400)
    try:
        from app.services.openai_service import OpenAIService
        openai = OpenAIService()
        questions = openai.generate_questions(script, language)
        if not questions:
            return JSONResponse({"error": "Nepoda≈ôilo se vygenerovat ot√°zky. Zkontrolujte OpenAI API kl√≠ƒç."}, status_code=500)
        return JSONResponse({"questions": questions})
    except Exception as e:
        # Simulace pro v√Ωvoj bez OpenAI
        print(f"Chyba p≈ôi generov√°n√≠ ot√°zek: {e}")
        return JSONResponse({"questions": [{"question": "Uk√°zkov√° ot√°zka?", "answer": "Uk√°zkov√° odpovƒõƒè"}]})

@admin_router.get("/network-test", response_class=JSONResponse)
def admin_network_test():
    results = {}
    # Test DNS
    try:
        socket.gethostbyname('api.twilio.com')
        results['dns_twilio'] = 'OK'
    except Exception as e:
        results['dns_twilio'] = f'CHYBA: {str(e)}'
    try:
        socket.gethostbyname('api.openai.com')
        results['dns_openai'] = 'OK'
    except Exception as e:
        results['dns_openai'] = f'CHYBA: {str(e)}'
    # Test HTTP
    try:
        response = requests.get('https://httpbin.org/ip', timeout=10)
        results['http_test'] = f"OK - IP: {response.json().get('origin', 'unknown')}"
    except Exception as e:
        results['http_test'] = f'CHYBA: {str(e)}'
    return results

@admin_router.get("/db-test", response_class=JSONResponse)
def admin_db_test():
    session = SessionLocal()
    results = {}
    try:
        session.execute(text('SELECT 1'))
        results['db_connection'] = 'OK'
    except Exception as e:
        results['db_connection'] = f'CHYBA: {str(e)}'
    try:
        user_count = User.query.count()
        results['user_table'] = f'OK - {user_count} u≈æivatel≈Ø'
    except Exception as e:
        results['user_table'] = f'CHYBA: {str(e)}'
    try:
        lesson_count = Lesson.query.count()
        results['lesson_table'] = f'OK - {lesson_count} lekc√≠'
    except Exception as e:
        results['lesson_table'] = f'CHYBA: {str(e)}'
    session.close()
    return results

@admin_router.get("/init-db", response_class=JSONResponse)
def admin_init_db():
    session = SessionLocal()
    results = {}
    try:
        session.create_all()
        results['create_tables'] = 'OK'
    except Exception as e:
        results['create_tables'] = f'CHYBA: {str(e)}'
    try:
        user_count = User.query.count()
        lesson_count = Lesson.query.count()
        results['tables_check'] = f'OK - {user_count} u≈æivatel≈Ø, {lesson_count} lekc√≠'
    except Exception as e:
        results['tables_check'] = f'CHYBA: {str(e)}'
    session.close()
    return results

@admin_router.get("/debug/openai", response_class=JSONResponse)
def admin_debug_openai():
    try:
        from app.services.openai_service import OpenAIService
        api_key = os.getenv('OPENAI_API_KEY')
        api_key_exists = bool(api_key)
        api_key_length = len(api_key) if api_key else 0
        api_key_start = api_key[:7] + "..." if api_key and len(api_key) > 7 else "N/A"
        openai = OpenAIService()
        openai_enabled = getattr(openai, 'enabled', False)
        openai_client_exists = bool(getattr(openai, 'client', None))
        debug_info = {
            "environment_variables": {
                "OPENAI_API_KEY_exists": api_key_exists,
                "OPENAI_API_KEY_length": api_key_length,
                "OPENAI_API_KEY_start": api_key_start
            },
            "openai_service": {
                "service_exists": bool(openai),
                "enabled": openai_enabled,
                "client_exists": openai_client_exists
            },
            "timestamp": datetime.now().isoformat()
        }
        return debug_info
    except Exception as e:
        return {"error": str(e)}

@admin_router.get("/debug/database", response_class=JSONResponse)
def admin_debug_database():
    session = SessionLocal()
    database_url = os.getenv('DATABASE_URL')
    database_url_exists = bool(database_url)
    database_url_start = database_url[:20] + "..." if database_url and len(database_url) > 20 else "N/A"
    app_database_uri = session.engine.url if hasattr(session, 'engine') else 'N/A'
    app_database_uri_start = str(app_database_uri)[:20] + "..." if app_database_uri and len(str(app_database_uri)) > 20 else "N/A"
    try:
        session.execute(text('SELECT 1'))
        database_connection = "OK"
    except Exception as db_error:
        database_connection = f"ERROR: {str(db_error)}"
    session.close()
    debug_info = {
        "environment_variables": {
            "DATABASE_URL_exists": database_url_exists,
            "DATABASE_URL_start": database_url_start,
            "DATABASE_URL_full": database_url if database_url else "N/A"
        },
        "app_configuration": {
            "SQLALCHEMY_DATABASE_URI_start": app_database_uri_start,
            "SQLALCHEMY_DATABASE_URI_full": str(app_database_uri)
        },
        "database_connection": database_connection,
        "timestamp": datetime.now().isoformat()
    }
    return debug_info

@admin_router.get("/debug/env", response_class=JSONResponse)
def admin_debug_env():
    env_vars = [
        'DATABASE_URL',
        'OPENAI_API_KEY',
        'TWILIO_ACCOUNT_SID',
        'TWILIO_AUTH_TOKEN',
        'TWILIO_PHONE_NUMBER',
        'WEBHOOK_BASE_URL',
        'SECRET_KEY',
        'PORT',
        'FLASK_ENV',
        'FLASK_DEBUG'
    ]
    env_info = {}
    for var in env_vars:
        value = os.getenv(var)
        if value:
            if 'KEY' in var or 'TOKEN' in var or 'SID' in var:
                env_info[var] = f"{value[:10]}..." if len(value) > 10 else "***"
            elif 'URL' in var:
                env_info[var] = value
            else:
                env_info[var] = value
        else:
            env_info[var] = "NENASTAVENO"
    debug_info = {
        "environment_variables": env_info,
        "timestamp": datetime.now().isoformat()
    }
    return debug_info

@admin_router.get("/migrate-db", response_class=JSONResponse)
def admin_migrate_db():
    """Provede datab√°zov√© migrace pro nov√© funkce"""
    session = SessionLocal()
    results = {"migrations": []}
    
    try:
        # 1. P≈ôidej current_lesson_level do users
        try:
            session.execute(text("SELECT current_lesson_level FROM users LIMIT 1"))
            results["migrations"].append("current_lesson_level: ji≈æ existuje")
        except Exception:
            try:
                session.execute(text("ALTER TABLE users ADD COLUMN current_lesson_level INTEGER DEFAULT 0"))
                session.commit()
                results["migrations"].append("current_lesson_level: ‚úÖ p≈ôid√°n")
            except Exception as e:
                results["migrations"].append(f"current_lesson_level: ‚ùå {str(e)}")
                session.rollback()
        
        # 2. P≈ôidej lesson_number do lessons
        try:
            session.execute(text("SELECT lesson_number FROM lessons LIMIT 1"))
            results["migrations"].append("lesson_number: ji≈æ existuje")
        except Exception:
            try:
                session.execute(text("ALTER TABLE lessons ADD COLUMN lesson_number INTEGER DEFAULT 0"))
                session.execute(text("ALTER TABLE lessons ADD COLUMN required_score FLOAT DEFAULT 90.0"))
                session.execute(text("ALTER TABLE lessons ADD COLUMN lesson_type VARCHAR(20) DEFAULT 'standard'"))
                session.execute(text("ALTER TABLE lessons ADD COLUMN description TEXT"))
                session.commit()
                results["migrations"].append("lesson columns: ‚úÖ p≈ôid√°ny")
            except Exception as e:
                results["migrations"].append(f"lesson columns: ‚ùå {str(e)}")
                session.rollback()
        
        # 3. Vytvo≈ô user_progress tabulku
        try:
            session.execute(text("SELECT id FROM user_progress LIMIT 1"))
            results["migrations"].append("user_progress: ji≈æ existuje")
        except Exception:
            try:
                create_progress_table = """
                CREATE TABLE user_progress (
                    id SERIAL PRIMARY KEY,
                    user_id INTEGER REFERENCES users(id),
                    lesson_number INTEGER NOT NULL,
                    is_completed BOOLEAN DEFAULT FALSE,
                    best_score FLOAT,
                    attempts_count INTEGER DEFAULT 0,
                    first_completed_at TIMESTAMP,
                    last_attempt_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
                """
                session.execute(text(create_progress_table))
                session.commit()
                results["migrations"].append("user_progress: ‚úÖ vytvo≈ôena")
            except Exception as e:
                results["migrations"].append(f"user_progress: ‚ùå {str(e)}")
                session.rollback()
        
        results["status"] = "completed"
        
    except Exception as e:
        results["status"] = "error"
        results["error"] = str(e)
        session.rollback()
    finally:
        session.close()
    
    return results

# P≈ôipojen√≠ admin routeru
app.include_router(admin_router)

logger = logging.getLogger("uvicorn")

@app.get("/")
def root():
    return {"message": "Lecture App FastAPI bƒõ≈æ√≠!", "endpoints": ["/health", "/voice/", "/voice/media-stream"]}

@app.post("/")
async def root_post(request: Request, attempt_id: str = Query(None)):
    """Twilio nƒõkdy vol√° root endpoint m√≠sto /voice/ - p≈ôesmƒõrujeme na stejnou logiku"""
    logger.info("P≈ôijat Twilio webhook na ROOT / endpoint")
    logger.info(f"Attempt ID: {attempt_id}")
    
    # Stejn√° TwiML odpovƒõƒè jako v /voice/
    response = """<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Say language="cs-CZ" rate="0.9" voice="Google.cs-CZ-Standard-A">V√≠tejte u AI asistenta pro v√Ωuku jazyk≈Ø.</Say>
    <Say language="cs-CZ" rate="0.9" voice="Google.cs-CZ-Standard-A">Nyn√≠ v√°s p≈ôipojuji k AI asistentovi.</Say>
    <Start>
        <Stream url="wss://lecture-app-production.up.railway.app/audio" track="both_tracks" statusCallback="https://lecture-app-production.up.railway.app/stream-callback" />
    </Start>
    <Pause length="3600"/>
</Response>"""
    logger.info(f"TwiML odpovƒõƒè z ROOT: {response}")
    return Response(content=response, media_type="text/xml")

@app.get("/health")
def health():
    return {"status": "healthy", "service": "lecture-app"}

@app.post("/stream-callback")
async def stream_callback(request: Request):
    """Twilio Stream statusCallback endpoint"""
    logger.info("P≈ôijat Twilio Stream statusCallback")
    
    # P≈ôeƒçteme data z requestu
    form_data = await request.form()
    callback_data = dict(form_data)
    
    logger.info(f"Stream callback data: {callback_data}")
    
    # Zpracujeme r≈Øzn√© typy stream event≈Ø
    stream_event = callback_data.get('StreamEvent')
    stream_sid = callback_data.get('StreamSid')
    
    if stream_event == 'stream-started':
        logger.info(f"üü¢ Stream {stream_sid} spu≈°tƒõn")
    elif stream_event == 'stream-stopped':
        logger.info(f"üî¥ Stream {stream_sid} ukonƒçen - WebSocket by mƒõl b√Ωt uzav≈ôen")
        # Zde by mohlo b√Ωt dodateƒçn√© cleanup pokud pot≈ôebujeme
    elif stream_event == 'stream-error':
        error_code = callback_data.get('StreamErrorCode')
        error_msg = callback_data.get('StreamError')
        logger.error(f"‚ùå Stream {stream_sid} chyba {error_code}: {error_msg}")
    
    return {"status": "ok"}

@app.post("/voice/call")
async def voice_call_handler(request: Request):
    """Handler pro Twilio Voice webhook na /voice/call endpoint"""
    logger.info("P≈ôijat Twilio webhook na /voice/call")
    
    # Z√≠sk√°me form data z Twilio
    form_data = await request.form()
    
    # Logov√°n√≠ d≈Øle≈æit√Ωch informac√≠
    from_number = form_data.get('From', 'Unknown')
    to_number = form_data.get('To', 'Unknown') 
    call_sid = form_data.get('CallSid', 'Unknown')
    
    logger.info(f"Call SID: {call_sid}")
    logger.info(f"From: {from_number} -> To: {to_number}")
    
    # Zkus√≠me z√≠skat attempt_id z query parametr≈Ø
    attempt_id = request.query_params.get('attempt_id')
    logger.info(f"Attempt ID: {attempt_id}")
    
    # Vytvo≈ô√≠me TwiML odpovƒõƒè
    twiml_response = f'''<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Say language="cs-CZ" rate="0.9" voice="Google.cs-CZ-Standard-A">V√≠tejte u AI asistenta pro v√Ωuku jazyk≈Ø.</Say>
    <Say language="cs-CZ" rate="0.9" voice="Google.cs-CZ-Standard-A">WebSocket test - pokud sly≈°√≠te tuto zpr√°vu, HTTP funguje.</Say>
    <Say language="cs-CZ" rate="0.9" voice="Google.cs-CZ-Standard-A">Nyn√≠ testuji WebSocket p≈ôipojen√≠.</Say>
    <Start>
        <Stream 
            name="ai_assistant_stream"
            url="wss://lecture-app-production.up.railway.app/audio" 
            track="both_tracks" 
            statusCallback="https://lecture-app-production.up.railway.app/stream-callback"
            statusCallbackMethod="POST"
        />
    </Start>
    <Pause length="3600"/>
</Response>'''
    
    logger.info(f"TwiML odpovƒõƒè z /voice/call: {twiml_response}")
    
    return Response(
        content=twiml_response,
        media_type="application/xml"
    )

@app.post("/voice/")
async def voice_handler(request: Request):
    logger.info("P≈ôijat Twilio webhook na /voice/")
    logger.info(f"Attempt ID: {request.query_params.get('attempt_id')}")
    
    # Z√≠sk√°n√≠ parametr≈Ø hovoru
    form = await request.form()
    caller_country = form.get("CallerCountry", "")
    to_country = form.get("ToCountry", "")
    logger.info(f"Volaj√≠c√≠: {caller_country} -> {to_country}")
    
    response = VoiceResponse()
    
    # Uv√≠t√°n√≠ s funkƒçn√≠m TTS
    response.say(
        "V√≠tejte u AI asistenta pro v√Ωuku jazyk≈Ø!",
        language="cs-CZ",
        rate="0.9",
        voice="Google.cs-CZ-Standard-A"
    )
    
    response.say(
        "M≈Ø≈æete se mƒõ zeptat na cokoliv nebo mi ≈ô√≠ct, co v√°s zaj√≠m√°.",
        language="cs-CZ",
        rate="0.9",
        voice="Google.cs-CZ-Standard-A"
    )
    
    # Gather pro zachycen√≠ hlasov√©ho vstupu
    gather = response.gather(
        input='speech',
        timeout=10,
        speech_timeout='auto',
        action='/voice/process',
        method='POST',
        language='cs-CZ',
        speech_model='phone_call'
    )
    
    gather.say(
        "Mluvte pros√≠m, naslouch√°m...",
        language="cs-CZ",
        rate="0.9",
        voice="Google.cs-CZ-Standard-A"
    )
    
    # Fallback pokud u≈æivatel neodpov√≠
    response.say(
        "Nerozumƒõl jsem v√°m. Zkuste to pros√≠m znovu nebo hovor ukonƒçete.",
        language="cs-CZ",
        rate="0.9",
        voice="Google.cs-CZ-Standard-A"
    )
    
    response.hangup()
    
    logger.info(f"TwiML odpovƒõƒè (hybridn√≠): {response}")
    return Response(content=str(response), media_type="text/xml")

@app.post("/voice/process")
async def process_speech(request: Request):
    """Zpracuje hlasov√Ω vstup od u≈æivatele s inteligentn√≠m syst√©mem lekc√≠"""
    logger.info("P≈ôijat hlasov√Ω vstup od u≈æivatele")
    
    form = await request.form()
    speech_result = form.get('SpeechResult', '')
    confidence = form.get('Confidence', '0')
    
    logger.info(f"Rozpoznan√° ≈ôeƒç: '{speech_result}' (confidence: {confidence})")
    
    response = VoiceResponse()
    
    if speech_result:
        try:
            openai_api_key = os.getenv('OPENAI_API_KEY')
            if openai_api_key:
                import openai
                client = openai.OpenAI(api_key=openai_api_key)
                
                logger.info("ü§ñ Generuji odpovƒõƒè pomoc√≠ OpenAI GPT...")
                
                # Z√≠skej attempt_id z query parametr≈Ø
                attempt_id = request.query_params.get('attempt_id')
                current_lesson = None
                current_user = None
                lesson_content = ""
                
                session = SessionLocal()
                try:
                    if attempt_id:
                        attempt = session.query(Attempt).get(int(attempt_id))
                        if attempt:
                            current_lesson = attempt.lesson
                            current_user = attempt.user
                            logger.info(f"üë§ U≈æivatel: {current_user.name}, Lekce: {current_lesson.title}")
                    
                    # Pokud nen√≠ attempt, najdi posledn√≠ho u≈æivatele
                    if not current_user:
                        current_user = session.query(User).order_by(User.id.desc()).first()
                    
                    if not current_user:
                        logger.error("‚ùå ≈Ω√°dn√Ω u≈æivatel nenalezen!")
                        session.close()
                        response.say("Omlouv√°m se, do≈°lo k technick√© chybƒõ.", language="cs-CZ")
                        response.hangup()
                        return Response(content=str(response), media_type="text/xml")
                    
                    # INTELIGENTN√ç V√ùBƒöR LEKCE PODLE POKROKU U≈ΩIVATELE
                    user_level = getattr(current_user, 'current_lesson_level', 0)
                    logger.info(f"üéØ U≈æivatel je na √∫rovni: {user_level}")
                    
                    # Najdi spr√°vnou lekci podle √∫rovnƒõ u≈æivatele
                    if user_level == 0:
                        # Vstupn√≠ test - Lekce 0
                        target_lesson = session.query(Lesson).filter(
                            Lesson.title.contains("Lekce 0")
                        ).first()
                        
                        if target_lesson and target_lesson.questions:
                            # VSTUPN√ç TEST - konkr√©tn√≠ ot√°zky
                            enabled_questions = []
                            if isinstance(target_lesson.questions, list):
                                enabled_questions = [
                                    q for q in target_lesson.questions 
                                    if isinstance(q, dict) and q.get('enabled', True)
                                ]
                            
                            if enabled_questions:
                                # Vyber n√°hodnou ot√°zku pro testov√°n√≠
                                import random
                                test_question = random.choice(enabled_questions)
                                
                                system_prompt = f"""Jsi AI examin√°tor pro vstupn√≠ test z obr√°bƒõc√≠ch kapalin a servisu.

TESTOVAC√ç OT√ÅZKA:
{test_question.get('question', '')}

SPR√ÅVN√Å ODPOVƒöƒé:
{test_question.get('correct_answer', '')}

KL√çƒåOV√Å SLOVA:
{', '.join(test_question.get('keywords', []))}

INSTRUKCE:
1. Porovnej odpovƒõƒè studenta se spr√°vnou odpovƒõd√≠
2. Vyhodno≈• na ≈°k√°le 0-100%
3. Poskytni kr√°tkou zpƒõtnou vazbu
4. POVINNƒö p≈ôidej na konec: [SK√ìRE: XX%]

P≈ò√çKLAD: "Spr√°vnƒõ! Obr√°bƒõc√≠ kapaliny skuteƒçnƒõ slou≈æ√≠ k chlazen√≠ a maz√°n√≠. [SK√ìRE: 90%]"

Student odpovƒõdƒõl: "{speech_result}"
Vyhodno≈• jeho odpovƒõƒè."""

                                gpt_response = client.chat.completions.create(
                                    model="gpt-4o-mini",
                                    messages=[
                                        {"role": "system", "content": system_prompt}
                                    ],
                                    max_tokens=150,
                                    temperature=0.3
                                )
                                
                                ai_answer = gpt_response.choices[0].message.content
                                
                                # Extrakce sk√≥re
                                import re
                                score_match = re.search(r'\[SK√ìRE:\s*(\d+)%\]', ai_answer)
                                current_score = int(score_match.group(1)) if score_match else 0
                                clean_answer = re.sub(r'\[SK√ìRE:\s*\d+%\]', '', ai_answer).strip()
                                
                                logger.info(f"üìä Vstupn√≠ test sk√≥re: {current_score}%")
                                
                                # Kontrola postupu do Lekce 1
                                if current_score >= 90:
                                    current_user.current_lesson_level = 1
                                    session.commit()
                                    clean_answer += f" Gratulujeme! Dos√°hli jste {current_score}% a postoupili do Lekce 1!"
                                    logger.info(f"üéâ U≈æivatel postoupil do Lekce 1")
                                else:
                                    clean_answer += f" Dos√°hli jste {current_score}%. Pro postup pot≈ôebujete alespo≈à 90%. Zkuste to znovu!"
                                
                                response.say(clean_answer, language="cs-CZ", rate="0.9")
                            else:
                                response.say("Vstupn√≠ test nen√≠ p≈ôipraven. Kontaktujte administr√°tora.", language="cs-CZ")
                        else:
                            response.say("Vstupn√≠ test nebyl nalezen. Kontaktujte administr√°tora.", language="cs-CZ")
                    
                    elif user_level >= 1:
                        # ≈†KOLN√ç LEKCE - najdi lekci podle √∫rovnƒõ
                        target_lesson = session.query(Lesson).filter(
                            Lesson.level == "beginner"
                        ).first()
                        
                        if target_lesson and target_lesson.script:
                            lesson_content = target_lesson.script
                            
                            # AUTOMATICK√â GENEROV√ÅN√ç OT√ÅZEK Z OBSAHU LEKCE
                            from app.services.openai_service import OpenAIService
                            openai_service = OpenAIService()
                            
                            # Generuj 10 n√°hodn√Ωch ot√°zek z obsahu lekce
                            generated_questions = openai_service.generate_questions_from_lesson(
                                lesson_script=lesson_content,
                                language="cs",
                                num_questions=10
                            )
                            
                            if generated_questions:
                                # Vyber n√°hodnou ot√°zku pro testov√°n√≠
                                import random
                                test_question = random.choice(generated_questions)
                                
                                system_prompt = f"""Jsi AI uƒçitel pro lekci: {target_lesson.title}

OBSAH LEKCE:
{lesson_content[:500]}...

TESTOVAC√ç OT√ÅZKA:
{test_question.get('question', '')}

SPR√ÅVN√Å ODPOVƒöƒé:
{test_question.get('correct_answer', '')}

INSTRUKCE:
1. Vyhodno≈• odpovƒõƒè studenta podle obsahu lekce
2. Porovnej se spr√°vnou odpovƒõd√≠
3. Poskytni konstruktivn√≠ zpƒõtnou vazbu
4. POVINNƒö p≈ôidej sk√≥re: [SK√ìRE: XX%]

Student odpovƒõdƒõl: "{speech_result}"
Vyhodno≈• jeho odpovƒõƒè podle lekce."""

                                gpt_response = client.chat.completions.create(
                                    model="gpt-4o-mini",
                                    messages=[
                                        {"role": "system", "content": system_prompt}
                                    ],
                                    max_tokens=200,
                                    temperature=0.4
                                )
                                
                                ai_answer = gpt_response.choices[0].message.content
                                
                                # Extrakce sk√≥re
                                import re
                                score_match = re.search(r'\[SK√ìRE:\s*(\d+)%\]', ai_answer)
                                current_score = int(score_match.group(1)) if score_match else 0
                                clean_answer = re.sub(r'\[SK√ìRE:\s*\d+%\]', '', ai_answer).strip()
                                
                                logger.info(f"üìä Lekce {user_level} sk√≥re: {current_score}%")
                                
                                # Kontrola postupu do dal≈°√≠ lekce
                                if current_score >= 90:
                                    current_user.current_lesson_level = user_level + 1
                                    session.commit()
                                    clean_answer += f" V√Ωbornƒõ! Dos√°hli jste {current_score}% a postoupili do dal≈°√≠ lekce!"
                                    logger.info(f"üéâ U≈æivatel postoupil do lekce {user_level + 1}")
                                else:
                                    clean_answer += f" Dos√°hli jste {current_score}%. Pro postup pot≈ôebujete alespo≈à 90%."
                                
                                response.say(clean_answer, language="cs-CZ", rate="0.9")
                            else:
                                # Fallback - obecn√° konverzace o lekci
                                system_prompt = f"""Jsi AI uƒçitel. Odpov√≠dej na ot√°zky o t√©to lekci:

{lesson_content}

Student se zeptal: "{speech_result}"
Odpovƒõz mu jasnƒõ a srozumitelnƒõ v ƒçe≈°tinƒõ."""

                                gpt_response = client.chat.completions.create(
                                    model="gpt-4o-mini",
                                    messages=[
                                        {"role": "system", "content": system_prompt}
                                    ],
                                    max_tokens=150,
                                    temperature=0.7
                                )
                                
                                ai_answer = gpt_response.choices[0].message.content
                                response.say(ai_answer, language="cs-CZ", rate="0.9")
                        else:
                            response.say("Lekce pro va≈°i √∫rove≈à nebyla nalezena. Kontaktujte administr√°tora.", language="cs-CZ")
                    
                except Exception as db_error:
                    logger.error(f"‚ùå Chyba p≈ôi pr√°ci s datab√°z√≠: {db_error}")
                    response.say("Do≈°lo k technick√© chybƒõ. Zkuste to pros√≠m pozdƒõji.", language="cs-CZ")
                finally:
                    session.close()
            else:
                logger.warning("‚ö†Ô∏è OPENAI_API_KEY nen√≠ nastaven")
                response.say("AI slu≈æba nen√≠ dostupn√°.", language="cs-CZ")
        
        except Exception as e:
            logger.error(f"‚ùå Chyba p≈ôi zpracov√°n√≠: {e}")
            response.say("Do≈°lo k neoƒçek√°van√© chybƒõ.", language="cs-CZ")
        
        # Dal≈°√≠ kolo konverzace
        gather = response.gather(
            input='speech',
            timeout=15,
            action='/voice/process',
            method='POST',
            language='cs-CZ',
            speech_model='phone_call'
        )
        
        gather.say(
            "M√°te dal≈°√≠ ot√°zku nebo chcete pokraƒçovat?",
            language="cs-CZ",
            rate="0.9"
        )
        
        response.say(
            "Dƒõkuji za rozhovor. Na shledanou!",
            language="cs-CZ",
            rate="0.9"
        )
    else:
        response.say(
            "Nerozumƒõl jsem v√°m. Hovor ukonƒçuji.",
            language="cs-CZ",
            rate="0.9"
        )
    
    response.hangup()
    return Response(content=str(response), media_type="text/xml")

@app.post("/voice/start-stream/")
async def voice_start_stream(request: Request):
    """TwiML odpovƒõƒè s <Start><Stream> pro Media Streams (obousmƒõrnƒõ)."""
    response = """
<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Say language="cs-CZ" rate="0.9" voice="Google.cs-CZ-Standard-A">
        V√≠tejte u AI asistenta pro v√Ωuku jazyk≈Ø.
    </Say>
    <Start>
        <Stream url="wss://lecture-app-production.up.railway.app/audio" track="both" />
    </Start>
</Response>
"""
    return Response(content=response, media_type="text/xml")

# Pomocn√° funkce pro pr√°ci s OpenAI Assistant
async def get_assistant_info(client, assistant_id: str):
    """Z√≠sk√° informace o OpenAI asistentovi"""
    try:
        assistant = await client.beta.assistants.retrieve(assistant_id)
        logger.info(f"Assistant info - ID: {assistant.id}, Name: {assistant.name}, Model: {assistant.model}")
        return assistant
    except Exception as e:
        logger.error(f"Chyba p≈ôi z√≠sk√°v√°n√≠ informac√≠ o asistentovi {assistant_id}: {e}")
        return None

async def wav_to_mulaw(audio_data: bytes) -> bytes:
    """P≈ôevede WAV audio na Œº-law form√°t pro Twilio"""
    try:
        from pydub import AudioSegment
        
        # Naƒçteme WAV audio
        audio_segment = AudioSegment.from_wav(io.BytesIO(audio_data))
        
        # P≈ôevedeme na 8kHz mono
        audio_segment = audio_segment.set_frame_rate(8000).set_channels(1)
        
        # P≈ôevedeme na Œº-law
        raw_audio = audio_segment.raw_data
        mulaw_audio = audioop.lin2ulaw(raw_audio, 2)  # 2 bytes per sample
        
        return mulaw_audio
    except Exception as e:
        logger.error(f"Chyba p≈ôi p≈ôevodu WAV na Œº-law: {e}")
        return b""

async def send_tts_to_twilio(websocket: WebSocket, text: str, stream_sid: str, client):
    """Ode≈°le TTS audio do Twilio WebSocket streamu"""
    try:
        # Kontrola jestli je WebSocket st√°le p≈ôipojen
        try:
            # Ping test pro ovƒõ≈ôen√≠ p≈ôipojen√≠
            await websocket.ping()
            logger.debug("TTS: WebSocket ping OK")
        except Exception as ping_error:
            logger.warning(f"TTS: WebSocket ping failed: {ping_error}")
            logger.warning("WebSocket nen√≠ p≈ôipojen, p≈ôeskakujem TTS")
            return
            
        logger.info(f"üîä Generuji TTS pro text: '{text[:50]}...'")
        
        # Generace TTS pomoc√≠ OpenAI
        response = client.audio.speech.create(
            model="tts-1",
            voice="nova",
            input=text,
            response_format="wav"
        )
        
        # P≈ôevod na G.711 Œº-law pro Twilio
        audio_data = response.content
        
        # Zde by mƒõla b√Ωt konverze na G.711, ale pro jednoduchost pou≈æijeme base64
        import base64
        audio_b64 = base64.b64encode(audio_data).decode()
        
        # Rozdƒõl√≠me na chunky a po≈°leme
        chunk_size = 1000  # Base64 chunky
        for i in range(0, len(audio_b64), chunk_size):
            chunk = audio_b64[i:i+chunk_size]
            
            media_message = {
                "event": "media",
                "streamSid": stream_sid,
                "media": {
                    "payload": chunk
                }
            }
            
            if stream_sid:  # Pouze pokud m√°me stream_sid
                await websocket.send_text(json.dumps(media_message))
                await asyncio.sleep(0.05)  # 50ms mezi chunky
        
        logger.info("‚úÖ TTS audio odesl√°no")
        
    except Exception as e:
        logger.error(f"Chyba p≈ôi TTS: {e}")

async def process_audio_chunk(websocket: WebSocket, audio_data: bytes, 
                             stream_sid: str, client, assistant_id: str, thread_id: str):
    """Zpracuje audio chunk pomoc√≠ OpenAI Assistant API v real-time"""
    try:
        logger.info(f"üéß === PROCESS_AUDIO_CHUNK SPU≈†TƒöN === ({len(audio_data)} bajt≈Ø)")
        
        if len(audio_data) < 1000:  # P≈ô√≠li≈° mal√Ω chunk, ignorujeme
            logger.info(f"‚ö†Ô∏è P≈ô√≠li≈° mal√Ω chunk ({len(audio_data)} bajt≈Ø), ignoruji")
            return
            
        logger.info(f"üéß Zpracov√°v√°m audio chunk ({len(audio_data)} bajt≈Ø)")
        
        # Ulo≈æ√≠me audio do doƒçasn√©ho souboru
        import tempfile
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmp_file:
            logger.info("üìÅ Vytv√°≈ô√≠m doƒçasn√Ω WAV soubor")
            # Vytvo≈ô√≠me jednoduch√Ω WAV header pro Œº-law audio
            import struct
            
            # WAV header pro Œº-law, 8kHz, mono
            wav_header = struct.pack('<4sI4s4sIHHIIHH4sI',
                b'RIFF', len(audio_data) + 44 - 8,  # File size
                b'WAVE',
                b'fmt ', 16,  # Format chunk size
                7,  # Œº-law format
                1,  # Mono
                8000,  # Sample rate
                8000,  # Byte rate
                1,  # Block align
                8,  # Bits per sample
                b'data', len(audio_data)
            )
            
            tmp_file.write(wav_header)
            tmp_file.write(audio_data)
            tmp_file_path = tmp_file.name
            logger.info(f"üìÅ WAV soubor vytvo≈ôen: {tmp_file_path}")
        
        try:
            logger.info("üé§ Spou≈°t√≠m Whisper STT...")
            # OpenAI Whisper pro STT
            with open(tmp_file_path, "rb") as audio_file:
                transcript = client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file,
                    language="cs"
                )
            
            user_text = transcript.text.strip()
            logger.info(f"üìù Transkripce DOKONƒåENA: '{user_text}'")
            
            if not user_text or len(user_text) < 3:
                logger.info("‚ö†Ô∏è P≈ô√≠li≈° kr√°tk√° transkripce, ignoruji")
                return
            
            logger.info("ü§ñ P≈ôid√°v√°m zpr√°vu do Assistant threadu...")
            # P≈ôid√°me zpr√°vu do threadu
            client.beta.threads.messages.create(
                thread_id=thread_id,
                role="user",
                content=user_text
            )
            
            logger.info("üöÄ Spou≈°t√≠m Assistant run...")
            # Spust√≠me asistenta
            run = client.beta.threads.runs.create(
                thread_id=thread_id,
                assistant_id=assistant_id
            )
            
            logger.info(f"‚è≥ ƒåek√°m na dokonƒçen√≠ Assistant run (ID: {run.id})...")
            # ƒåek√°me na dokonƒçen√≠ (s timeout)
            import time
            max_wait = 15  # 15 sekund timeout pro rychlej≈°√≠ odpovƒõƒè
            start_time = time.time()
            
            while run.status in ["queued", "in_progress"] and (time.time() - start_time) < max_wait:
                await asyncio.sleep(0.5)  # Krat≈°√≠ interval pro rychlej≈°√≠ odpovƒõƒè
                run = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
                logger.info(f"‚è≥ Run status: {run.status}")
            
            if run.status == "completed":
                logger.info("‚úÖ Assistant run DOKONƒåEN! Z√≠sk√°v√°m odpovƒõƒè...")
                # Z√≠sk√°me nejnovƒõj≈°√≠ odpovƒõƒè
                messages = client.beta.threads.messages.list(thread_id=thread_id, limit=1)
                
                for message in messages.data:
                    if message.role == "assistant":
                        for content in message.content:
                            if content.type == "text":
                                assistant_response = content.text.value
                                logger.info(f"ü§ñ Assistant odpovƒõƒè Z√çSK√ÅNA: '{assistant_response}'")
                                
                                # Po≈°leme jako TTS
                                logger.info("üîä Odes√≠l√°m TTS odpovƒõƒè...")
                                await send_tts_to_twilio(websocket, assistant_response, stream_sid, client)
                                logger.info("‚úÖ TTS odpovƒõƒè ODESL√ÅNA!")
                                return
                
                logger.warning("‚ö†Ô∏è ≈Ω√°dn√° assistant odpovƒõƒè nenalezena")
            else:
                logger.warning(f"‚ö†Ô∏è Assistant run ne√∫spƒõ≈°n√Ω: {run.status}")
                
        finally:
            # Vyƒçist√≠me doƒçasn√Ω soubor
            import os
            try:
                os.unlink(tmp_file_path)
                logger.info("üóëÔ∏è Doƒçasn√Ω soubor vymaz√°n")
            except:
                pass
                
    except Exception as e:
        logger.error(f"‚ùå CHYBA p≈ôi zpracov√°n√≠ audio: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")

@app.websocket("/audio-test")
async def audio_stream_test(websocket: WebSocket):
    """Jednoduch√Ω test WebSocket handler bez OpenAI p≈ôipojen√≠"""
    await websocket.accept()
    logger.info("=== AUDIO TEST WEBSOCKET HANDLER SPU≈†TƒöN ===")
    
    try:
        while True:
            # ƒåek√°me na zpr√°vu od klienta
            data = await websocket.receive_text()
            logger.info(f"P≈ôijata zpr√°va: {data[:100]}...")
            
            # Parsujeme JSON
            try:
                message = json.loads(data)
                event_type = message.get("event", "unknown")
                logger.info(f"Event type: {event_type}")
                
                if event_type == "start":
                    logger.info("Start event - odes√≠l√°m odpovƒõƒè")
                    response = {
                        "event": "test_response",
                        "message": "Test WebSocket funguje!"
                    }
                    await websocket.send_text(json.dumps(response))
                    
                elif event_type == "media":
                    logger.info("Media event - ignoruji")
                    
                elif event_type == "stop":
                    logger.info("Stop event - ukonƒçuji")
                    break
                    
            except json.JSONDecodeError as e:
                logger.error(f"Chyba p≈ôi parsov√°n√≠ JSON: {e}")
                
    except WebSocketDisconnect:
        logger.info("WebSocket odpojen√≠")
    except Exception as e:
        logger.error(f"Chyba v test handleru: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
    finally:
        logger.info("=== AUDIO TEST WEBSOCKET HANDLER UKONƒåEN ===")

@app.websocket("/audio")
async def audio_stream(websocket: WebSocket):
    """WebSocket endpoint pro Twilio Media Stream s robustn√≠m connection managementem"""
    
    # PRINT pro Railway stdout
    print("üöÄ === AUDIO_STREAM FUNKCE SPU≈†TƒöNA! ===")
    print(f"üîó WebSocket client: {websocket.client}")
    print(f"üìã WebSocket headers: {dict(websocket.headers)}")
    
    logger.info("üöÄ === AUDIO_STREAM FUNKCE SPU≈†TƒöNA! ===")
    logger.info(f"üîó WebSocket client: {websocket.client}")
    logger.info(f"üìã WebSocket headers: {dict(websocket.headers)}")
    
    # KRITICK√â: Mus√≠me nejprve p≈ôijmout WebSocket p≈ôipojen√≠
    try:
        await websocket.accept()
        print("‚úÖ DEBUG: WebSocket connection accepted.")
        logger.info("‚úÖ DEBUG: WebSocket connection accepted.")
    except Exception as accept_error:
        print(f"‚ùå CHYBA p≈ôi websocket.accept(): {accept_error}")
        logger.error(f"‚ùå CHYBA p≈ôi websocket.accept(): {accept_error}")
        return
        
    # Inicializace OpenAI klienta
    openai_api_key = os.getenv('OPENAI_API_KEY')
    if not openai_api_key:
        logger.error("‚ùå OPENAI_API_KEY nen√≠ nastaven")
        await websocket.close()
        return
        
    logger.info("ü§ñ Inicializuji OpenAI klienta...")
    import openai
    client = openai.OpenAI(api_key=openai_api_key)
    logger.info("‚úÖ OpenAI klient inicializov√°n")
    
    # Vytvo≈ô√≠me nov√©ho assistanta s ƒçesk√Ωmi instrukcemi pro v√Ωuku jazyk≈Ø
    logger.info("üéØ Vytv√°≈ô√≠m nov√©ho Assistant...")
    try:
        assistant = client.beta.assistants.create(
            name="AI Asistent pro v√Ωuku jazyk≈Ø",
            instructions="""Jsi AI asistent pro v√Ωuku jazyk≈Ø. Komunikuje≈° POUZE v ƒçe≈°tinƒõ.

TVOJE ROLE:
- Pom√°h√°≈° student≈Øm s v√Ωukou jazyk≈Ø
- Mluv√≠≈° pouze ƒçesky, p≈ôirozenƒõ a srozumitelnƒõ
- Jsi trpƒõliv√Ω, povzbuzuj√≠c√≠ a p≈ô√°telsk√Ω
- Odpov√≠d√°≈° struƒçnƒõ a jasnƒõ

TVOJE √öKOLY:
- Odpov√≠dej na ot√°zky student≈Ø
- Vysvƒõtluj jazykov√© koncepty
- Poskytuj zpƒõtnou vazbu na odpovƒõdi
- Klade≈° jednoduch√© ot√°zky pro ovƒõ≈ôen√≠ porozumƒõn√≠
- Buƒè konstruktivn√≠ a motivuj√≠c√≠

STYL KOMUNIKACE:
- Pou≈æ√≠vej p≈ôirozen√Ω konverzaƒçn√≠ styl
- Kr√°tk√©, srozumiteln√© vƒõty
- Pozitivn√≠ p≈ô√≠stup
- Pokud student nƒõco nev√≠, vysvƒõtli to jednodu≈°e

V≈ædy z≈Øst√°vaj v roli uƒçitele jazyk≈Ø a komunikuj pouze v ƒçe≈°tinƒõ.""",
            model="gpt-4-1106-preview",
            tools=[]
        )
        assistant_id = assistant.id
        logger.info(f"‚úÖ Vytvo≈ôen nov√Ω Assistant: {assistant_id}")
    except Exception as e:
        logger.error(f"‚ùå Chyba p≈ôi vytv√°≈ôen√≠ Assistanta: {e}")
        # Fallback na existuj√≠c√≠ Assistant
        assistant_id = "asst_W6120kPP1lLBzU5OQLYvH6W1"
        logger.info(f"üîÑ Pou≈æ√≠v√°m existuj√≠c√≠ Assistant: {assistant_id}")
    
    thread = None
    
    try:
        logger.info("=== AUDIO WEBSOCKET HANDLER SPU≈†TƒöN ===")
        
        # Vytvo≈ô√≠me nov√Ω thread pro konverzaci
        thread = client.beta.threads.create()
        logger.info(f"‚úÖ Thread vytvo≈ôen: {thread.id}")
        
        # Inicializace promƒõnn√Ωch
        stream_sid = None
        audio_buffer = bytearray()
        
        # √övodn√≠ zpr√°va - poƒçk√°me na stream_sid
        initial_message = "Ahoj! Jsem AI asistent pro v√Ωuku jazyk≈Ø. Jak v√°m mohu pomoci?"
        initial_message_sent = False
        
        # Okam≈æit√° √∫vodn√≠ zpr√°va (bez ƒçek√°n√≠ na stream_sid)
        welcome_message = "P≈ôipojuji se k AI asistentovi. Moment pros√≠m."
        welcome_sent = False
        
        # Keepalive task pro udr≈æen√≠ WebSocket p≈ôipojen√≠
        keepalive_task = None
        websocket_active = True  # Flag pro sledov√°n√≠ stavu p≈ôipojen√≠
        
        async def keepalive_sender():
            """Periodicky odes√≠l√° keepalive zpr√°vy"""
            nonlocal websocket_active
            try:
                while websocket_active:
                    await asyncio.sleep(10)  # Ka≈æd√Ωch 10 sekund
                    
                    if not websocket_active:
                        logger.info("üíì WebSocket neaktivn√≠, ukonƒçujem keepalive")
                        break
                        
                    if stream_sid:
                        try:
                            # Po≈°leme pr√°zdn√Ω media chunk jako keepalive
                            keepalive_msg = {
                                "event": "media",
                                "streamSid": stream_sid,
                                "media": {
                                    "payload": ""  # Pr√°zdn√Ω payload
                                }
                            }
                            await websocket.send_text(json.dumps(keepalive_msg))
                            logger.info("üíì Keepalive odesl√°no")
                        except Exception as send_error:
                            logger.error(f"üíì Keepalive send error: {send_error}")
                            websocket_active = False
                            break
            except Exception as e:
                logger.error(f"Keepalive chyba: {e}")
        
        # Hlavn√≠ smyƒçka pro zpracov√°n√≠ WebSocket zpr√°v
        while websocket_active:
            try:
                logger.info("üîÑ DEBUG: ƒåek√°m na WebSocket data...")
                
                # Kontrola stavu WebSocket p≈ôed ƒçten√≠m
                try:
                    # Pokus√≠me se o rychl√Ω ping test
                    await websocket.ping()
                    logger.info("‚úÖ DEBUG: WebSocket ping OK")
                except Exception as ping_error:
                    logger.info(f"‚ùå DEBUG: WebSocket ping failed: {ping_error}")
                    logger.info("DEBUG: WebSocket je pravdƒõpodobnƒõ zav≈ôen, ukonƒçujem smyƒçku")
                    websocket_active = False
                    break
                
                logger.info("üì• DEBUG: Vol√°m websocket.receive_text()...")
                data = await websocket.receive_text()
                logger.info(f"üì® DEBUG: P≈ôijata data ({len(data)} znak≈Ø): {data[:200]}...")
                
                try:
                    msg = json.loads(data)
                    logger.info(f"‚úÖ DEBUG: JSON parsov√°n√≠ OK")
                    event = msg.get("event", "unknown")
                    logger.info(f"üéØ DEBUG: Event typ: '{event}'")
                except json.JSONDecodeError as json_error:
                    logger.error(f"‚ùå DEBUG: JSON parsing CHYBA: {json_error}")
                    logger.error(f"‚ùå DEBUG: Problematick√° data: {data}")
                    continue
                
                if event == "start":
                    logger.info("=== MEDIA STREAM START EVENT P≈òIJAT! ===")
                    stream_sid = msg.get("streamSid")
                    logger.info(f"Stream SID: {stream_sid}")
                    
                    # Spust√≠me keepalive task
                    if not keepalive_task:
                        keepalive_task = asyncio.create_task(keepalive_sender())
                        logger.info("üíì Keepalive task spu≈°tƒõn")
                    
                    # Po≈°leme okam≈æitou welcome zpr√°vu
                    if not welcome_sent:
                        logger.info("üîä Odes√≠l√°m welcome zpr√°vu")
                        await send_tts_to_twilio(websocket, welcome_message, stream_sid, client)
                        welcome_sent = True
                    
                    # Po≈°leme √∫vodn√≠ zpr√°vu po kr√°tk√© pauze
                    if not initial_message_sent:
                        await asyncio.sleep(3)  # Kr√°tk√° pauza po welcome zpr√°vƒõ
                        logger.info("üîä Odes√≠l√°m √∫vodn√≠ zpr√°vu")
                        await send_tts_to_twilio(websocket, initial_message, stream_sid, client)
                        initial_message_sent = True
                    
                elif event == "media":
                    logger.info(f"üéµ MEDIA EVENT P≈òIJAT! Track: {msg['media'].get('track', 'unknown')}")
                    payload = msg["media"]["payload"]
                    track = msg["media"]["track"]
                    
                    if track == "inbound":
                        logger.info("üì• INBOUND TRACK - zpracov√°v√°m audio data")
                        # Real-time zpracov√°n√≠ - zpracujeme audio ihned
                        audio_data = base64.b64decode(payload)
                        audio_buffer.extend(audio_data)
                        
                        logger.info(f"üìä Audio buffer: {len(audio_buffer)} bajt≈Ø")
                        
                        # Zpracujeme audio ka≈æd√Ωch 800 bajt≈Ø (~1 sekunda audio p≈ôi 8kHz)
                        if len(audio_buffer) >= 800:  # ~1 sekunda audio p≈ôi 8kHz
                            logger.info(f"üéß Zpracov√°v√°m audio chunk ({len(audio_buffer)} bajt≈Ø) - PR√ÅH DOSA≈ΩEN!")
                            
                            # Zkop√≠rujeme buffer p≈ôed vymaz√°n√≠m
                            audio_to_process = bytes(audio_buffer)
                            audio_buffer.clear()
                            
                            # Zpracujeme audio v background tasku
                            asyncio.create_task(
                                process_audio_chunk(
                                    websocket, audio_to_process, stream_sid, 
                                    client, assistant_id, thread.id
                                )
                            )
                    else:
                        logger.info(f"üì§ OUTBOUND TRACK - ignoruji (track: {track})")
                    
                elif event == "stop":
                    logger.info("Media Stream ukonƒçen")
                    websocket_active = False
                    
                    # Zpracujeme zb√Ωvaj√≠c√≠ audio i kdy≈æ je mal√©
                    if audio_buffer and len(audio_buffer) > 100:  # Alespo≈à 100 bajt≈Ø
                        logger.info(f"üéß Zpracov√°v√°m zb√Ωvaj√≠c√≠ audio ({len(audio_buffer)} bajt≈Ø)")
                        await process_audio_chunk(
                            websocket, bytes(audio_buffer), stream_sid, 
                            client, assistant_id, thread.id
                        )
                    break
                    
            except json.JSONDecodeError as e:
                logger.error(f"DEBUG: Neplatn√Ω JSON z Twilia: {e}")
            except RuntimeError as e:
                if "Need to call \"accept\" first" in str(e):
                    logger.error(f"DEBUG: WebSocket nebyl p≈ôijat nebo byl zav≈ôen: {e}")
                else:
                    logger.error(f"DEBUG: WebSocket runtime error: {e}")
                websocket_active = False
                break
            except Exception as e:
                error_msg = str(e)
                logger.error(f"DEBUG: Chyba p≈ôi zpracov√°n√≠ zpr√°vy: {error_msg}")
                
                # Zkontrolujeme r≈Øzn√© typy WebSocket chyb
                if any(keyword in error_msg.lower() for keyword in [
                    "websocket", "disconnect", "connection", "closed", "broken pipe"
                ]):
                    logger.info("DEBUG: Detekov√°no WebSocket odpojen√≠")
                    websocket_active = False
                    break
                    
                # Pro ostatn√≠ chyby pokraƒçujeme
                continue
                    
    except Exception as e:
        logger.error(f"Chyba v Assistant API handleru: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
    finally:
        # Oznaƒç√≠me WebSocket jako neaktivn√≠
        if 'websocket_active' in locals():
            websocket_active = False
        
        # Vyƒçist√≠me keepalive task
        if 'keepalive_task' in locals() and keepalive_task and not keepalive_task.done():
            keepalive_task.cancel()
            logger.info("üíì Keepalive task ukonƒçen")
        
        # Vyƒçist√≠me thread
        if thread:
            try:
                client.beta.threads.delete(thread.id)
                logger.info(f"Thread {thread.id} smaz√°n")
            except:
                pass
        
        logger.info("=== AUDIO WEBSOCKET HANDLER UKONƒåEN ===")

@app.websocket("/voice/media-stream")
async def media_stream(websocket: WebSocket):
    logger.info("=== MEDIA STREAM WEBSOCKET HANDLER SPU≈†TƒöN ===")
    logger.info(f"WebSocket client: {websocket.client}")
    logger.info(f"WebSocket headers: {websocket.headers}")
    logger.info(f"WebSocket query params: {websocket.query_params}")
    
    await websocket.accept()
    logger.info("=== WEBSOCKET ACCEPTED - ƒåEK√ÅM NA TWILIO DATA ===")
    
    # Inicializace slu≈æeb
    from app.services.openai_service import OpenAIService
    from app.services.twilio_service import TwilioService
    openai_service = OpenAIService()
    twilio_service = TwilioService()
    
    # Stav konverzace
    conversation_state = {
        "phase": "introduction",  # introduction, teaching, questioning, evaluation
        "current_question_index": 0,
        "questions": [],
        "user_answers": [],
        "attempt_id": None,
        "user_id": None,
        "lesson_id": None,
        "lesson": None,
        "audio_buffer": b"",
        "last_audio_time": None
    }
    
    async def safe_send_text(msg):
        try:
            await websocket.send_text(msg)
        except Exception as e:
            logger.error(f"[safe_send_text] WebSocket nen√≠ p≈ôipojen: {e}")

    async def process_audio_and_respond(websocket, conversation_state, openai_service, twilio_service):
        """Zpracuje audio buffer a odpov√≠ podle f√°ze konverzace."""
        try:
            # P≈ôevod audia na text
            audio_text = openai_service.speech_to_text(
                conversation_state["audio_buffer"], 
                language=conversation_state["lesson"].language if conversation_state["lesson"] else "cs"
            )
            
            if not audio_text.strip():
                logger.info("Pr√°zdn√Ω audio - ignoruji")
                conversation_state["audio_buffer"] = b""
                return
            
            logger.info(f"P≈ôepsan√Ω text: {audio_text}")
            
            # Zpracov√°n√≠ podle f√°ze konverzace
            if conversation_state["phase"] == "introduction":
                # P≈ôechod do f√°ze v√Ωuky
                conversation_state["phase"] = "teaching"
                await send_twiml_response(websocket, twilio_service.create_teaching_response(
                    conversation_state["lesson"]
                ))
                
            elif conversation_state["phase"] == "teaching":
                # Kontrola, zda u≈æivatel chce p≈ôej√≠t k ot√°zk√°m
                if any(keyword in audio_text.lower() for keyword in ["ot√°zky", "zkou≈°en√≠", "test", "hotovo", "konec"]):
                    conversation_state["phase"] = "questioning"
                    await send_twiml_response(websocket, twilio_service.create_questioning_start_response())
                else:
                    # Odpovƒõƒè na ot√°zku o lekci
                    response = openai_service.answer_user_question(
                        audio_text,
                        current_lesson=conversation_state["lesson"].__dict__ if conversation_state["lesson"] else None,
                        language=conversation_state["lesson"].language if conversation_state["lesson"] else "cs"
                    )
                    await send_twiml_response(websocket, twilio_service.create_chat_response(
                        response["answer"],
                        conversation_state["lesson"].language if conversation_state["lesson"] else "cs"
                    ))
                    
            elif conversation_state["phase"] == "questioning":
                # Zpracov√°n√≠ odpovƒõdi na ot√°zku
                if conversation_state["current_question_index"] < len(conversation_state["questions"]):
                    current_question = conversation_state["questions"][conversation_state["current_question_index"]]
                    
                    # Vyhodnocen√≠ odpovƒõdi
                    evaluation = openai_service.evaluate_voice_answer(
                        current_question["question"],
                        current_question["correct_answer"],
                        audio_text,
                        conversation_state["lesson"].language if conversation_state["lesson"] else "cs"
                    )
                    
                    # Ulo≈æen√≠ odpovƒõdi
                    conversation_state["user_answers"].append({
                        "question": current_question["question"],
                        "correct_answer": current_question["correct_answer"],
                        "user_answer": audio_text,
                        "score": evaluation["score"],
                        "feedback": evaluation["feedback"],
                        "is_correct": evaluation["is_correct"]
                    })
                    
                    # Odpovƒõƒè s feedbackem
                    feedback_text = f"Va≈°e odpovƒõƒè: {evaluation['feedback']}. Sk√≥re: {evaluation['score']}%."
                    await send_twiml_response(websocket, twilio_service.create_feedback_response(
                        feedback_text,
                        conversation_state["lesson"].language if conversation_state["lesson"] else "cs"
                    ))
                    
                    conversation_state["current_question_index"] += 1
                    
                    # Dal≈°√≠ ot√°zka nebo konec
                    if conversation_state["current_question_index"] < len(conversation_state["questions"]):
                        next_question = conversation_state["questions"][conversation_state["current_question_index"]]
                        await send_twiml_response(websocket, twilio_service.create_question_response(
                            next_question["question"],
                            conversation_state["lesson"].language if conversation_state["lesson"] else "cs"
                        ))
                    else:
                        # Konec zkou≈°en√≠
                        conversation_state["phase"] = "evaluation"
                        await send_twiml_response(websocket, twilio_service.create_evaluation_response(
                            conversation_state["user_answers"],
                            conversation_state["lesson"].language if conversation_state["lesson"] else "cs"
                        ))
            
            # Vyƒçi≈°tƒõn√≠ bufferu
            conversation_state["audio_buffer"] = b""
            
        except Exception as e:
            logger.error(f"Chyba p≈ôi zpracov√°n√≠ audia: {e}")
            conversation_state["audio_buffer"] = b""

    async def send_twiml_response(websocket, twiml_content):
        """Po≈°le TwiML odpovƒõƒè zpƒõt do Twilio."""
        try:
            await websocket.send_text(json.dumps({
                "event": "media",
                "streamSid": "placeholder",
                "media": {
                    "payload": twiml_content
                }
            }))
        except Exception as e:
            logger.error(f"Chyba p≈ôi odes√≠l√°n√≠ TwiML: {e}")

    async def save_conversation_results(conversation_state):
        """Ulo≈æ√≠ v√Ωsledky konverzace do datab√°ze."""
        if not conversation_state["attempt_id"]:
            return
        
        session = SessionLocal()
        try:
            attempt = session.query(Attempt).get(conversation_state["attempt_id"])
            if attempt and conversation_state["user_answers"]:
                total_score = sum(answer["score"] for answer in conversation_state["user_answers"])
                average_score = total_score / len(conversation_state["user_answers"])
                attempt.score = average_score
                attempt.status = "completed"
                attempt.completed_at = datetime.now()
                attempt.calculate_next_due()
                for i, answer_data in enumerate(conversation_state["user_answers"]):
                    answer = Answer(
                        attempt_id=attempt.id,
                        question_index=i,
                        question_text=answer_data["question"],
                        correct_answer=answer_data["correct_answer"],
                        user_answer=answer_data["user_answer"],
                        score=answer_data["score"],
                        is_correct=answer_data["is_correct"],
                        feedback=answer_data["feedback"]
                    )
                    session.add(answer)
                session.commit()
                logger.info(f"Ulo≈æeny v√Ωsledky pro pokus {attempt.id}, pr≈Ømƒõrn√© sk√≥re: {average_score:.1f}%")
        except Exception as e:
            session.rollback()
            logger.error(f"Chyba p≈ôi ukl√°d√°n√≠ v√Ωsledk≈Ø: {e}")
        finally:
            session.close() 

# Konfigurace pro produkci s del≈°√≠mi WebSocket timeouty
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=int(os.getenv("PORT", 8000)),
        ws_ping_interval=30,  # Ping ka≈æd√Ωch 30 sekund
        ws_ping_timeout=10,   # Timeout pro ping odpovƒõƒè 10 sekund
        timeout_keep_alive=65  # Keep-alive timeout 65 sekund
    ) 

@app.get("/test-websocket")
async def test_websocket():
    """Test endpoint pro ovƒõ≈ôen√≠ WebSocket funkƒçnosti"""
    return {
        "message": "WebSocket test endpoint",
        "websocket_url": "wss://lecture-app-production.up.railway.app/audio",
        "test_url": "wss://lecture-app-production.up.railway.app/audio-test"
    } 

@app.websocket("/test")
async def websocket_test(websocket: WebSocket):
    """Velmi jednoduch√Ω WebSocket test"""
    logger.info("üß™ === WEBSOCKET TEST ENDPOINT SPU≈†TƒöN ===")
    await websocket.accept()
    logger.info("üß™ WebSocket test p≈ôipojen√≠ p≈ôijato")
    
    try:
        while True:
            data = await websocket.receive_text()
            logger.info(f"üß™ Test p≈ôijal: {data}")
            await websocket.send_text(f"Echo: {data}")
    except Exception as e:
        logger.info(f"üß™ Test WebSocket ukonƒçen: {e}")
    finally:
        logger.info("üß™ === WEBSOCKET TEST UKONƒåEN ===") 

@app.get("/websocket-status")
async def websocket_status():
    """Kontrola stavu WebSocket endpoint≈Ø"""
    return {
        "message": "WebSocket status check",
        "endpoints": {
            "audio": "/audio",
            "test": "/test", 
            "audio-test": "/audio-test"
        },
        "railway_websocket_support": "Testing...",
        "timestamp": "2025-07-24T19:15:00Z"
    } 

@app.post("/tts")
async def generate_tts(request: Request):
    """HTTP endpoint pro generov√°n√≠ TTS audio"""
    try:
        data = await request.json()
        text = data.get('text', '')
        
        if not text:
            return {"error": "Missing text parameter"}
        
        logger.info(f"üîä Generuji TTS pro: {text[:50]}...")
        
        # OpenAI TTS
        openai_api_key = os.getenv('OPENAI_API_KEY')
        if not openai_api_key:
            return {"error": "OpenAI API key not configured"}
        
        import openai
        client = openai.OpenAI(api_key=openai_api_key)
        
        response = client.audio.speech.create(
            model="tts-1",
            voice="nova",
            input=text,
            response_format="wav"
        )
        
        # P≈ôevod na base64 pro Twilio
        import base64
        audio_b64 = base64.b64encode(response.content).decode()
        
        logger.info("‚úÖ TTS audio vygenerov√°no")
        
        return {
            "success": True,
            "audio": audio_b64,
            "format": "wav",
            "text": text[:100]
        }
        
    except Exception as e:
        logger.error(f"Chyba p≈ôi TTS: {e}")
        return {"error": str(e)} 

@admin_router.get("/create-lesson-1", name="admin_create_lesson_1")
def admin_create_lesson_1(request: Request):
    """Endpoint pro vytvo≈ôen√≠ Lekce 1 - Z√°klady obr√°bƒõc√≠ch kapalin"""
    try:
        logger.info("üöÄ Vytv√°≈ôen√≠ Lekce 1...")
        
        session = SessionLocal()
        
        # Zkontroluj, jestli u≈æ lekce 1 existuje
        existing_lesson = session.query(Lesson).filter(
            Lesson.title.contains("Lekce 1")
        ).first()
        
        if existing_lesson:
            session.close()
            return templates.TemplateResponse("message.html", {
                "request": request,
                "message": f"‚úÖ Lekce 1 ji≈æ existuje! (ID: {existing_lesson.id})",
                "back_url": "/admin/lessons",
                "back_text": "Zpƒõt na lekce"
            })
        
        # Obsah lekce 1 - Z√°klady obr√°bƒõc√≠ch kapalin
        lesson_script = """
# Lekce 1: Z√°klady obr√°bƒõc√≠ch kapalin

## √övod
Obr√°bƒõc√≠ kapaliny jsou nezbytnou souƒç√°st√≠ modern√≠ho obr√°bƒõn√≠ kov≈Ø. Jejich spr√°vn√© pou≈æit√≠ a √∫dr≈æba v√Ωraznƒõ ovliv≈àuje kvalitu v√Ωroby, ≈æivotnost n√°stroj≈Ø a bezpeƒçnost pr√°ce.

## Hlavn√≠ funkce obr√°bƒõc√≠ch kapalin

### 1. Chlazen√≠
- Odvod tepla vznikaj√≠c√≠ho p≈ôi ≈ôezn√©m procesu
- Zabr√°nƒõn√≠ p≈ôeh≈ô√°t√≠ n√°stroje a obrobku
- Udr≈æen√≠ st√°l√© teploty ≈ôezn√© hrany

### 2. Maz√°n√≠
- Sn√≠≈æen√≠ t≈ôen√≠ mezi n√°strojem a obrobkem
- Zlep≈°en√≠ kvality povrchu
- Prodlou≈æen√≠ ≈æivotnosti n√°stroje

### 3. Odvod t≈ô√≠sek
- Transport t≈ô√≠sek pryƒç z m√≠sta ≈ôezu
- Zabr√°nƒõn√≠ zan√°≈°en√≠ n√°stroje
- Udr≈æen√≠ ƒçistoty ≈ôezn√© z√≥ny

## Typy obr√°bƒõc√≠ch kapalin

### ≈òezn√© oleje
- Vysok√° mazac√≠ schopnost
- Pou≈æit√≠ p≈ôi tƒõ≈æk√©m obr√°bƒõn√≠
- Nevhodn√© pro vysok√© rychlosti

### Emulze (smƒõsi oleje a vody)
- Kombinace maz√°n√≠ a chlazen√≠
- Nejƒçastƒõji pou≈æ√≠van√©
- Koncentrace 3-8%

### Syntetick√© kapaliny
- Bez oleje, pouze chemick√© p≈ô√≠sady
- V√Ωborn√© chladic√≠ vlastnosti
- Dlouh√° ≈æivotnost

## Kontrola a √∫dr≈æba

### Denn√≠ kontrola
- Mƒõ≈ôen√≠ koncentrace refraktometrem
- Kontrola pH hodnoty (8,5-9,5)
- Vizu√°ln√≠ kontrola ƒçistoty

### T√Ωdenn√≠ √∫dr≈æba
- Doplnƒõn√≠ kapaliny
- Odstranƒõn√≠ neƒçistot
- Kontrola bakteri√°ln√≠ kontaminace

### Mƒõs√≠ƒçn√≠ servis
- V√Ωmƒõna filtr≈Ø
- Hloubkov√° anal√Ωza
- P≈ô√≠padn√° regenerace

## Bezpeƒçnost
- Pou≈æ√≠v√°n√≠ ochrann√Ωch pom≈Øcek
- Prevence kontaktu s k≈Ø≈æ√≠
- Spr√°vn√© skladov√°n√≠ a likvidace

## Z√°vƒõr
Spr√°vn√° pr√°ce s obr√°bƒõc√≠mi kapalinami je z√°kladem efektivn√≠ho obr√°bƒõn√≠. Pravideln√° kontrola a √∫dr≈æba zaji≈°≈•uje optim√°ln√≠ v√Ωkon a bezpeƒçnost provozu.
        """
        
        # Vytvo≈ô lekci 1
        lesson = Lesson(
            title="Lekce 1: Z√°klady obr√°bƒõc√≠ch kapalin",
            description="Komplexn√≠ √∫vod do problematiky obr√°bƒõc√≠ch kapalin - funkce, typy, kontrola a √∫dr≈æba.",
            language="cs",
            script=lesson_script,
            questions=[],  # Ot√°zky se budou generovat dynamicky
            level="beginner"
        )
        
        session.add(lesson)
        session.commit()
        lesson_id = lesson.id
        session.close()
        
        logger.info(f"‚úÖ Lekce 1 vytvo≈ôena s ID: {lesson_id}")
        
        return templates.TemplateResponse("message.html", {
            "request": request,
            "message": f"üéâ Lekce 1 √∫spƒõ≈°nƒõ vytvo≈ôena!\n\nüìù ID: {lesson_id}\nüìö Obsah: Z√°klady obr√°bƒõc√≠ch kapalin\nüéØ √örove≈à: Zaƒç√°teƒçn√≠k\n\n‚ö° Ot√°zky se generuj√≠ automaticky p≈ôi testov√°n√≠!",
            "back_url": "/admin/lessons",
            "back_text": "Zobrazit v≈°echny lekce"
        })
        
    except Exception as e:
        logger.error(f"‚ùå Chyba p≈ôi vytv√°≈ôen√≠ Lekce 1: {e}")
        return templates.TemplateResponse("message.html", {
            "request": request,
            "message": f"‚ùå Chyba p≈ôi vytv√°≈ôen√≠ Lekce 1: {str(e)}",
            "back_url": "/admin/lessons",
            "back_text": "Zpƒõt na lekce"
        })

@admin_router.get("/user-progress", response_class=HTMLResponse, name="admin_user_progress")
def admin_user_progress(request: Request):
    """Zobraz√≠ pokrok v≈°ech u≈æivatel≈Ø"""
    session = SessionLocal()
    try:
        users = session.query(User).all()
        
        # P≈ôiprav data o pokroku
        progress_data = []
        for user in users:
            user_level = getattr(user, 'current_lesson_level', 0)
            
            # Najdi n√°zev aktu√°ln√≠ lekce
            current_lesson_name = "Vstupn√≠ test"
            if user_level == 1:
                current_lesson_name = "Lekce 1: Z√°klady"
            elif user_level > 1:
                current_lesson_name = f"Lekce {user_level}"
            
            progress_data.append({
                'user': user,
                'level': user_level,
                'lesson_name': current_lesson_name,
                'attempts_count': len(user.attempts) if hasattr(user, 'attempts') else 0
            })
        
        session.close()
        return templates.TemplateResponse("admin/user_progress.html", {
            "request": request, 
            "progress_data": progress_data
        })
        
    except Exception as e:
        session.close()
        logger.error(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ pokroku: {e}")
        return templates.TemplateResponse("message.html", {
            "request": request,
            "message": f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ pokroku u≈æivatel≈Ø: {str(e)}",
            "back_url": "/admin/users",
            "back_text": "Zpƒõt na u≈æivatele"
        })
#!/usr/bin/env python3
"""
Jednoduch√Ω test pro ovƒõ≈ôen√≠ funkƒçnosti aplikace
"""

import os
import sys
import logging

# Nastaven√≠ testovac√≠ho re≈æimu
os.environ['TESTING'] = 'true'

# Nastaven√≠ logov√°n√≠
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_imports():
    """Test import≈Ø v≈°ech kl√≠ƒçov√Ωch komponent."""
    try:
        logger.info("Testuji importy...")
        
        # Test z√°kladn√≠ch import≈Ø
        from app.app import create_app
        logger.info("‚úì Import create_app √∫spƒõ≈°n√Ω")
        
        from app.database import db
        logger.info("‚úì Import datab√°ze √∫spƒõ≈°n√Ω")
        
        from app.models import User, Lesson, Attempt
        logger.info("‚úì Import model≈Ø √∫spƒõ≈°n√Ω")
        
        from app.services.twilio_service import TwilioService
        logger.info("‚úì Import Twilio slu≈æby √∫spƒõ≈°n√Ω")
        
        from app.services.openai_service import OpenAIService
        logger.info("‚úì Import OpenAI slu≈æby √∫spƒõ≈°n√Ω")
        
        return True
        
    except Exception as e:
        logger.error(f"‚úó Chyba p≈ôi importu: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return False

def test_app_creation():
    """Test vytvo≈ôen√≠ Flask aplikace."""
    try:
        logger.info("Testuji vytvo≈ôen√≠ aplikace...")
        
        from app.app import create_app
        app = create_app()
        
        logger.info("‚úì Aplikace byla √∫spƒõ≈°nƒõ vytvo≈ôena")
        
        # Test health endpointu
        with app.test_client() as client:
            response = client.get('/health')
            if response.status_code == 200:
                logger.info("‚úì Health endpoint funguje")
                return True
            else:
                logger.error(f"‚úó Health endpoint vr√°til status {response.status_code}")
                return False
                
    except Exception as e:
        logger.error(f"‚úó Chyba p≈ôi vytv√°≈ôen√≠ aplikace: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return False

def test_services():
    """Test inicializace slu≈æeb."""
    try:
        logger.info("Testuji slu≈æby...")
        
        # Test OpenAI slu≈æby
        from app.services.openai_service import OpenAIService
        openai_service = OpenAIService()
        logger.info(f"‚úì OpenAI slu≈æba inicializov√°na (enabled: {openai_service.enabled})")
        
        # Test Twilio slu≈æby (m≈Ø≈æe selhat kv≈Øli chybƒõj√≠c√≠m credentials)
        try:
            from app.services.twilio_service import TwilioService
            twilio_service = TwilioService()
            logger.info(f"‚úì Twilio slu≈æba inicializov√°na (enabled: {twilio_service.enabled})")
        except Exception as e:
            logger.warning(f"‚ö† Twilio slu≈æba selhala (oƒçek√°van√©): {str(e)}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚úó Chyba p≈ôi testov√°n√≠ slu≈æeb: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return False

def main():
    """Hlavn√≠ testovac√≠ funkce."""
    logger.info("Spou≈°t√≠m testy aplikace...")
    
    tests = [
        ("Import test≈Ø", test_imports),
        ("Vytvo≈ôen√≠ aplikace", test_app_creation),
        ("Testov√°n√≠ slu≈æeb", test_services)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        logger.info(f"\n--- {test_name} ---")
        if test_func():
            passed += 1
            logger.info(f"‚úì {test_name} PRO≈†EL")
        else:
            logger.error(f"‚úó {test_name} SELHAL")
    
    logger.info(f"\n=== V√ùSLEDKY ===")
    logger.info(f"Pro≈°lo: {passed}/{total} test≈Ø")
    
    if passed == total:
        logger.info("üéâ V≈°echny testy pro≈°ly!")
        return 0
    else:
        logger.error("‚ùå Nƒõkter√© testy selhaly!")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 
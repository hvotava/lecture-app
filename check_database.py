#!/usr/bin/env python3
"""
Script pro kontrolu datab√°ze a nalezen√≠ platn√Ωch attempt_id.
"""

import os
import sys
import logging
from flask import Flask
from flask_sqlalchemy import SQLAlchemy

# P≈ôid√°n√≠ cesty k aplikaci
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Import model≈Ø
from app.app import create_app
from app.models import Attempt, Answer, User, Lesson

# Nastaven√≠ logov√°n√≠
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_database():
    """Kontrola datab√°ze a nalezen√≠ platn√Ωch attempt_id."""
    
    print("üîç Kontrola datab√°ze:")
    print("=" * 50)
    
    try:
        # Vytvo≈ôen√≠ aplikace
        app = create_app()
        
        with app.app_context():
            # Kontrola u≈æivatel≈Ø
            print("\nüë• U≈æivatel√©:")
            users = User.query.all()
            for user in users:
                print(f"   ID: {user.id}, Jm√©no: {user.name}")
            
            # Kontrola lekc√≠
            print("\nüìö Lekce:")
            lessons = Lesson.query.all()
            for lesson in lessons:
                print(f"   ID: {lesson.id}, N√°zev: {lesson.title}")
                # Kontrola ot√°zek v lekci
                if hasattr(lesson, 'questions') and lesson.questions:
                    if isinstance(lesson.questions, dict) and 'all' in lesson.questions:
                        print(f"      Ot√°zky: {len(lesson.questions['all'])}")
                    else:
                        print(f"      Ot√°zky: {lesson.questions}")
            
            # Kontrola pokus≈Ø
            print("\nüéØ Pokusy:")
            attempts = Attempt.query.order_by(Attempt.id.desc()).limit(10).all()
            for attempt in attempts:
                print(f"   ID: {attempt.id}, U≈æivatel: {attempt.user_id}, Lekce: {attempt.lesson_id}, Status: {attempt.status}")
            
            # Kontrola odpovƒõd√≠ pro nejnovƒõj≈°√≠ pokusy
            print("\nüí¨ Odpovƒõdi pro nejnovƒõj≈°√≠ pokusy:")
            for attempt in attempts[:5]:  # Kontrola prvn√≠ch 5 pokus≈Ø
                answers = Answer.query.filter_by(attempt_id=attempt.id).all()
                print(f"   Pokus {attempt.id}: {len(answers)} odpovƒõd√≠")
                if answers:
                    for i, answer in enumerate(answers[:2]):  # Zobrazit prvn√≠ 2 odpovƒõdi
                        print(f"     {i+1}. Ot√°zka: {answer.question_text[:50]}...")
                        print(f"        Odpovƒõƒè: {answer.user_answer[:30]}...")
            
            # Naj√≠t pokus s lekc√≠, kter√° m√° ot√°zky
            print("\nüéØ Hled√°n√≠ pokusu s lekc√≠ obsahuj√≠c√≠ ot√°zky:")
            for attempt in attempts:
                lesson = Lesson.query.get(attempt.lesson_id)
                if lesson and lesson.questions:
                    if isinstance(lesson.questions, dict) and 'all' in lesson.questions and lesson.questions['all']:
                        print(f"   ‚úÖ Pokus {attempt.id} m√° lekci s {len(lesson.questions['all'])} ot√°zkami")
                        print(f"      U≈æivatel: {attempt.user_id}, Lekce: {attempt.lesson_id}")
                        return attempt.id
            
            print("   ‚ùå ≈Ω√°dn√Ω pokus s lekc√≠ obsahuj√≠c√≠ ot√°zky nenalezen")
            
            # Pokud nejsou ot√°zky, zkus√≠me vytvo≈ôit nov√Ω pokus
            print("\nüÜï Vytv√°≈ôen√≠ nov√©ho pokusu:")
            if users and lessons:
                user = users[0]
                # Najdi lekci s ot√°zkami
                lesson_with_questions = None
                for lesson in lessons:
                    if lesson.questions and isinstance(lesson.questions, dict) and 'all' in lesson.questions and lesson.questions['all']:
                        lesson_with_questions = lesson
                        break
                
                if lesson_with_questions:
                    new_attempt = Attempt(
                        user_id=user.id,
                        lesson_id=lesson_with_questions.id,
                        status='in_progress'
                    )
                    
                    from app import db
                    db.session.add(new_attempt)
                    db.session.commit()
                    
                    print(f"   ‚úÖ Vytvo≈ôen nov√Ω pokus ID: {new_attempt.id}")
                    print(f"      S lekc√≠ obsahuj√≠c√≠ {len(lesson_with_questions.questions['all'])} ot√°zek")
                    return new_attempt.id
                else:
                    print("   ‚ùå ≈Ω√°dn√° lekce neobsahuje ot√°zky")
                    return None
            else:
                print("   ‚ùå Nejsou dostupn√≠ u≈æivatel√© nebo lekce")
                return None
                
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi kontrole datab√°ze: {str(e)}")
        logger.exception("Chyba p≈ôi kontrole datab√°ze")
        return None

if __name__ == "__main__":
    attempt_id = check_database()
    if attempt_id:
        print(f"\nüéâ Doporuƒçen√Ω attempt_id pro testov√°n√≠: {attempt_id}")
    else:
        print("\n‚ùå Nepoda≈ôilo se naj√≠t nebo vytvo≈ôit platn√Ω attempt_id") 